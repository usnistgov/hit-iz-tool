# application.conf

report {

  # Detections classifications
  classification {
    error         = "Error"
    warning       = "Warning"
    alert         = "Alert"
    informational = "Informational"
    affirmative   = "Affirmative"
  }

  # Detection categories
  category {
    re-usage       = "RE-Usage",
    r-usage       = "R-Usage",
    x-usage       = "X-Usage"
    w-usage       = "W-Usage"
    cardinality = "Cardinality"
    length      = "Length"
    format      = "Format"
    extra       = "Extra"
    unexpected  = "Unexpected"
    invalid     = "Invalid Content"
    unescaped   = "Unescaped Separator"

    constraint  = "Conformance Statement"
    predicate   = "Predicate"

    value-set = "Value Set"
    coded-element = "Coded Element"
  }

  ################################################################################
  ###             Structure based detections                                   ###
  ################################################################################

  ################################################################################
  # Usage detections
  #
  #    There are four types of detections:
  #       * RUsage: Raised when an element with R usage is not populated
  #       * XUsage:  Raised when an element with X  usage is populated
  #       * WUsage:  Raised when an element with W  usage is populated
  #       * REUsage: Raised when an element with RE usage is populated
  #
  #    The template takes one parameter:
  #        the location formatted as:  ElementType ElementPath (ElementDescription)
  ################################################################################

  r-usage {
    template = "The required %s is missing"
    category = ${report.category.r-usage}
    classification = ${report.classification.error}
  }

  x-usage {
    template = "The %s is present whereas it is an unsupported element (Usage = X)"
    category = ${report.category.x-usage}
    classification = ${report.classification.error}
  }

  w-usage {
    template = "The %s is present whereas it is a withdrawn element (Usage = W)"
    category = ${report.category.w-usage}
    classification = ${report.classification.error}
  }

  re-usage {
    template = "%s is missing. Depending on the use case and data availability it may be appropriate to value this element.(Usage is "RE", Required, but may be Empty)"
    category = ${report.category.re-usage}
    classification = ${report.classification.warning}
  }

  ################################################################################
  # Cardinality detection
  #
  #   The cardinality detection is issued when the number of repetitions of an
  #   element is not in the specified cardinality range.
  #
  #   The template takes four parameters:
  #     $1 is the location formatted as: ElementType ElementPath (Element Description)
  #     $2 is the minimum cardinality
  #     $3 is the maximum cardinality
  #     $4 is the number of repetitions found
  ################################################################################

  cardinality {
    template = "%s must be in the cardinality range of [%s, %s]; %s occurrences found"
    category = ${report.category.cardinality}
    classification = ${report.classification.error}
  }

  ################################################################################
  # Length detection
  #
  #    The length detection is issued when the length of a primitive element
  #    is not in the specified length range.
  #
  #    The template takes four parameters:
  #      $1 is the location formatted as: ElementType ElementPath (Element Description)
  #      $2 is the minimum length
  #      $3 is the maximum length
  #      $4 the value of the element
  ################################################################################

  length {
    template = "The length of %s must be within the range [%s, %s]. Value = '%s'"
    category = ${report.category.length}
    classification = ${report.classification.informational}
  }

  ################################################################################
  # Format detection
  #
  #    The format detection is issued when the value of a primitive element
  #    is not valid according to the format defined or derived from the data type.
  #
  #    The template takes one parameters: The error message
  ################################################################################

  format {
    template = "%s"
    category = ${report.category.format}
    classification = ${report.classification.error}
  }

  ################################################################################
  # Extra children detection
  #
  #    This detection is issued when a complex element has extra children
  #
  #    The template takes one parameter:
  #       the location formatted as: ElementType ElementPath (Element Description)
  ################################################################################

  extra {
    template = "%s has extra children"
    category = ${report.category.extra}
    classification = ${report.classification.error}
  }

  ################################################################################
  # Unescaped Sep detection
  #
  #    This detection is issued when a primitive element contains unescaped separators
  #
  #    The template takes one parameter:
  #       the location formatted as: ElementType ElementPath (Element Description)
  ################################################################################

  unescaped {
    template = "The primitive %s contains at least one unescaped delimiter"
    category = ${report.category.unescaped}
    classification = ${report.classification.error}
  }

  ################################################################################
  # Unexpected Segment detection
  #
  #    This detection is issued when an unexpected segment is found at a specific position
  #
  #    The template takes one parameter: the content representing the segment
  ################################################################################

  unexpected {
    template = "Segment %s is not expected at this location"
    category = ${report.category.unexpected}
    classification = ${report.classification.error}
  }

  ################################################################################
  # Invalid Segment definition detection
  #
  #    This detection is issued when an invalid content is found in the message
  #
  #    The template takes one parameter: the content representing the segment
  ################################################################################

  invalid {
    template = "'%s' is not a valid segment definition"
    category = ${report.category.invalid}
    classification = ${report.classification.error}
  }

  ################################################################################
  ###             Content based detections                                     ###
  ################################################################################

  ################################################################################
  # This detection is issued for a failed constraint verification
  #
  #    The template takes two parameter:
  #       $1 The id of the constraint
  #       $2 The description of the constraint
  ################################################################################
  failure {
    template = "%s - %s"
    category = ${report.category.constraint}
    classification = ${report.classification.error}
  }

  ################################################################################
  # This detection is issued for a failed predicate verification
  #
  #    The template takes three parameter:
  #       $1 The formatted string representing the usage error
  #       $2 The usage to be used based on the condition
  #       $3 The predicate description
  ################################################################################
  predicate-failure {
    template = "%s. The element is %s based on the condition predicate evaluation: %s"
    category = ${report.category.predicate}
    classification = ${report.classification.error}
  }

  ################################################################################
  ###             Value set based detections                                   ###
  ################################################################################

  ################################################################################
  # This detection is raised when the code is in the value set but the usage is E
  #
  #    The template takes three parameters:
  #       $1 The value of the data element
  #       $2 The location formatted as: ElementType ElementPath (Element Description)
  #       $3 The id of the value set
  ################################################################################
  evs {
    template = "The value '%s' at location %s is an excluded (E) code; Value Set: %s"
    category = ${report.category.value-set}
    classification = ${report.classification.error}
  }

  ################################################################################
  # This detection is raised when the code is in the value set but the usage is P
  #
  #    The template takes three parameters:
  #       $1 The value of the data element
  #       $2 The location formatted as: ElementType ElementPath (Element Description)
  #       $3 The id of the value set
  ################################################################################
  pvs {
    template = "The value '%s' at location %s is a permitted (P) code; Value Set: %s"
    category = ${report.category.value-set}
    classification = ${report.classification.warning}
  }

  ################################################################################
  # This detection is raised when the code cannot be found in the value set
  #
  #    The template takes three parameters:
  #       $1 The value of the data element
  #       $2 The location formatted as: ElementType ElementPath (Element Description)
  #       $3 The id of the value set
  ################################################################################
  code-not-found {
    template = "The value '%s' at location %s is not member of the value set %s"
    category = ${report.category.value-set}
    classification = ${report.classification.error}
  }

  ################################################################################
  # This detection is raised when the value set cannot be found in the library
  #
  #    The template takes three parameters:
  #       $1 The value of the data element
  #       $2 The location formatted as: ElementType ElementPath (Element Description)
  #       $3 The id of the value set
  ################################################################################
  vs-not-found {
    template = "The value '%s' at location %s cannot be evaluated. The value set '%s' cannot be found."
    category = ${report.category.value-set}
    classification = ${report.classification.error}
  }

  ################################################################################
  # This detection is raised when the value set is empty
  #
  #    The template takes one parameter: The id of the value set
  ################################################################################
  empty-vs {
    template = "The value set %s is empty"
    category = ${report.category.value-set}
    classification = ${report.classification.error}
  }

  ################################################################################
  # This detection is raised when there is an error in the value set
  #
  #    The template takes one parameter: The error message
  ################################################################################
  vs-error {
    template = "%s"
    category = ${report.category.value-set}
    classification = ${report.classification.error}
  }

  ################################################################################
  # This detection is raised when the value set is excluded from the validation
  #
  #    The template takes one parameter: The id of the value set
  ################################################################################
  vs-no-validation {
    template = "The value set %s has been excluded from the validation"
    category = ${report.category.value-set}
    classification = ${report.classification.alert}
  }

  ################################################################################
  # This detection is raised when coded element validation fails
  #
  #    The template takes one parameter: The error message describing the problem
  ################################################################################
  coded-element {
    template = "%s"
    category = ${report.category.coded-element}
    classification = ${report.classification.error}
  }





}
