!function(e, t) {
    "use strict";
    "object" == typeof module && "object" == typeof module.exports ? module.exports = e.document ? t(e, !0) : function(e) {
        if (!e.document) throw new Error("jQuery requires a window with a document");
        return t(e);
    } : t(e);
}("undefined" != typeof window ? window : this, function(C, e) {
    "use strict";
    var t = [], r = Object.getPrototypeOf, s = t.slice, g = t.flat ? function(e) {
        return t.flat.call(e);
    } : function(e) {
        return t.concat.apply([], e);
    }, u = t.push, i = t.indexOf, n = {}, o = n.toString, v = n.hasOwnProperty, a = v.toString, l = a.call(Object), y = {}, m = function(e) {
        return "function" == typeof e && "number" != typeof e.nodeType;
    }, x = function(e) {
        return null != e && e === e.window;
    }, E = C.document, c = {
        type: !0,
        src: !0,
        nonce: !0,
        noModule: !0
    };
    function b(e, t, n) {
        var r, i, o = (n = n || E).createElement("script");
        if (o.text = e, t) for (r in c) (i = t[r] || t.getAttribute && t.getAttribute(r)) && o.setAttribute(r, i);
        n.head.appendChild(o).parentNode.removeChild(o);
    }
    function w(e) {
        return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? n[o.call(e)] || "object" : typeof e;
    }
    var f = "3.5.1", S = function(e, t) {
        return new S.fn.init(e, t);
    };
    function p(e) {
        var t = !!e && "length" in e && e.length, n = w(e);
        return !m(e) && !x(e) && ("array" === n || 0 === t || "number" == typeof t && 0 < t && t - 1 in e);
    }
    S.fn = S.prototype = {
        jquery: f,
        constructor: S,
        length: 0,
        toArray: function() {
            return s.call(this);
        },
        get: function(e) {
            return null == e ? s.call(this) : e < 0 ? this[e + this.length] : this[e];
        },
        pushStack: function(e) {
            var t = S.merge(this.constructor(), e);
            return t.prevObject = this, t;
        },
        each: function(e) {
            return S.each(this, e);
        },
        map: function(n) {
            return this.pushStack(S.map(this, function(e, t) {
                return n.call(e, t, e);
            }));
        },
        slice: function() {
            return this.pushStack(s.apply(this, arguments));
        },
        first: function() {
            return this.eq(0);
        },
        last: function() {
            return this.eq(-1);
        },
        even: function() {
            return this.pushStack(S.grep(this, function(e, t) {
                return (t + 1) % 2;
            }));
        },
        odd: function() {
            return this.pushStack(S.grep(this, function(e, t) {
                return t % 2;
            }));
        },
        eq: function(e) {
            var t = this.length, n = +e + (e < 0 ? t : 0);
            return this.pushStack(0 <= n && n < t ? [ this[n] ] : []);
        },
        end: function() {
            return this.prevObject || this.constructor();
        },
        push: u,
        sort: t.sort,
        splice: t.splice
    }, S.extend = S.fn.extend = function() {
        var e, t, n, r, i, o, a = arguments[0] || {}, s = 1, u = arguments.length, l = !1;
        for ("boolean" == typeof a && (l = a, a = arguments[s] || {}, s++), "object" == typeof a || m(a) || (a = {}), 
        s === u && (a = this, s--); s < u; s++) if (null != (e = arguments[s])) for (t in e) r = e[t], 
        "__proto__" !== t && a !== r && (l && r && (S.isPlainObject(r) || (i = Array.isArray(r))) ? (n = a[t], 
        o = i && !Array.isArray(n) ? [] : i || S.isPlainObject(n) ? n : {}, i = !1, a[t] = S.extend(l, o, r)) : void 0 !== r && (a[t] = r));
        return a;
    }, S.extend({
        expando: "jQuery" + (f + Math.random()).replace(/\D/g, ""),
        isReady: !0,
        error: function(e) {
            throw new Error(e);
        },
        noop: function() {},
        isPlainObject: function(e) {
            var t, n;
            return !(!e || "[object Object]" !== o.call(e)) && (!(t = r(e)) || "function" == typeof (n = v.call(t, "constructor") && t.constructor) && a.call(n) === l);
        },
        isEmptyObject: function(e) {
            var t;
            for (t in e) return !1;
            return !0;
        },
        globalEval: function(e, t, n) {
            b(e, {
                nonce: t && t.nonce
            }, n);
        },
        each: function(e, t) {
            var n, r = 0;
            if (p(e)) {
                for (n = e.length; r < n; r++) if (!1 === t.call(e[r], r, e[r])) break;
            } else for (r in e) if (!1 === t.call(e[r], r, e[r])) break;
            return e;
        },
        makeArray: function(e, t) {
            var n = t || [];
            return null != e && (p(Object(e)) ? S.merge(n, "string" == typeof e ? [ e ] : e) : u.call(n, e)), 
            n;
        },
        inArray: function(e, t, n) {
            return null == t ? -1 : i.call(t, e, n);
        },
        merge: function(e, t) {
            for (var n = +t.length, r = 0, i = e.length; r < n; r++) e[i++] = t[r];
            return e.length = i, e;
        },
        grep: function(e, t, n) {
            for (var r = [], i = 0, o = e.length, a = !n; i < o; i++) !t(e[i], i) !== a && r.push(e[i]);
            return r;
        },
        map: function(e, t, n) {
            var r, i, o = 0, a = [];
            if (p(e)) for (r = e.length; o < r; o++) null != (i = t(e[o], o, n)) && a.push(i); else for (o in e) null != (i = t(e[o], o, n)) && a.push(i);
            return g(a);
        },
        guid: 1,
        support: y
    }), "function" == typeof Symbol && (S.fn[Symbol.iterator] = t[Symbol.iterator]), 
    S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function(e, t) {
        n["[object " + t + "]"] = t.toLowerCase();
    });
    var d = function(n) {
        var e, d, b, o, i, h, f, g, w, u, l, T, C, a, E, v, s, c, y, S = "sizzle" + 1 * new Date(), p = n.document, k = 0, r = 0, m = ue(), x = ue(), A = ue(), N = ue(), D = function(e, t) {
            return e === t && (l = !0), 0;
        }, j = {}.hasOwnProperty, t = [], q = t.pop, L = t.push, H = t.push, O = t.slice, P = function(e, t) {
            for (var n = 0, r = e.length; n < r; n++) if (e[n] === t) return n;
            return -1;
        }, R = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", M = "[\\x20\\t\\r\\n\\f]", I = "(?:\\\\[\\da-fA-F]{1,6}" + M + "?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+", W = "\\[" + M + "*(" + I + ")(?:" + M + "*([*^$|!~]?=)" + M + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + I + "))|)" + M + "*\\]", F = ":(" + I + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + W + ")*)|.*)\\)|)", B = new RegExp(M + "+", "g"), $ = new RegExp("^" + M + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M + "+$", "g"), _ = new RegExp("^" + M + "*," + M + "*"), z = new RegExp("^" + M + "*([>+~]|" + M + ")" + M + "*"), U = new RegExp(M + "|>"), X = new RegExp(F), V = new RegExp("^" + I + "$"), G = {
            ID: new RegExp("^#(" + I + ")"),
            CLASS: new RegExp("^\\.(" + I + ")"),
            TAG: new RegExp("^(" + I + "|[*])"),
            ATTR: new RegExp("^" + W),
            PSEUDO: new RegExp("^" + F),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + M + "*(even|odd|(([+-]|)(\\d*)n|)" + M + "*(?:([+-]|)" + M + "*(\\d+)|))" + M + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + R + ")$", "i"),
            needsContext: new RegExp("^" + M + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + M + "*((?:-\\d)?\\d*)" + M + "*\\)|)(?=[^-]|$)", "i")
        }, Y = /HTML$/i, Q = /^(?:input|select|textarea|button)$/i, J = /^h\d$/i, K = /^[^{]+\{\s*\[native \w/, Z = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, ee = /[+~]/, te = new RegExp("\\\\[\\da-fA-F]{1,6}" + M + "?|\\\\([^\\r\\n\\f])", "g"), ne = function(e, t) {
            var n = "0x" + e.slice(1) - 65536;
            return t || (n < 0 ? String.fromCharCode(n + 65536) : String.fromCharCode(n >> 10 | 55296, 1023 & n | 56320));
        }, re = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g, ie = function(e, t) {
            return t ? "\0" === e ? "ï¿½" : e.slice(0, -1) + "\\" + e.charCodeAt(e.length - 1).toString(16) + " " : "\\" + e;
        }, oe = function() {
            T();
        }, ae = be(function(e) {
            return !0 === e.disabled && "fieldset" === e.nodeName.toLowerCase();
        }, {
            dir: "parentNode",
            next: "legend"
        });
        try {
            H.apply(t = O.call(p.childNodes), p.childNodes), t[p.childNodes.length].nodeType;
        } catch (e) {
            H = {
                apply: t.length ? function(e, t) {
                    L.apply(e, O.call(t));
                } : function(e, t) {
                    var n = e.length, r = 0;
                    while (e[n++] = t[r++]) ;
                    e.length = n - 1;
                }
            };
        }
        function se(t, e, n, r) {
            var i, o, a, s, u, l, c, f = e && e.ownerDocument, p = e ? e.nodeType : 9;
            if (n = n || [], "string" != typeof t || !t || 1 !== p && 9 !== p && 11 !== p) return n;
            if (!r && (T(e), e = e || C, E)) {
                if (11 !== p && (u = Z.exec(t))) if (i = u[1]) {
                    if (9 === p) {
                        if (!(a = e.getElementById(i))) return n;
                        if (a.id === i) return n.push(a), n;
                    } else if (f && (a = f.getElementById(i)) && y(e, a) && a.id === i) return n.push(a), 
                    n;
                } else {
                    if (u[2]) return H.apply(n, e.getElementsByTagName(t)), n;
                    if ((i = u[3]) && d.getElementsByClassName && e.getElementsByClassName) return H.apply(n, e.getElementsByClassName(i)), 
                    n;
                }
                if (d.qsa && !N[t + " "] && (!v || !v.test(t)) && (1 !== p || "object" !== e.nodeName.toLowerCase())) {
                    if (c = t, f = e, 1 === p && (U.test(t) || z.test(t))) {
                        (f = ee.test(t) && ye(e.parentNode) || e) === e && d.scope || ((s = e.getAttribute("id")) ? s = s.replace(re, ie) : e.setAttribute("id", s = S)), 
                        o = (l = h(t)).length;
                        while (o--) l[o] = (s ? "#" + s : ":scope") + " " + xe(l[o]);
                        c = l.join(",");
                    }
                    try {
                        return H.apply(n, f.querySelectorAll(c)), n;
                    } catch (e) {
                        N(t, !0);
                    } finally {
                        s === S && e.removeAttribute("id");
                    }
                }
            }
            return g(t.replace($, "$1"), e, n, r);
        }
        function ue() {
            var r = [];
            return function e(t, n) {
                return r.push(t + " ") > b.cacheLength && delete e[r.shift()], e[t + " "] = n;
            };
        }
        function le(e) {
            return e[S] = !0, e;
        }
        function ce(e) {
            var t = C.createElement("fieldset");
            try {
                return !!e(t);
            } catch (e) {
                return !1;
            } finally {
                t.parentNode && t.parentNode.removeChild(t), t = null;
            }
        }
        function fe(e, t) {
            var n = e.split("|"), r = n.length;
            while (r--) b.attrHandle[n[r]] = t;
        }
        function pe(e, t) {
            var n = t && e, r = n && 1 === e.nodeType && 1 === t.nodeType && e.sourceIndex - t.sourceIndex;
            if (r) return r;
            if (n) while (n = n.nextSibling) if (n === t) return -1;
            return e ? 1 : -1;
        }
        function de(t) {
            return function(e) {
                return "input" === e.nodeName.toLowerCase() && e.type === t;
            };
        }
        function he(n) {
            return function(e) {
                var t = e.nodeName.toLowerCase();
                return ("input" === t || "button" === t) && e.type === n;
            };
        }
        function ge(t) {
            return function(e) {
                return "form" in e ? e.parentNode && !1 === e.disabled ? "label" in e ? "label" in e.parentNode ? e.parentNode.disabled === t : e.disabled === t : e.isDisabled === t || e.isDisabled !== !t && ae(e) === t : e.disabled === t : "label" in e && e.disabled === t;
            };
        }
        function ve(a) {
            return le(function(o) {
                return o = +o, le(function(e, t) {
                    var n, r = a([], e.length, o), i = r.length;
                    while (i--) e[n = r[i]] && (e[n] = !(t[n] = e[n]));
                });
            });
        }
        function ye(e) {
            return e && "undefined" != typeof e.getElementsByTagName && e;
        }
        for (e in d = se.support = {}, i = se.isXML = function(e) {
            var t = e.namespaceURI, n = (e.ownerDocument || e).documentElement;
            return !Y.test(t || n && n.nodeName || "HTML");
        }, T = se.setDocument = function(e) {
            var t, n, r = e ? e.ownerDocument || e : p;
            return r != C && 9 === r.nodeType && r.documentElement && (a = (C = r).documentElement, 
            E = !i(C), p != C && (n = C.defaultView) && n.top !== n && (n.addEventListener ? n.addEventListener("unload", oe, !1) : n.attachEvent && n.attachEvent("onunload", oe)), 
            d.scope = ce(function(e) {
                return a.appendChild(e).appendChild(C.createElement("div")), "undefined" != typeof e.querySelectorAll && !e.querySelectorAll(":scope fieldset div").length;
            }), d.attributes = ce(function(e) {
                return e.className = "i", !e.getAttribute("className");
            }), d.getElementsByTagName = ce(function(e) {
                return e.appendChild(C.createComment("")), !e.getElementsByTagName("*").length;
            }), d.getElementsByClassName = K.test(C.getElementsByClassName), d.getById = ce(function(e) {
                return a.appendChild(e).id = S, !C.getElementsByName || !C.getElementsByName(S).length;
            }), d.getById ? (b.filter.ID = function(e) {
                var t = e.replace(te, ne);
                return function(e) {
                    return e.getAttribute("id") === t;
                };
            }, b.find.ID = function(e, t) {
                if ("undefined" != typeof t.getElementById && E) {
                    var n = t.getElementById(e);
                    return n ? [ n ] : [];
                }
            }) : (b.filter.ID = function(e) {
                var n = e.replace(te, ne);
                return function(e) {
                    var t = "undefined" != typeof e.getAttributeNode && e.getAttributeNode("id");
                    return t && t.value === n;
                };
            }, b.find.ID = function(e, t) {
                if ("undefined" != typeof t.getElementById && E) {
                    var n, r, i, o = t.getElementById(e);
                    if (o) {
                        if ((n = o.getAttributeNode("id")) && n.value === e) return [ o ];
                        i = t.getElementsByName(e), r = 0;
                        while (o = i[r++]) if ((n = o.getAttributeNode("id")) && n.value === e) return [ o ];
                    }
                    return [];
                }
            }), b.find.TAG = d.getElementsByTagName ? function(e, t) {
                return "undefined" != typeof t.getElementsByTagName ? t.getElementsByTagName(e) : d.qsa ? t.querySelectorAll(e) : void 0;
            } : function(e, t) {
                var n, r = [], i = 0, o = t.getElementsByTagName(e);
                if ("*" === e) {
                    while (n = o[i++]) 1 === n.nodeType && r.push(n);
                    return r;
                }
                return o;
            }, b.find.CLASS = d.getElementsByClassName && function(e, t) {
                if ("undefined" != typeof t.getElementsByClassName && E) return t.getElementsByClassName(e);
            }, s = [], v = [], (d.qsa = K.test(C.querySelectorAll)) && (ce(function(e) {
                var t;
                a.appendChild(e).innerHTML = "<a id='" + S + "'></a><select id='" + S + "-\r\\' msallowcapture=''><option selected=''></option></select>", 
                e.querySelectorAll("[msallowcapture^='']").length && v.push("[*^$]=" + M + "*(?:''|\"\")"), 
                e.querySelectorAll("[selected]").length || v.push("\\[" + M + "*(?:value|" + R + ")"), 
                e.querySelectorAll("[id~=" + S + "-]").length || v.push("~="), (t = C.createElement("input")).setAttribute("name", ""), 
                e.appendChild(t), e.querySelectorAll("[name='']").length || v.push("\\[" + M + "*name" + M + "*=" + M + "*(?:''|\"\")"), 
                e.querySelectorAll(":checked").length || v.push(":checked"), e.querySelectorAll("a#" + S + "+*").length || v.push(".#.+[+~]"), 
                e.querySelectorAll("\\\f"), v.push("[\\r\\n\\f]");
            }), ce(function(e) {
                e.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
                var t = C.createElement("input");
                t.setAttribute("type", "hidden"), e.appendChild(t).setAttribute("name", "D"), e.querySelectorAll("[name=d]").length && v.push("name" + M + "*[*^$|!~]?="), 
                2 !== e.querySelectorAll(":enabled").length && v.push(":enabled", ":disabled"), 
                a.appendChild(e).disabled = !0, 2 !== e.querySelectorAll(":disabled").length && v.push(":enabled", ":disabled"), 
                e.querySelectorAll("*,:x"), v.push(",.*:");
            })), (d.matchesSelector = K.test(c = a.matches || a.webkitMatchesSelector || a.mozMatchesSelector || a.oMatchesSelector || a.msMatchesSelector)) && ce(function(e) {
                d.disconnectedMatch = c.call(e, "*"), c.call(e, "[s!='']:x"), s.push("!=", F);
            }), v = v.length && new RegExp(v.join("|")), s = s.length && new RegExp(s.join("|")), 
            t = K.test(a.compareDocumentPosition), y = t || K.test(a.contains) ? function(e, t) {
                var n = 9 === e.nodeType ? e.documentElement : e, r = t && t.parentNode;
                return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)));
            } : function(e, t) {
                if (t) while (t = t.parentNode) if (t === e) return !0;
                return !1;
            }, D = t ? function(e, t) {
                if (e === t) return l = !0, 0;
                var n = !e.compareDocumentPosition - !t.compareDocumentPosition;
                return n || (1 & (n = (e.ownerDocument || e) == (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !d.sortDetached && t.compareDocumentPosition(e) === n ? e == C || e.ownerDocument == p && y(p, e) ? -1 : t == C || t.ownerDocument == p && y(p, t) ? 1 : u ? P(u, e) - P(u, t) : 0 : 4 & n ? -1 : 1);
            } : function(e, t) {
                if (e === t) return l = !0, 0;
                var n, r = 0, i = e.parentNode, o = t.parentNode, a = [ e ], s = [ t ];
                if (!i || !o) return e == C ? -1 : t == C ? 1 : i ? -1 : o ? 1 : u ? P(u, e) - P(u, t) : 0;
                if (i === o) return pe(e, t);
                n = e;
                while (n = n.parentNode) a.unshift(n);
                n = t;
                while (n = n.parentNode) s.unshift(n);
                while (a[r] === s[r]) r++;
                return r ? pe(a[r], s[r]) : a[r] == p ? -1 : s[r] == p ? 1 : 0;
            }), C;
        }, se.matches = function(e, t) {
            return se(e, null, null, t);
        }, se.matchesSelector = function(e, t) {
            if (T(e), d.matchesSelector && E && !N[t + " "] && (!s || !s.test(t)) && (!v || !v.test(t))) try {
                var n = c.call(e, t);
                if (n || d.disconnectedMatch || e.document && 11 !== e.document.nodeType) return n;
            } catch (e) {
                N(t, !0);
            }
            return 0 < se(t, C, null, [ e ]).length;
        }, se.contains = function(e, t) {
            return (e.ownerDocument || e) != C && T(e), y(e, t);
        }, se.attr = function(e, t) {
            (e.ownerDocument || e) != C && T(e);
            var n = b.attrHandle[t.toLowerCase()], r = n && j.call(b.attrHandle, t.toLowerCase()) ? n(e, t, !E) : void 0;
            return void 0 !== r ? r : d.attributes || !E ? e.getAttribute(t) : (r = e.getAttributeNode(t)) && r.specified ? r.value : null;
        }, se.escape = function(e) {
            return (e + "").replace(re, ie);
        }, se.error = function(e) {
            throw new Error("Syntax error, unrecognized expression: " + e);
        }, se.uniqueSort = function(e) {
            var t, n = [], r = 0, i = 0;
            if (l = !d.detectDuplicates, u = !d.sortStable && e.slice(0), e.sort(D), l) {
                while (t = e[i++]) t === e[i] && (r = n.push(i));
                while (r--) e.splice(n[r], 1);
            }
            return u = null, e;
        }, o = se.getText = function(e) {
            var t, n = "", r = 0, i = e.nodeType;
            if (i) {
                if (1 === i || 9 === i || 11 === i) {
                    if ("string" == typeof e.textContent) return e.textContent;
                    for (e = e.firstChild; e; e = e.nextSibling) n += o(e);
                } else if (3 === i || 4 === i) return e.nodeValue;
            } else while (t = e[r++]) n += o(t);
            return n;
        }, (b = se.selectors = {
            cacheLength: 50,
            createPseudo: le,
            match: G,
            attrHandle: {},
            find: {},
            relative: {
                ">": {
                    dir: "parentNode",
                    first: !0
                },
                " ": {
                    dir: "parentNode"
                },
                "+": {
                    dir: "previousSibling",
                    first: !0
                },
                "~": {
                    dir: "previousSibling"
                }
            },
            preFilter: {
                ATTR: function(e) {
                    return e[1] = e[1].replace(te, ne), e[3] = (e[3] || e[4] || e[5] || "").replace(te, ne), 
                    "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4);
                },
                CHILD: function(e) {
                    return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || se.error(e[0]), 
                    e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && se.error(e[0]), 
                    e;
                },
                PSEUDO: function(e) {
                    var t, n = !e[6] && e[2];
                    return G.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : n && X.test(n) && (t = h(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), 
                    e[2] = n.slice(0, t)), e.slice(0, 3));
                }
            },
            filter: {
                TAG: function(e) {
                    var t = e.replace(te, ne).toLowerCase();
                    return "*" === e ? function() {
                        return !0;
                    } : function(e) {
                        return e.nodeName && e.nodeName.toLowerCase() === t;
                    };
                },
                CLASS: function(e) {
                    var t = m[e + " "];
                    return t || (t = new RegExp("(^|" + M + ")" + e + "(" + M + "|$)")) && m(e, function(e) {
                        return t.test("string" == typeof e.className && e.className || "undefined" != typeof e.getAttribute && e.getAttribute("class") || "");
                    });
                },
                ATTR: function(n, r, i) {
                    return function(e) {
                        var t = se.attr(e, n);
                        return null == t ? "!=" === r : !r || (t += "", "=" === r ? t === i : "!=" === r ? t !== i : "^=" === r ? i && 0 === t.indexOf(i) : "*=" === r ? i && -1 < t.indexOf(i) : "$=" === r ? i && t.slice(-i.length) === i : "~=" === r ? -1 < (" " + t.replace(B, " ") + " ").indexOf(i) : "|=" === r && (t === i || t.slice(0, i.length + 1) === i + "-"));
                    };
                },
                CHILD: function(h, e, t, g, v) {
                    var y = "nth" !== h.slice(0, 3), m = "last" !== h.slice(-4), x = "of-type" === e;
                    return 1 === g && 0 === v ? function(e) {
                        return !!e.parentNode;
                    } : function(e, t, n) {
                        var r, i, o, a, s, u, l = y !== m ? "nextSibling" : "previousSibling", c = e.parentNode, f = x && e.nodeName.toLowerCase(), p = !n && !x, d = !1;
                        if (c) {
                            if (y) {
                                while (l) {
                                    a = e;
                                    while (a = a[l]) if (x ? a.nodeName.toLowerCase() === f : 1 === a.nodeType) return !1;
                                    u = l = "only" === h && !u && "nextSibling";
                                }
                                return !0;
                            }
                            if (u = [ m ? c.firstChild : c.lastChild ], m && p) {
                                d = (s = (r = (i = (o = (a = c)[S] || (a[S] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] || [])[0] === k && r[1]) && r[2], 
                                a = s && c.childNodes[s];
                                while (a = ++s && a && a[l] || (d = s = 0) || u.pop()) if (1 === a.nodeType && ++d && a === e) {
                                    i[h] = [ k, s, d ];
                                    break;
                                }
                            } else if (p && (d = s = (r = (i = (o = (a = e)[S] || (a[S] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] || [])[0] === k && r[1]), 
                            !1 === d) while (a = ++s && a && a[l] || (d = s = 0) || u.pop()) if ((x ? a.nodeName.toLowerCase() === f : 1 === a.nodeType) && ++d && (p && ((i = (o = a[S] || (a[S] = {}))[a.uniqueID] || (o[a.uniqueID] = {}))[h] = [ k, d ]), 
                            a === e)) break;
                            return (d -= v) === g || d % g == 0 && 0 <= d / g;
                        }
                    };
                },
                PSEUDO: function(e, o) {
                    var t, a = b.pseudos[e] || b.setFilters[e.toLowerCase()] || se.error("unsupported pseudo: " + e);
                    return a[S] ? a(o) : 1 < a.length ? (t = [ e, e, "", o ], b.setFilters.hasOwnProperty(e.toLowerCase()) ? le(function(e, t) {
                        var n, r = a(e, o), i = r.length;
                        while (i--) e[n = P(e, r[i])] = !(t[n] = r[i]);
                    }) : function(e) {
                        return a(e, 0, t);
                    }) : a;
                }
            },
            pseudos: {
                not: le(function(e) {
                    var r = [], i = [], s = f(e.replace($, "$1"));
                    return s[S] ? le(function(e, t, n, r) {
                        var i, o = s(e, null, r, []), a = e.length;
                        while (a--) (i = o[a]) && (e[a] = !(t[a] = i));
                    }) : function(e, t, n) {
                        return r[0] = e, s(r, null, n, i), r[0] = null, !i.pop();
                    };
                }),
                has: le(function(t) {
                    return function(e) {
                        return 0 < se(t, e).length;
                    };
                }),
                contains: le(function(t) {
                    return t = t.replace(te, ne), function(e) {
                        return -1 < (e.textContent || o(e)).indexOf(t);
                    };
                }),
                lang: le(function(n) {
                    return V.test(n || "") || se.error("unsupported lang: " + n), n = n.replace(te, ne).toLowerCase(), 
                    function(e) {
                        var t;
                        do {
                            if (t = E ? e.lang : e.getAttribute("xml:lang") || e.getAttribute("lang")) return (t = t.toLowerCase()) === n || 0 === t.indexOf(n + "-");
                        } while ((e = e.parentNode) && 1 === e.nodeType);
                        return !1;
                    };
                }),
                target: function(e) {
                    var t = n.location && n.location.hash;
                    return t && t.slice(1) === e.id;
                },
                root: function(e) {
                    return e === a;
                },
                focus: function(e) {
                    return e === C.activeElement && (!C.hasFocus || C.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);
                },
                enabled: ge(!1),
                disabled: ge(!0),
                checked: function(e) {
                    var t = e.nodeName.toLowerCase();
                    return "input" === t && !!e.checked || "option" === t && !!e.selected;
                },
                selected: function(e) {
                    return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected;
                },
                empty: function(e) {
                    for (e = e.firstChild; e; e = e.nextSibling) if (e.nodeType < 6) return !1;
                    return !0;
                },
                parent: function(e) {
                    return !b.pseudos.empty(e);
                },
                header: function(e) {
                    return J.test(e.nodeName);
                },
                input: function(e) {
                    return Q.test(e.nodeName);
                },
                button: function(e) {
                    var t = e.nodeName.toLowerCase();
                    return "input" === t && "button" === e.type || "button" === t;
                },
                text: function(e) {
                    var t;
                    return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || "text" === t.toLowerCase());
                },
                first: ve(function() {
                    return [ 0 ];
                }),
                last: ve(function(e, t) {
                    return [ t - 1 ];
                }),
                eq: ve(function(e, t, n) {
                    return [ n < 0 ? n + t : n ];
                }),
                even: ve(function(e, t) {
                    for (var n = 0; n < t; n += 2) e.push(n);
                    return e;
                }),
                odd: ve(function(e, t) {
                    for (var n = 1; n < t; n += 2) e.push(n);
                    return e;
                }),
                lt: ve(function(e, t, n) {
                    for (var r = n < 0 ? n + t : t < n ? t : n; 0 <= --r; ) e.push(r);
                    return e;
                }),
                gt: ve(function(e, t, n) {
                    for (var r = n < 0 ? n + t : n; ++r < t; ) e.push(r);
                    return e;
                })
            }
        }).pseudos.nth = b.pseudos.eq, {
            radio: !0,
            checkbox: !0,
            file: !0,
            password: !0,
            image: !0
        }) b.pseudos[e] = de(e);
        for (e in {
            submit: !0,
            reset: !0
        }) b.pseudos[e] = he(e);
        function me() {}
        function xe(e) {
            for (var t = 0, n = e.length, r = ""; t < n; t++) r += e[t].value;
            return r;
        }
        function be(s, e, t) {
            var u = e.dir, l = e.next, c = l || u, f = t && "parentNode" === c, p = r++;
            return e.first ? function(e, t, n) {
                while (e = e[u]) if (1 === e.nodeType || f) return s(e, t, n);
                return !1;
            } : function(e, t, n) {
                var r, i, o, a = [ k, p ];
                if (n) {
                    while (e = e[u]) if ((1 === e.nodeType || f) && s(e, t, n)) return !0;
                } else while (e = e[u]) if (1 === e.nodeType || f) if (i = (o = e[S] || (e[S] = {}))[e.uniqueID] || (o[e.uniqueID] = {}), 
                l && l === e.nodeName.toLowerCase()) e = e[u] || e; else {
                    if ((r = i[c]) && r[0] === k && r[1] === p) return a[2] = r[2];
                    if ((i[c] = a)[2] = s(e, t, n)) return !0;
                }
                return !1;
            };
        }
        function we(i) {
            return 1 < i.length ? function(e, t, n) {
                var r = i.length;
                while (r--) if (!i[r](e, t, n)) return !1;
                return !0;
            } : i[0];
        }
        function Te(e, t, n, r, i) {
            for (var o, a = [], s = 0, u = e.length, l = null != t; s < u; s++) (o = e[s]) && (n && !n(o, r, i) || (a.push(o), 
            l && t.push(s)));
            return a;
        }
        function Ce(d, h, g, v, y, e) {
            return v && !v[S] && (v = Ce(v)), y && !y[S] && (y = Ce(y, e)), le(function(e, t, n, r) {
                var i, o, a, s = [], u = [], l = t.length, c = e || function(e, t, n) {
                    for (var r = 0, i = t.length; r < i; r++) se(e, t[r], n);
                    return n;
                }(h || "*", n.nodeType ? [ n ] : n, []), f = !d || !e && h ? c : Te(c, s, d, n, r), p = g ? y || (e ? d : l || v) ? [] : t : f;
                if (g && g(f, p, n, r), v) {
                    i = Te(p, u), v(i, [], n, r), o = i.length;
                    while (o--) (a = i[o]) && (p[u[o]] = !(f[u[o]] = a));
                }
                if (e) {
                    if (y || d) {
                        if (y) {
                            i = [], o = p.length;
                            while (o--) (a = p[o]) && i.push(f[o] = a);
                            y(null, p = [], i, r);
                        }
                        o = p.length;
                        while (o--) (a = p[o]) && -1 < (i = y ? P(e, a) : s[o]) && (e[i] = !(t[i] = a));
                    }
                } else p = Te(p === t ? p.splice(l, p.length) : p), y ? y(null, t, p, r) : H.apply(t, p);
            });
        }
        function Ee(e) {
            for (var i, t, n, r = e.length, o = b.relative[e[0].type], a = o || b.relative[" "], s = o ? 1 : 0, u = be(function(e) {
                return e === i;
            }, a, !0), l = be(function(e) {
                return -1 < P(i, e);
            }, a, !0), c = [ function(e, t, n) {
                var r = !o && (n || t !== w) || ((i = t).nodeType ? u(e, t, n) : l(e, t, n));
                return i = null, r;
            } ]; s < r; s++) if (t = b.relative[e[s].type]) c = [ be(we(c), t) ]; else {
                if ((t = b.filter[e[s].type].apply(null, e[s].matches))[S]) {
                    for (n = ++s; n < r; n++) if (b.relative[e[n].type]) break;
                    return Ce(1 < s && we(c), 1 < s && xe(e.slice(0, s - 1).concat({
                        value: " " === e[s - 2].type ? "*" : ""
                    })).replace($, "$1"), t, s < n && Ee(e.slice(s, n)), n < r && Ee(e = e.slice(n)), n < r && xe(e));
                }
                c.push(t);
            }
            return we(c);
        }
        return me.prototype = b.filters = b.pseudos, b.setFilters = new me(), h = se.tokenize = function(e, t) {
            var n, r, i, o, a, s, u, l = x[e + " "];
            if (l) return t ? 0 : l.slice(0);
            a = e, s = [], u = b.preFilter;
            while (a) {
                for (o in n && !(r = _.exec(a)) || (r && (a = a.slice(r[0].length) || a), s.push(i = [])), 
                n = !1, (r = z.exec(a)) && (n = r.shift(), i.push({
                    value: n,
                    type: r[0].replace($, " ")
                }), a = a.slice(n.length)), b.filter) !(r = G[o].exec(a)) || u[o] && !(r = u[o](r)) || (n = r.shift(), 
                i.push({
                    value: n,
                    type: o,
                    matches: r
                }), a = a.slice(n.length));
                if (!n) break;
            }
            return t ? a.length : a ? se.error(e) : x(e, s).slice(0);
        }, f = se.compile = function(e, t) {
            var n, v, y, m, x, r, i = [], o = [], a = A[e + " "];
            if (!a) {
                t || (t = h(e)), n = t.length;
                while (n--) (a = Ee(t[n]))[S] ? i.push(a) : o.push(a);
                (a = A(e, (v = o, m = 0 < (y = i).length, x = 0 < v.length, r = function(e, t, n, r, i) {
                    var o, a, s, u = 0, l = "0", c = e && [], f = [], p = w, d = e || x && b.find.TAG("*", i), h = k += null == p ? 1 : Math.random() || .1, g = d.length;
                    for (i && (w = t == C || t || i); l !== g && null != (o = d[l]); l++) {
                        if (x && o) {
                            a = 0, t || o.ownerDocument == C || (T(o), n = !E);
                            while (s = v[a++]) if (s(o, t || C, n)) {
                                r.push(o);
                                break;
                            }
                            i && (k = h);
                        }
                        m && ((o = !s && o) && u--, e && c.push(o));
                    }
                    if (u += l, m && l !== u) {
                        a = 0;
                        while (s = y[a++]) s(c, f, t, n);
                        if (e) {
                            if (0 < u) while (l--) c[l] || f[l] || (f[l] = q.call(r));
                            f = Te(f);
                        }
                        H.apply(r, f), i && !e && 0 < f.length && 1 < u + y.length && se.uniqueSort(r);
                    }
                    return i && (k = h, w = p), c;
                }, m ? le(r) : r))).selector = e;
            }
            return a;
        }, g = se.select = function(e, t, n, r) {
            var i, o, a, s, u, l = "function" == typeof e && e, c = !r && h(e = l.selector || e);
            if (n = n || [], 1 === c.length) {
                if (2 < (o = c[0] = c[0].slice(0)).length && "ID" === (a = o[0]).type && 9 === t.nodeType && E && b.relative[o[1].type]) {
                    if (!(t = (b.find.ID(a.matches[0].replace(te, ne), t) || [])[0])) return n;
                    l && (t = t.parentNode), e = e.slice(o.shift().value.length);
                }
                i = G.needsContext.test(e) ? 0 : o.length;
                while (i--) {
                    if (a = o[i], b.relative[s = a.type]) break;
                    if ((u = b.find[s]) && (r = u(a.matches[0].replace(te, ne), ee.test(o[0].type) && ye(t.parentNode) || t))) {
                        if (o.splice(i, 1), !(e = r.length && xe(o))) return H.apply(n, r), n;
                        break;
                    }
                }
            }
            return (l || f(e, c))(r, t, !E, n, !t || ee.test(e) && ye(t.parentNode) || t), n;
        }, d.sortStable = S.split("").sort(D).join("") === S, d.detectDuplicates = !!l, 
        T(), d.sortDetached = ce(function(e) {
            return 1 & e.compareDocumentPosition(C.createElement("fieldset"));
        }), ce(function(e) {
            return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href");
        }) || fe("type|href|height|width", function(e, t, n) {
            if (!n) return e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2);
        }), d.attributes && ce(function(e) {
            return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value");
        }) || fe("value", function(e, t, n) {
            if (!n && "input" === e.nodeName.toLowerCase()) return e.defaultValue;
        }), ce(function(e) {
            return null == e.getAttribute("disabled");
        }) || fe(R, function(e, t, n) {
            var r;
            if (!n) return !0 === e[t] ? t.toLowerCase() : (r = e.getAttributeNode(t)) && r.specified ? r.value : null;
        }), se;
    }(C);
    S.find = d, S.expr = d.selectors, S.expr[":"] = S.expr.pseudos, S.uniqueSort = S.unique = d.uniqueSort, 
    S.text = d.getText, S.isXMLDoc = d.isXML, S.contains = d.contains, S.escapeSelector = d.escape;
    var h = function(e, t, n) {
        var r = [], i = void 0 !== n;
        while ((e = e[t]) && 9 !== e.nodeType) if (1 === e.nodeType) {
            if (i && S(e).is(n)) break;
            r.push(e);
        }
        return r;
    }, T = function(e, t) {
        for (var n = []; e; e = e.nextSibling) 1 === e.nodeType && e !== t && n.push(e);
        return n;
    }, k = S.expr.match.needsContext;
    function A(e, t) {
        return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();
    }
    var N = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;
    function D(e, n, r) {
        return m(n) ? S.grep(e, function(e, t) {
            return !!n.call(e, t, e) !== r;
        }) : n.nodeType ? S.grep(e, function(e) {
            return e === n !== r;
        }) : "string" != typeof n ? S.grep(e, function(e) {
            return -1 < i.call(n, e) !== r;
        }) : S.filter(n, e, r);
    }
    S.filter = function(e, t, n) {
        var r = t[0];
        return n && (e = ":not(" + e + ")"), 1 === t.length && 1 === r.nodeType ? S.find.matchesSelector(r, e) ? [ r ] : [] : S.find.matches(e, S.grep(t, function(e) {
            return 1 === e.nodeType;
        }));
    }, S.fn.extend({
        find: function(e) {
            var t, n, r = this.length, i = this;
            if ("string" != typeof e) return this.pushStack(S(e).filter(function() {
                for (t = 0; t < r; t++) if (S.contains(i[t], this)) return !0;
            }));
            for (n = this.pushStack([]), t = 0; t < r; t++) S.find(e, i[t], n);
            return 1 < r ? S.uniqueSort(n) : n;
        },
        filter: function(e) {
            return this.pushStack(D(this, e || [], !1));
        },
        not: function(e) {
            return this.pushStack(D(this, e || [], !0));
        },
        is: function(e) {
            return !!D(this, "string" == typeof e && k.test(e) ? S(e) : e || [], !1).length;
        }
    });
    var j, q = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
    (S.fn.init = function(e, t, n) {
        var r, i;
        if (!e) return this;
        if (n = n || j, "string" == typeof e) {
            if (!(r = "<" === e[0] && ">" === e[e.length - 1] && 3 <= e.length ? [ null, e, null ] : q.exec(e)) || !r[1] && t) return !t || t.jquery ? (t || n).find(e) : this.constructor(t).find(e);
            if (r[1]) {
                if (t = t instanceof S ? t[0] : t, S.merge(this, S.parseHTML(r[1], t && t.nodeType ? t.ownerDocument || t : E, !0)), 
                N.test(r[1]) && S.isPlainObject(t)) for (r in t) m(this[r]) ? this[r](t[r]) : this.attr(r, t[r]);
                return this;
            }
            return (i = E.getElementById(r[2])) && (this[0] = i, this.length = 1), this;
        }
        return e.nodeType ? (this[0] = e, this.length = 1, this) : m(e) ? void 0 !== n.ready ? n.ready(e) : e(S) : S.makeArray(e, this);
    }).prototype = S.fn, j = S(E);
    var L = /^(?:parents|prev(?:Until|All))/, H = {
        children: !0,
        contents: !0,
        next: !0,
        prev: !0
    };
    function O(e, t) {
        while ((e = e[t]) && 1 !== e.nodeType) ;
        return e;
    }
    S.fn.extend({
        has: function(e) {
            var t = S(e, this), n = t.length;
            return this.filter(function() {
                for (var e = 0; e < n; e++) if (S.contains(this, t[e])) return !0;
            });
        },
        closest: function(e, t) {
            var n, r = 0, i = this.length, o = [], a = "string" != typeof e && S(e);
            if (!k.test(e)) for (;r < i; r++) for (n = this[r]; n && n !== t; n = n.parentNode) if (n.nodeType < 11 && (a ? -1 < a.index(n) : 1 === n.nodeType && S.find.matchesSelector(n, e))) {
                o.push(n);
                break;
            }
            return this.pushStack(1 < o.length ? S.uniqueSort(o) : o);
        },
        index: function(e) {
            return e ? "string" == typeof e ? i.call(S(e), this[0]) : i.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
        },
        add: function(e, t) {
            return this.pushStack(S.uniqueSort(S.merge(this.get(), S(e, t))));
        },
        addBack: function(e) {
            return this.add(null == e ? this.prevObject : this.prevObject.filter(e));
        }
    }), S.each({
        parent: function(e) {
            var t = e.parentNode;
            return t && 11 !== t.nodeType ? t : null;
        },
        parents: function(e) {
            return h(e, "parentNode");
        },
        parentsUntil: function(e, t, n) {
            return h(e, "parentNode", n);
        },
        next: function(e) {
            return O(e, "nextSibling");
        },
        prev: function(e) {
            return O(e, "previousSibling");
        },
        nextAll: function(e) {
            return h(e, "nextSibling");
        },
        prevAll: function(e) {
            return h(e, "previousSibling");
        },
        nextUntil: function(e, t, n) {
            return h(e, "nextSibling", n);
        },
        prevUntil: function(e, t, n) {
            return h(e, "previousSibling", n);
        },
        siblings: function(e) {
            return T((e.parentNode || {}).firstChild, e);
        },
        children: function(e) {
            return T(e.firstChild);
        },
        contents: function(e) {
            return null != e.contentDocument && r(e.contentDocument) ? e.contentDocument : (A(e, "template") && (e = e.content || e), 
            S.merge([], e.childNodes));
        }
    }, function(r, i) {
        S.fn[r] = function(e, t) {
            var n = S.map(this, i, e);
            return "Until" !== r.slice(-5) && (t = e), t && "string" == typeof t && (n = S.filter(t, n)), 
            1 < this.length && (H[r] || S.uniqueSort(n), L.test(r) && n.reverse()), this.pushStack(n);
        };
    });
    var P = /[^\x20\t\r\n\f]+/g;
    function R(e) {
        return e;
    }
    function M(e) {
        throw e;
    }
    function I(e, t, n, r) {
        var i;
        try {
            e && m(i = e.promise) ? i.call(e).done(t).fail(n) : e && m(i = e.then) ? i.call(e, t, n) : t.apply(void 0, [ e ].slice(r));
        } catch (e) {
            n.apply(void 0, [ e ]);
        }
    }
    S.Callbacks = function(r) {
        var e, n;
        r = "string" == typeof r ? (e = r, n = {}, S.each(e.match(P) || [], function(e, t) {
            n[t] = !0;
        }), n) : S.extend({}, r);
        var i, t, o, a, s = [], u = [], l = -1, c = function() {
            for (a = a || r.once, o = i = !0; u.length; l = -1) {
                t = u.shift();
                while (++l < s.length) !1 === s[l].apply(t[0], t[1]) && r.stopOnFalse && (l = s.length, 
                t = !1);
            }
            r.memory || (t = !1), i = !1, a && (s = t ? [] : "");
        }, f = {
            add: function() {
                return s && (t && !i && (l = s.length - 1, u.push(t)), function n(e) {
                    S.each(e, function(e, t) {
                        m(t) ? r.unique && f.has(t) || s.push(t) : t && t.length && "string" !== w(t) && n(t);
                    });
                }(arguments), t && !i && c()), this;
            },
            remove: function() {
                return S.each(arguments, function(e, t) {
                    var n;
                    while (-1 < (n = S.inArray(t, s, n))) s.splice(n, 1), n <= l && l--;
                }), this;
            },
            has: function(e) {
                return e ? -1 < S.inArray(e, s) : 0 < s.length;
            },
            empty: function() {
                return s && (s = []), this;
            },
            disable: function() {
                return a = u = [], s = t = "", this;
            },
            disabled: function() {
                return !s;
            },
            lock: function() {
                return a = u = [], t || i || (s = t = ""), this;
            },
            locked: function() {
                return !!a;
            },
            fireWith: function(e, t) {
                return a || (t = [ e, (t = t || []).slice ? t.slice() : t ], u.push(t), i || c()), 
                this;
            },
            fire: function() {
                return f.fireWith(this, arguments), this;
            },
            fired: function() {
                return !!o;
            }
        };
        return f;
    }, S.extend({
        Deferred: function(e) {
            var o = [ [ "notify", "progress", S.Callbacks("memory"), S.Callbacks("memory"), 2 ], [ "resolve", "done", S.Callbacks("once memory"), S.Callbacks("once memory"), 0, "resolved" ], [ "reject", "fail", S.Callbacks("once memory"), S.Callbacks("once memory"), 1, "rejected" ] ], i = "pending", a = {
                state: function() {
                    return i;
                },
                always: function() {
                    return s.done(arguments).fail(arguments), this;
                },
                catch: function(e) {
                    return a.then(null, e);
                },
                pipe: function() {
                    var i = arguments;
                    return S.Deferred(function(r) {
                        S.each(o, function(e, t) {
                            var n = m(i[t[4]]) && i[t[4]];
                            s[t[1]](function() {
                                var e = n && n.apply(this, arguments);
                                e && m(e.promise) ? e.promise().progress(r.notify).done(r.resolve).fail(r.reject) : r[t[0] + "With"](this, n ? [ e ] : arguments);
                            });
                        }), i = null;
                    }).promise();
                },
                then: function(t, n, r) {
                    var u = 0;
                    function l(i, o, a, s) {
                        return function() {
                            var n = this, r = arguments, e = function() {
                                var e, t;
                                if (!(i < u)) {
                                    if ((e = a.apply(n, r)) === o.promise()) throw new TypeError("Thenable self-resolution");
                                    t = e && ("object" == typeof e || "function" == typeof e) && e.then, m(t) ? s ? t.call(e, l(u, o, R, s), l(u, o, M, s)) : (u++, 
                                    t.call(e, l(u, o, R, s), l(u, o, M, s), l(u, o, R, o.notifyWith))) : (a !== R && (n = void 0, 
                                    r = [ e ]), (s || o.resolveWith)(n, r));
                                }
                            }, t = s ? e : function() {
                                try {
                                    e();
                                } catch (e) {
                                    S.Deferred.exceptionHook && S.Deferred.exceptionHook(e, t.stackTrace), u <= i + 1 && (a !== M && (n = void 0, 
                                    r = [ e ]), o.rejectWith(n, r));
                                }
                            };
                            i ? t() : (S.Deferred.getStackHook && (t.stackTrace = S.Deferred.getStackHook()), 
                            C.setTimeout(t));
                        };
                    }
                    return S.Deferred(function(e) {
                        o[0][3].add(l(0, e, m(r) ? r : R, e.notifyWith)), o[1][3].add(l(0, e, m(t) ? t : R)), 
                        o[2][3].add(l(0, e, m(n) ? n : M));
                    }).promise();
                },
                promise: function(e) {
                    return null != e ? S.extend(e, a) : a;
                }
            }, s = {};
            return S.each(o, function(e, t) {
                var n = t[2], r = t[5];
                a[t[1]] = n.add, r && n.add(function() {
                    i = r;
                }, o[3 - e][2].disable, o[3 - e][3].disable, o[0][2].lock, o[0][3].lock), n.add(t[3].fire), 
                s[t[0]] = function() {
                    return s[t[0] + "With"](this === s ? void 0 : this, arguments), this;
                }, s[t[0] + "With"] = n.fireWith;
            }), a.promise(s), e && e.call(s, s), s;
        },
        when: function(e) {
            var n = arguments.length, t = n, r = Array(t), i = s.call(arguments), o = S.Deferred(), a = function(t) {
                return function(e) {
                    r[t] = this, i[t] = 1 < arguments.length ? s.call(arguments) : e, --n || o.resolveWith(r, i);
                };
            };
            if (n <= 1 && (I(e, o.done(a(t)).resolve, o.reject, !n), "pending" === o.state() || m(i[t] && i[t].then))) return o.then();
            while (t--) I(i[t], a(t), o.reject);
            return o.promise();
        }
    });
    var W = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
    S.Deferred.exceptionHook = function(e, t) {
        C.console && C.console.warn && e && W.test(e.name) && C.console.warn("jQuery.Deferred exception: " + e.message, e.stack, t);
    }, S.readyException = function(e) {
        C.setTimeout(function() {
            throw e;
        });
    };
    var F = S.Deferred();
    function B() {
        E.removeEventListener("DOMContentLoaded", B), C.removeEventListener("load", B), 
        S.ready();
    }
    S.fn.ready = function(e) {
        return F.then(e)["catch"](function(e) {
            S.readyException(e);
        }), this;
    }, S.extend({
        isReady: !1,
        readyWait: 1,
        ready: function(e) {
            (!0 === e ? --S.readyWait : S.isReady) || (S.isReady = !0) !== e && 0 < --S.readyWait || F.resolveWith(E, [ S ]);
        }
    }), S.ready.then = F.then, "complete" === E.readyState || "loading" !== E.readyState && !E.documentElement.doScroll ? C.setTimeout(S.ready) : (E.addEventListener("DOMContentLoaded", B), 
    C.addEventListener("load", B));
    var $ = function(e, t, n, r, i, o, a) {
        var s = 0, u = e.length, l = null == n;
        if ("object" === w(n)) for (s in i = !0, n) $(e, t, s, n[s], !0, o, a); else if (void 0 !== r && (i = !0, 
        m(r) || (a = !0), l && (a ? (t.call(e, r), t = null) : (l = t, t = function(e, t, n) {
            return l.call(S(e), n);
        })), t)) for (;s < u; s++) t(e[s], n, a ? r : r.call(e[s], s, t(e[s], n)));
        return i ? e : l ? t.call(e) : u ? t(e[0], n) : o;
    }, _ = /^-ms-/, z = /-([a-z])/g;
    function U(e, t) {
        return t.toUpperCase();
    }
    function X(e) {
        return e.replace(_, "ms-").replace(z, U);
    }
    var V = function(e) {
        return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType;
    };
    function G() {
        this.expando = S.expando + G.uid++;
    }
    G.uid = 1, G.prototype = {
        cache: function(e) {
            var t = e[this.expando];
            return t || (t = {}, V(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, {
                value: t,
                configurable: !0
            }))), t;
        },
        set: function(e, t, n) {
            var r, i = this.cache(e);
            if ("string" == typeof t) i[X(t)] = n; else for (r in t) i[X(r)] = t[r];
            return i;
        },
        get: function(e, t) {
            return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][X(t)];
        },
        access: function(e, t, n) {
            return void 0 === t || t && "string" == typeof t && void 0 === n ? this.get(e, t) : (this.set(e, t, n), 
            void 0 !== n ? n : t);
        },
        remove: function(e, t) {
            var n, r = e[this.expando];
            if (void 0 !== r) {
                if (void 0 !== t) {
                    n = (t = Array.isArray(t) ? t.map(X) : (t = X(t)) in r ? [ t ] : t.match(P) || []).length;
                    while (n--) delete r[t[n]];
                }
                (void 0 === t || S.isEmptyObject(r)) && (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando]);
            }
        },
        hasData: function(e) {
            var t = e[this.expando];
            return void 0 !== t && !S.isEmptyObject(t);
        }
    };
    var Y = new G(), Q = new G(), J = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, K = /[A-Z]/g;
    function Z(e, t, n) {
        var r, i;
        if (void 0 === n && 1 === e.nodeType) if (r = "data-" + t.replace(K, "-$&").toLowerCase(), 
        "string" == typeof (n = e.getAttribute(r))) {
            try {
                n = "true" === (i = n) || "false" !== i && ("null" === i ? null : i === +i + "" ? +i : J.test(i) ? JSON.parse(i) : i);
            } catch (e) {}
            Q.set(e, t, n);
        } else n = void 0;
        return n;
    }
    S.extend({
        hasData: function(e) {
            return Q.hasData(e) || Y.hasData(e);
        },
        data: function(e, t, n) {
            return Q.access(e, t, n);
        },
        removeData: function(e, t) {
            Q.remove(e, t);
        },
        _data: function(e, t, n) {
            return Y.access(e, t, n);
        },
        _removeData: function(e, t) {
            Y.remove(e, t);
        }
    }), S.fn.extend({
        data: function(n, e) {
            var t, r, i, o = this[0], a = o && o.attributes;
            if (void 0 === n) {
                if (this.length && (i = Q.get(o), 1 === o.nodeType && !Y.get(o, "hasDataAttrs"))) {
                    t = a.length;
                    while (t--) a[t] && 0 === (r = a[t].name).indexOf("data-") && (r = X(r.slice(5)), 
                    Z(o, r, i[r]));
                    Y.set(o, "hasDataAttrs", !0);
                }
                return i;
            }
            return "object" == typeof n ? this.each(function() {
                Q.set(this, n);
            }) : $(this, function(e) {
                var t;
                if (o && void 0 === e) return void 0 !== (t = Q.get(o, n)) ? t : void 0 !== (t = Z(o, n)) ? t : void 0;
                this.each(function() {
                    Q.set(this, n, e);
                });
            }, null, e, 1 < arguments.length, null, !0);
        },
        removeData: function(e) {
            return this.each(function() {
                Q.remove(this, e);
            });
        }
    }), S.extend({
        queue: function(e, t, n) {
            var r;
            if (e) return t = (t || "fx") + "queue", r = Y.get(e, t), n && (!r || Array.isArray(n) ? r = Y.access(e, t, S.makeArray(n)) : r.push(n)), 
            r || [];
        },
        dequeue: function(e, t) {
            t = t || "fx";
            var n = S.queue(e, t), r = n.length, i = n.shift(), o = S._queueHooks(e, t);
            "inprogress" === i && (i = n.shift(), r--), i && ("fx" === t && n.unshift("inprogress"), 
            delete o.stop, i.call(e, function() {
                S.dequeue(e, t);
            }, o)), !r && o && o.empty.fire();
        },
        _queueHooks: function(e, t) {
            var n = t + "queueHooks";
            return Y.get(e, n) || Y.access(e, n, {
                empty: S.Callbacks("once memory").add(function() {
                    Y.remove(e, [ t + "queue", n ]);
                })
            });
        }
    }), S.fn.extend({
        queue: function(t, n) {
            var e = 2;
            return "string" != typeof t && (n = t, t = "fx", e--), arguments.length < e ? S.queue(this[0], t) : void 0 === n ? this : this.each(function() {
                var e = S.queue(this, t, n);
                S._queueHooks(this, t), "fx" === t && "inprogress" !== e[0] && S.dequeue(this, t);
            });
        },
        dequeue: function(e) {
            return this.each(function() {
                S.dequeue(this, e);
            });
        },
        clearQueue: function(e) {
            return this.queue(e || "fx", []);
        },
        promise: function(e, t) {
            var n, r = 1, i = S.Deferred(), o = this, a = this.length, s = function() {
                --r || i.resolveWith(o, [ o ]);
            };
            "string" != typeof e && (t = e, e = void 0), e = e || "fx";
            while (a--) (n = Y.get(o[a], e + "queueHooks")) && n.empty && (r++, n.empty.add(s));
            return s(), i.promise(t);
        }
    });
    var ee = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, te = new RegExp("^(?:([+-])=|)(" + ee + ")([a-z%]*)$", "i"), ne = [ "Top", "Right", "Bottom", "Left" ], re = E.documentElement, ie = function(e) {
        return S.contains(e.ownerDocument, e);
    }, oe = {
        composed: !0
    };
    re.getRootNode && (ie = function(e) {
        return S.contains(e.ownerDocument, e) || e.getRootNode(oe) === e.ownerDocument;
    });
    var ae = function(e, t) {
        return "none" === (e = t || e).style.display || "" === e.style.display && ie(e) && "none" === S.css(e, "display");
    };
    function se(e, t, n, r) {
        var i, o, a = 20, s = r ? function() {
            return r.cur();
        } : function() {
            return S.css(e, t, "");
        }, u = s(), l = n && n[3] || (S.cssNumber[t] ? "" : "px"), c = e.nodeType && (S.cssNumber[t] || "px" !== l && +u) && te.exec(S.css(e, t));
        if (c && c[3] !== l) {
            u /= 2, l = l || c[3], c = +u || 1;
            while (a--) S.style(e, t, c + l), (1 - o) * (1 - (o = s() / u || .5)) <= 0 && (a = 0), 
            c /= o;
            c *= 2, S.style(e, t, c + l), n = n || [];
        }
        return n && (c = +c || +u || 0, i = n[1] ? c + (n[1] + 1) * n[2] : +n[2], r && (r.unit = l, 
        r.start = c, r.end = i)), i;
    }
    var ue = {};
    function le(e, t) {
        for (var n, r, i, o, a, s, u, l = [], c = 0, f = e.length; c < f; c++) (r = e[c]).style && (n = r.style.display, 
        t ? ("none" === n && (l[c] = Y.get(r, "display") || null, l[c] || (r.style.display = "")), 
        "" === r.style.display && ae(r) && (l[c] = (u = a = o = void 0, a = (i = r).ownerDocument, 
        s = i.nodeName, (u = ue[s]) || (o = a.body.appendChild(a.createElement(s)), u = S.css(o, "display"), 
        o.parentNode.removeChild(o), "none" === u && (u = "block"), ue[s] = u)))) : "none" !== n && (l[c] = "none", 
        Y.set(r, "display", n)));
        for (c = 0; c < f; c++) null != l[c] && (e[c].style.display = l[c]);
        return e;
    }
    S.fn.extend({
        show: function() {
            return le(this, !0);
        },
        hide: function() {
            return le(this);
        },
        toggle: function(e) {
            return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function() {
                ae(this) ? S(this).show() : S(this).hide();
            });
        }
    });
    var ce, fe, pe = /^(?:checkbox|radio)$/i, de = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i, he = /^$|^module$|\/(?:java|ecma)script/i;
    ce = E.createDocumentFragment().appendChild(E.createElement("div")), (fe = E.createElement("input")).setAttribute("type", "radio"), 
    fe.setAttribute("checked", "checked"), fe.setAttribute("name", "t"), ce.appendChild(fe), 
    y.checkClone = ce.cloneNode(!0).cloneNode(!0).lastChild.checked, ce.innerHTML = "<textarea>x</textarea>", 
    y.noCloneChecked = !!ce.cloneNode(!0).lastChild.defaultValue, ce.innerHTML = "<option></option>", 
    y.option = !!ce.lastChild;
    var ge = {
        thead: [ 1, "<table>", "</table>" ],
        col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
        tr: [ 2, "<table><tbody>", "</tbody></table>" ],
        td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
        _default: [ 0, "", "" ]
    };
    function ve(e, t) {
        var n;
        return n = "undefined" != typeof e.getElementsByTagName ? e.getElementsByTagName(t || "*") : "undefined" != typeof e.querySelectorAll ? e.querySelectorAll(t || "*") : [], 
        void 0 === t || t && A(e, t) ? S.merge([ e ], n) : n;
    }
    function ye(e, t) {
        for (var n = 0, r = e.length; n < r; n++) Y.set(e[n], "globalEval", !t || Y.get(t[n], "globalEval"));
    }
    ge.tbody = ge.tfoot = ge.colgroup = ge.caption = ge.thead, ge.th = ge.td, y.option || (ge.optgroup = ge.option = [ 1, "<select multiple='multiple'>", "</select>" ]);
    var me = /<|&#?\w+;/;
    function xe(e, t, n, r, i) {
        for (var o, a, s, u, l, c, f = t.createDocumentFragment(), p = [], d = 0, h = e.length; d < h; d++) if ((o = e[d]) || 0 === o) if ("object" === w(o)) S.merge(p, o.nodeType ? [ o ] : o); else if (me.test(o)) {
            a = a || f.appendChild(t.createElement("div")), s = (de.exec(o) || [ "", "" ])[1].toLowerCase(), 
            u = ge[s] || ge._default, a.innerHTML = u[1] + S.htmlPrefilter(o) + u[2], c = u[0];
            while (c--) a = a.lastChild;
            S.merge(p, a.childNodes), (a = f.firstChild).textContent = "";
        } else p.push(t.createTextNode(o));
        f.textContent = "", d = 0;
        while (o = p[d++]) if (r && -1 < S.inArray(o, r)) i && i.push(o); else if (l = ie(o), 
        a = ve(f.appendChild(o), "script"), l && ye(a), n) {
            c = 0;
            while (o = a[c++]) he.test(o.type || "") && n.push(o);
        }
        return f;
    }
    var be = /^key/, we = /^(?:mouse|pointer|contextmenu|drag|drop)|click/, Te = /^([^.]*)(?:\.(.+)|)/;
    function Ce() {
        return !0;
    }
    function Ee() {
        return !1;
    }
    function Se(e, t) {
        return e === function() {
            try {
                return E.activeElement;
            } catch (e) {}
        }() == ("focus" === t);
    }
    function ke(e, t, n, r, i, o) {
        var a, s;
        if ("object" == typeof t) {
            for (s in "string" != typeof n && (r = r || n, n = void 0), t) ke(e, s, n, r, t[s], o);
            return e;
        }
        if (null == r && null == i ? (i = n, r = n = void 0) : null == i && ("string" == typeof n ? (i = r, 
        r = void 0) : (i = r, r = n, n = void 0)), !1 === i) i = Ee; else if (!i) return e;
        return 1 === o && (a = i, (i = function(e) {
            return S().off(e), a.apply(this, arguments);
        }).guid = a.guid || (a.guid = S.guid++)), e.each(function() {
            S.event.add(this, t, i, r, n);
        });
    }
    function Ae(e, i, o) {
        o ? (Y.set(e, i, !1), S.event.add(e, i, {
            namespace: !1,
            handler: function(e) {
                var t, n, r = Y.get(this, i);
                if (1 & e.isTrigger && this[i]) {
                    if (r.length) (S.event.special[i] || {}).delegateType && e.stopPropagation(); else if (r = s.call(arguments), 
                    Y.set(this, i, r), t = o(this, i), this[i](), r !== (n = Y.get(this, i)) || t ? Y.set(this, i, !1) : n = {}, 
                    r !== n) return e.stopImmediatePropagation(), e.preventDefault(), n.value;
                } else r.length && (Y.set(this, i, {
                    value: S.event.trigger(S.extend(r[0], S.Event.prototype), r.slice(1), this)
                }), e.stopImmediatePropagation());
            }
        })) : void 0 === Y.get(e, i) && S.event.add(e, i, Ce);
    }
    S.event = {
        global: {},
        add: function(t, e, n, r, i) {
            var o, a, s, u, l, c, f, p, d, h, g, v = Y.get(t);
            if (V(t)) {
                n.handler && (n = (o = n).handler, i = o.selector), i && S.find.matchesSelector(re, i), 
                n.guid || (n.guid = S.guid++), (u = v.events) || (u = v.events = Object.create(null)), 
                (a = v.handle) || (a = v.handle = function(e) {
                    return "undefined" != typeof S && S.event.triggered !== e.type ? S.event.dispatch.apply(t, arguments) : void 0;
                }), l = (e = (e || "").match(P) || [ "" ]).length;
                while (l--) d = g = (s = Te.exec(e[l]) || [])[1], h = (s[2] || "").split(".").sort(), 
                d && (f = S.event.special[d] || {}, d = (i ? f.delegateType : f.bindType) || d, 
                f = S.event.special[d] || {}, c = S.extend({
                    type: d,
                    origType: g,
                    data: r,
                    handler: n,
                    guid: n.guid,
                    selector: i,
                    needsContext: i && S.expr.match.needsContext.test(i),
                    namespace: h.join(".")
                }, o), (p = u[d]) || ((p = u[d] = []).delegateCount = 0, f.setup && !1 !== f.setup.call(t, r, h, a) || t.addEventListener && t.addEventListener(d, a)), 
                f.add && (f.add.call(t, c), c.handler.guid || (c.handler.guid = n.guid)), i ? p.splice(p.delegateCount++, 0, c) : p.push(c), 
                S.event.global[d] = !0);
            }
        },
        remove: function(e, t, n, r, i) {
            var o, a, s, u, l, c, f, p, d, h, g, v = Y.hasData(e) && Y.get(e);
            if (v && (u = v.events)) {
                l = (t = (t || "").match(P) || [ "" ]).length;
                while (l--) if (d = g = (s = Te.exec(t[l]) || [])[1], h = (s[2] || "").split(".").sort(), 
                d) {
                    f = S.event.special[d] || {}, p = u[d = (r ? f.delegateType : f.bindType) || d] || [], 
                    s = s[2] && new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)"), a = o = p.length;
                    while (o--) c = p[o], !i && g !== c.origType || n && n.guid !== c.guid || s && !s.test(c.namespace) || r && r !== c.selector && ("**" !== r || !c.selector) || (p.splice(o, 1), 
                    c.selector && p.delegateCount--, f.remove && f.remove.call(e, c));
                    a && !p.length && (f.teardown && !1 !== f.teardown.call(e, h, v.handle) || S.removeEvent(e, d, v.handle), 
                    delete u[d]);
                } else for (d in u) S.event.remove(e, d + t[l], n, r, !0);
                S.isEmptyObject(u) && Y.remove(e, "handle events");
            }
        },
        dispatch: function(e) {
            var t, n, r, i, o, a, s = new Array(arguments.length), u = S.event.fix(e), l = (Y.get(this, "events") || Object.create(null))[u.type] || [], c = S.event.special[u.type] || {};
            for (s[0] = u, t = 1; t < arguments.length; t++) s[t] = arguments[t];
            if (u.delegateTarget = this, !c.preDispatch || !1 !== c.preDispatch.call(this, u)) {
                a = S.event.handlers.call(this, u, l), t = 0;
                while ((i = a[t++]) && !u.isPropagationStopped()) {
                    u.currentTarget = i.elem, n = 0;
                    while ((o = i.handlers[n++]) && !u.isImmediatePropagationStopped()) u.rnamespace && !1 !== o.namespace && !u.rnamespace.test(o.namespace) || (u.handleObj = o, 
                    u.data = o.data, void 0 !== (r = ((S.event.special[o.origType] || {}).handle || o.handler).apply(i.elem, s)) && !1 === (u.result = r) && (u.preventDefault(), 
                    u.stopPropagation()));
                }
                return c.postDispatch && c.postDispatch.call(this, u), u.result;
            }
        },
        handlers: function(e, t) {
            var n, r, i, o, a, s = [], u = t.delegateCount, l = e.target;
            if (u && l.nodeType && !("click" === e.type && 1 <= e.button)) for (;l !== this; l = l.parentNode || this) if (1 === l.nodeType && ("click" !== e.type || !0 !== l.disabled)) {
                for (o = [], a = {}, n = 0; n < u; n++) void 0 === a[i = (r = t[n]).selector + " "] && (a[i] = r.needsContext ? -1 < S(i, this).index(l) : S.find(i, this, null, [ l ]).length), 
                a[i] && o.push(r);
                o.length && s.push({
                    elem: l,
                    handlers: o
                });
            }
            return l = this, u < t.length && s.push({
                elem: l,
                handlers: t.slice(u)
            }), s;
        },
        addProp: function(t, e) {
            Object.defineProperty(S.Event.prototype, t, {
                enumerable: !0,
                configurable: !0,
                get: m(e) ? function() {
                    if (this.originalEvent) return e(this.originalEvent);
                } : function() {
                    if (this.originalEvent) return this.originalEvent[t];
                },
                set: function(e) {
                    Object.defineProperty(this, t, {
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                        value: e
                    });
                }
            });
        },
        fix: function(e) {
            return e[S.expando] ? e : new S.Event(e);
        },
        special: {
            load: {
                noBubble: !0
            },
            click: {
                setup: function(e) {
                    var t = this || e;
                    return pe.test(t.type) && t.click && A(t, "input") && Ae(t, "click", Ce), !1;
                },
                trigger: function(e) {
                    var t = this || e;
                    return pe.test(t.type) && t.click && A(t, "input") && Ae(t, "click"), !0;
                },
                _default: function(e) {
                    var t = e.target;
                    return pe.test(t.type) && t.click && A(t, "input") && Y.get(t, "click") || A(t, "a");
                }
            },
            beforeunload: {
                postDispatch: function(e) {
                    void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result);
                }
            }
        }
    }, S.removeEvent = function(e, t, n) {
        e.removeEventListener && e.removeEventListener(t, n);
    }, S.Event = function(e, t) {
        if (!(this instanceof S.Event)) return new S.Event(e, t);
        e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? Ce : Ee, 
        this.target = e.target && 3 === e.target.nodeType ? e.target.parentNode : e.target, 
        this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget) : this.type = e, 
        t && S.extend(this, t), this.timeStamp = e && e.timeStamp || Date.now(), this[S.expando] = !0;
    }, S.Event.prototype = {
        constructor: S.Event,
        isDefaultPrevented: Ee,
        isPropagationStopped: Ee,
        isImmediatePropagationStopped: Ee,
        isSimulated: !1,
        preventDefault: function() {
            var e = this.originalEvent;
            this.isDefaultPrevented = Ce, e && !this.isSimulated && e.preventDefault();
        },
        stopPropagation: function() {
            var e = this.originalEvent;
            this.isPropagationStopped = Ce, e && !this.isSimulated && e.stopPropagation();
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;
            this.isImmediatePropagationStopped = Ce, e && !this.isSimulated && e.stopImmediatePropagation(), 
            this.stopPropagation();
        }
    }, S.each({
        altKey: !0,
        bubbles: !0,
        cancelable: !0,
        changedTouches: !0,
        ctrlKey: !0,
        detail: !0,
        eventPhase: !0,
        metaKey: !0,
        pageX: !0,
        pageY: !0,
        shiftKey: !0,
        view: !0,
        char: !0,
        code: !0,
        charCode: !0,
        key: !0,
        keyCode: !0,
        button: !0,
        buttons: !0,
        clientX: !0,
        clientY: !0,
        offsetX: !0,
        offsetY: !0,
        pointerId: !0,
        pointerType: !0,
        screenX: !0,
        screenY: !0,
        targetTouches: !0,
        toElement: !0,
        touches: !0,
        which: function(e) {
            var t = e.button;
            return null == e.which && be.test(e.type) ? null != e.charCode ? e.charCode : e.keyCode : !e.which && void 0 !== t && we.test(e.type) ? 1 & t ? 1 : 2 & t ? 3 : 4 & t ? 2 : 0 : e.which;
        }
    }, S.event.addProp), S.each({
        focus: "focusin",
        blur: "focusout"
    }, function(e, t) {
        S.event.special[e] = {
            setup: function() {
                return Ae(this, e, Se), !1;
            },
            trigger: function() {
                return Ae(this, e), !0;
            },
            delegateType: t
        };
    }), S.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(e, i) {
        S.event.special[e] = {
            delegateType: i,
            bindType: i,
            handle: function(e) {
                var t, n = e.relatedTarget, r = e.handleObj;
                return n && (n === this || S.contains(this, n)) || (e.type = r.origType, t = r.handler.apply(this, arguments), 
                e.type = i), t;
            }
        };
    }), S.fn.extend({
        on: function(e, t, n, r) {
            return ke(this, e, t, n, r);
        },
        one: function(e, t, n, r) {
            return ke(this, e, t, n, r, 1);
        },
        off: function(e, t, n) {
            var r, i;
            if (e && e.preventDefault && e.handleObj) return r = e.handleObj, S(e.delegateTarget).off(r.namespace ? r.origType + "." + r.namespace : r.origType, r.selector, r.handler), 
            this;
            if ("object" == typeof e) {
                for (i in e) this.off(i, t, e[i]);
                return this;
            }
            return !1 !== t && "function" != typeof t || (n = t, t = void 0), !1 === n && (n = Ee), 
            this.each(function() {
                S.event.remove(this, e, n, t);
            });
        }
    });
    var Ne = /<script|<style|<link/i, De = /checked\s*(?:[^=]|=\s*.checked.)/i, je = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
    function qe(e, t) {
        return A(e, "table") && A(11 !== t.nodeType ? t : t.firstChild, "tr") && S(e).children("tbody")[0] || e;
    }
    function Le(e) {
        return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e;
    }
    function He(e) {
        return "true/" === (e.type || "").slice(0, 5) ? e.type = e.type.slice(5) : e.removeAttribute("type"), 
        e;
    }
    function Oe(e, t) {
        var n, r, i, o, a, s;
        if (1 === t.nodeType) {
            if (Y.hasData(e) && (s = Y.get(e).events)) for (i in Y.remove(t, "handle events"), 
            s) for (n = 0, r = s[i].length; n < r; n++) S.event.add(t, i, s[i][n]);
            Q.hasData(e) && (o = Q.access(e), a = S.extend({}, o), Q.set(t, a));
        }
    }
    function Pe(n, r, i, o) {
        r = g(r);
        var e, t, a, s, u, l, c = 0, f = n.length, p = f - 1, d = r[0], h = m(d);
        if (h || 1 < f && "string" == typeof d && !y.checkClone && De.test(d)) return n.each(function(e) {
            var t = n.eq(e);
            h && (r[0] = d.call(this, e, t.html())), Pe(t, r, i, o);
        });
        if (f && (t = (e = xe(r, n[0].ownerDocument, !1, n, o)).firstChild, 1 === e.childNodes.length && (e = t), 
        t || o)) {
            for (s = (a = S.map(ve(e, "script"), Le)).length; c < f; c++) u = e, c !== p && (u = S.clone(u, !0, !0), 
            s && S.merge(a, ve(u, "script"))), i.call(n[c], u, c);
            if (s) for (l = a[a.length - 1].ownerDocument, S.map(a, He), c = 0; c < s; c++) u = a[c], 
            he.test(u.type || "") && !Y.access(u, "globalEval") && S.contains(l, u) && (u.src && "module" !== (u.type || "").toLowerCase() ? S._evalUrl && !u.noModule && S._evalUrl(u.src, {
                nonce: u.nonce || u.getAttribute("nonce")
            }, l) : b(u.textContent.replace(je, ""), u, l));
        }
        return n;
    }
    function Re(e, t, n) {
        for (var r, i = t ? S.filter(t, e) : e, o = 0; null != (r = i[o]); o++) n || 1 !== r.nodeType || S.cleanData(ve(r)), 
        r.parentNode && (n && ie(r) && ye(ve(r, "script")), r.parentNode.removeChild(r));
        return e;
    }
    S.extend({
        htmlPrefilter: function(e) {
            return e;
        },
        clone: function(e, t, n) {
            var r, i, o, a, s, u, l, c = e.cloneNode(!0), f = ie(e);
            if (!(y.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || S.isXMLDoc(e))) for (a = ve(c), 
            r = 0, i = (o = ve(e)).length; r < i; r++) s = o[r], u = a[r], void 0, "input" === (l = u.nodeName.toLowerCase()) && pe.test(s.type) ? u.checked = s.checked : "input" !== l && "textarea" !== l || (u.defaultValue = s.defaultValue);
            if (t) if (n) for (o = o || ve(e), a = a || ve(c), r = 0, i = o.length; r < i; r++) Oe(o[r], a[r]); else Oe(e, c);
            return 0 < (a = ve(c, "script")).length && ye(a, !f && ve(e, "script")), c;
        },
        cleanData: function(e) {
            for (var t, n, r, i = S.event.special, o = 0; void 0 !== (n = e[o]); o++) if (V(n)) {
                if (t = n[Y.expando]) {
                    if (t.events) for (r in t.events) i[r] ? S.event.remove(n, r) : S.removeEvent(n, r, t.handle);
                    n[Y.expando] = void 0;
                }
                n[Q.expando] && (n[Q.expando] = void 0);
            }
        }
    }), S.fn.extend({
        detach: function(e) {
            return Re(this, e, !0);
        },
        remove: function(e) {
            return Re(this, e);
        },
        text: function(e) {
            return $(this, function(e) {
                return void 0 === e ? S.text(this) : this.empty().each(function() {
                    1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e);
                });
            }, null, e, arguments.length);
        },
        append: function() {
            return Pe(this, arguments, function(e) {
                1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || qe(this, e).appendChild(e);
            });
        },
        prepend: function() {
            return Pe(this, arguments, function(e) {
                if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                    var t = qe(this, e);
                    t.insertBefore(e, t.firstChild);
                }
            });
        },
        before: function() {
            return Pe(this, arguments, function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this);
            });
        },
        after: function() {
            return Pe(this, arguments, function(e) {
                this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);
            });
        },
        empty: function() {
            for (var e, t = 0; null != (e = this[t]); t++) 1 === e.nodeType && (S.cleanData(ve(e, !1)), 
            e.textContent = "");
            return this;
        },
        clone: function(e, t) {
            return e = null != e && e, t = null == t ? e : t, this.map(function() {
                return S.clone(this, e, t);
            });
        },
        html: function(e) {
            return $(this, function(e) {
                var t = this[0] || {}, n = 0, r = this.length;
                if (void 0 === e && 1 === t.nodeType) return t.innerHTML;
                if ("string" == typeof e && !Ne.test(e) && !ge[(de.exec(e) || [ "", "" ])[1].toLowerCase()]) {
                    e = S.htmlPrefilter(e);
                    try {
                        for (;n < r; n++) 1 === (t = this[n] || {}).nodeType && (S.cleanData(ve(t, !1)), 
                        t.innerHTML = e);
                        t = 0;
                    } catch (e) {}
                }
                t && this.empty().append(e);
            }, null, e, arguments.length);
        },
        replaceWith: function() {
            var n = [];
            return Pe(this, arguments, function(e) {
                var t = this.parentNode;
                S.inArray(this, n) < 0 && (S.cleanData(ve(this)), t && t.replaceChild(e, this));
            }, n);
        }
    }), S.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(e, a) {
        S.fn[e] = function(e) {
            for (var t, n = [], r = S(e), i = r.length - 1, o = 0; o <= i; o++) t = o === i ? this : this.clone(!0), 
            S(r[o])[a](t), u.apply(n, t.get());
            return this.pushStack(n);
        };
    });
    var Me = new RegExp("^(" + ee + ")(?!px)[a-z%]+$", "i"), Ie = function(e) {
        var t = e.ownerDocument.defaultView;
        return t && t.opener || (t = C), t.getComputedStyle(e);
    }, We = function(e, t, n) {
        var r, i, o = {};
        for (i in t) o[i] = e.style[i], e.style[i] = t[i];
        for (i in r = n.call(e), t) e.style[i] = o[i];
        return r;
    }, Fe = new RegExp(ne.join("|"), "i");
    function Be(e, t, n) {
        var r, i, o, a, s = e.style;
        return (n = n || Ie(e)) && ("" !== (a = n.getPropertyValue(t) || n[t]) || ie(e) || (a = S.style(e, t)), 
        !y.pixelBoxStyles() && Me.test(a) && Fe.test(t) && (r = s.width, i = s.minWidth, 
        o = s.maxWidth, s.minWidth = s.maxWidth = s.width = a, a = n.width, s.width = r, 
        s.minWidth = i, s.maxWidth = o)), void 0 !== a ? a + "" : a;
    }
    function $e(e, t) {
        return {
            get: function() {
                if (!e()) return (this.get = t).apply(this, arguments);
                delete this.get;
            }
        };
    }
    !function() {
        function e() {
            if (l) {
                u.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0", 
                l.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%", 
                re.appendChild(u).appendChild(l);
                var e = C.getComputedStyle(l);
                n = "1%" !== e.top, s = 12 === t(e.marginLeft), l.style.right = "60%", o = 36 === t(e.right), 
                r = 36 === t(e.width), l.style.position = "absolute", i = 12 === t(l.offsetWidth / 3), 
                re.removeChild(u), l = null;
            }
        }
        function t(e) {
            return Math.round(parseFloat(e));
        }
        var n, r, i, o, a, s, u = E.createElement("div"), l = E.createElement("div");
        l.style && (l.style.backgroundClip = "content-box", l.cloneNode(!0).style.backgroundClip = "", 
        y.clearCloneStyle = "content-box" === l.style.backgroundClip, S.extend(y, {
            boxSizingReliable: function() {
                return e(), r;
            },
            pixelBoxStyles: function() {
                return e(), o;
            },
            pixelPosition: function() {
                return e(), n;
            },
            reliableMarginLeft: function() {
                return e(), s;
            },
            scrollboxSize: function() {
                return e(), i;
            },
            reliableTrDimensions: function() {
                var e, t, n, r;
                return null == a && (e = E.createElement("table"), t = E.createElement("tr"), n = E.createElement("div"), 
                e.style.cssText = "position:absolute;left:-11111px", t.style.height = "1px", n.style.height = "9px", 
                re.appendChild(e).appendChild(t).appendChild(n), r = C.getComputedStyle(t), a = 3 < parseInt(r.height), 
                re.removeChild(e)), a;
            }
        }));
    }();
    var _e = [ "Webkit", "Moz", "ms" ], ze = E.createElement("div").style, Ue = {};
    function Xe(e) {
        var t = S.cssProps[e] || Ue[e];
        return t || (e in ze ? e : Ue[e] = function(e) {
            var t = e[0].toUpperCase() + e.slice(1), n = _e.length;
            while (n--) if ((e = _e[n] + t) in ze) return e;
        }(e) || e);
    }
    var Ve = /^(none|table(?!-c[ea]).+)/, Ge = /^--/, Ye = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, Qe = {
        letterSpacing: "0",
        fontWeight: "400"
    };
    function Je(e, t, n) {
        var r = te.exec(t);
        return r ? Math.max(0, r[2] - (n || 0)) + (r[3] || "px") : t;
    }
    function Ke(e, t, n, r, i, o) {
        var a = "width" === t ? 1 : 0, s = 0, u = 0;
        if (n === (r ? "border" : "content")) return 0;
        for (;a < 4; a += 2) "margin" === n && (u += S.css(e, n + ne[a], !0, i)), r ? ("content" === n && (u -= S.css(e, "padding" + ne[a], !0, i)), 
        "margin" !== n && (u -= S.css(e, "border" + ne[a] + "Width", !0, i))) : (u += S.css(e, "padding" + ne[a], !0, i), 
        "padding" !== n ? u += S.css(e, "border" + ne[a] + "Width", !0, i) : s += S.css(e, "border" + ne[a] + "Width", !0, i));
        return !r && 0 <= o && (u += Math.max(0, Math.ceil(e["offset" + t[0].toUpperCase() + t.slice(1)] - o - u - s - .5)) || 0), 
        u;
    }
    function Ze(e, t, n) {
        var r = Ie(e), i = (!y.boxSizingReliable() || n) && "border-box" === S.css(e, "boxSizing", !1, r), o = i, a = Be(e, t, r), s = "offset" + t[0].toUpperCase() + t.slice(1);
        if (Me.test(a)) {
            if (!n) return a;
            a = "auto";
        }
        return (!y.boxSizingReliable() && i || !y.reliableTrDimensions() && A(e, "tr") || "auto" === a || !parseFloat(a) && "inline" === S.css(e, "display", !1, r)) && e.getClientRects().length && (i = "border-box" === S.css(e, "boxSizing", !1, r), 
        (o = s in e) && (a = e[s])), (a = parseFloat(a) || 0) + Ke(e, t, n || (i ? "border" : "content"), o, r, a) + "px";
    }
    function et(e, t, n, r, i) {
        return new et.prototype.init(e, t, n, r, i);
    }
    S.extend({
        cssHooks: {
            opacity: {
                get: function(e, t) {
                    if (t) {
                        var n = Be(e, "opacity");
                        return "" === n ? "1" : n;
                    }
                }
            }
        },
        cssNumber: {
            animationIterationCount: !0,
            columnCount: !0,
            fillOpacity: !0,
            flexGrow: !0,
            flexShrink: !0,
            fontWeight: !0,
            gridArea: !0,
            gridColumn: !0,
            gridColumnEnd: !0,
            gridColumnStart: !0,
            gridRow: !0,
            gridRowEnd: !0,
            gridRowStart: !0,
            lineHeight: !0,
            opacity: !0,
            order: !0,
            orphans: !0,
            widows: !0,
            zIndex: !0,
            zoom: !0
        },
        cssProps: {},
        style: function(e, t, n, r) {
            if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
                var i, o, a, s = X(t), u = Ge.test(t), l = e.style;
                if (u || (t = Xe(s)), a = S.cssHooks[t] || S.cssHooks[s], void 0 === n) return a && "get" in a && void 0 !== (i = a.get(e, !1, r)) ? i : l[t];
                "string" === (o = typeof n) && (i = te.exec(n)) && i[1] && (n = se(e, t, i), o = "number"), 
                null != n && n == n && ("number" !== o || u || (n += i && i[3] || (S.cssNumber[s] ? "" : "px")), 
                y.clearCloneStyle || "" !== n || 0 !== t.indexOf("background") || (l[t] = "inherit"), 
                a && "set" in a && void 0 === (n = a.set(e, n, r)) || (u ? l.setProperty(t, n) : l[t] = n));
            }
        },
        css: function(e, t, n, r) {
            var i, o, a, s = X(t);
            return Ge.test(t) || (t = Xe(s)), (a = S.cssHooks[t] || S.cssHooks[s]) && "get" in a && (i = a.get(e, !0, n)), 
            void 0 === i && (i = Be(e, t, r)), "normal" === i && t in Qe && (i = Qe[t]), "" === n || n ? (o = parseFloat(i), 
            !0 === n || isFinite(o) ? o || 0 : i) : i;
        }
    }), S.each([ "height", "width" ], function(e, u) {
        S.cssHooks[u] = {
            get: function(e, t, n) {
                if (t) return !Ve.test(S.css(e, "display")) || e.getClientRects().length && e.getBoundingClientRect().width ? Ze(e, u, n) : We(e, Ye, function() {
                    return Ze(e, u, n);
                });
            },
            set: function(e, t, n) {
                var r, i = Ie(e), o = !y.scrollboxSize() && "absolute" === i.position, a = (o || n) && "border-box" === S.css(e, "boxSizing", !1, i), s = n ? Ke(e, u, n, a, i) : 0;
                return a && o && (s -= Math.ceil(e["offset" + u[0].toUpperCase() + u.slice(1)] - parseFloat(i[u]) - Ke(e, u, "border", !1, i) - .5)), 
                s && (r = te.exec(t)) && "px" !== (r[3] || "px") && (e.style[u] = t, t = S.css(e, u)), 
                Je(0, t, s);
            }
        };
    }), S.cssHooks.marginLeft = $e(y.reliableMarginLeft, function(e, t) {
        if (t) return (parseFloat(Be(e, "marginLeft")) || e.getBoundingClientRect().left - We(e, {
            marginLeft: 0
        }, function() {
            return e.getBoundingClientRect().left;
        })) + "px";
    }), S.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(i, o) {
        S.cssHooks[i + o] = {
            expand: function(e) {
                for (var t = 0, n = {}, r = "string" == typeof e ? e.split(" ") : [ e ]; t < 4; t++) n[i + ne[t] + o] = r[t] || r[t - 2] || r[0];
                return n;
            }
        }, "margin" !== i && (S.cssHooks[i + o].set = Je);
    }), S.fn.extend({
        css: function(e, t) {
            return $(this, function(e, t, n) {
                var r, i, o = {}, a = 0;
                if (Array.isArray(t)) {
                    for (r = Ie(e), i = t.length; a < i; a++) o[t[a]] = S.css(e, t[a], !1, r);
                    return o;
                }
                return void 0 !== n ? S.style(e, t, n) : S.css(e, t);
            }, e, t, 1 < arguments.length);
        }
    }), ((S.Tween = et).prototype = {
        constructor: et,
        init: function(e, t, n, r, i, o) {
            this.elem = e, this.prop = n, this.easing = i || S.easing._default, this.options = t, 
            this.start = this.now = this.cur(), this.end = r, this.unit = o || (S.cssNumber[n] ? "" : "px");
        },
        cur: function() {
            var e = et.propHooks[this.prop];
            return e && e.get ? e.get(this) : et.propHooks._default.get(this);
        },
        run: function(e) {
            var t, n = et.propHooks[this.prop];
            return this.options.duration ? this.pos = t = S.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, 
            this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), 
            n && n.set ? n.set(this) : et.propHooks._default.set(this), this;
        }
    }).init.prototype = et.prototype, (et.propHooks = {
        _default: {
            get: function(e) {
                var t;
                return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = S.css(e.elem, e.prop, "")) && "auto" !== t ? t : 0;
            },
            set: function(e) {
                S.fx.step[e.prop] ? S.fx.step[e.prop](e) : 1 !== e.elem.nodeType || !S.cssHooks[e.prop] && null == e.elem.style[Xe(e.prop)] ? e.elem[e.prop] = e.now : S.style(e.elem, e.prop, e.now + e.unit);
            }
        }
    }).scrollTop = et.propHooks.scrollLeft = {
        set: function(e) {
            e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);
        }
    }, S.easing = {
        linear: function(e) {
            return e;
        },
        swing: function(e) {
            return .5 - Math.cos(e * Math.PI) / 2;
        },
        _default: "swing"
    }, S.fx = et.prototype.init, S.fx.step = {};
    var tt, nt, rt, it, ot = /^(?:toggle|show|hide)$/, at = /queueHooks$/;
    function st() {
        nt && (!1 === E.hidden && C.requestAnimationFrame ? C.requestAnimationFrame(st) : C.setTimeout(st, S.fx.interval), 
        S.fx.tick());
    }
    function ut() {
        return C.setTimeout(function() {
            tt = void 0;
        }), tt = Date.now();
    }
    function lt(e, t) {
        var n, r = 0, i = {
            height: e
        };
        for (t = t ? 1 : 0; r < 4; r += 2 - t) i["margin" + (n = ne[r])] = i["padding" + n] = e;
        return t && (i.opacity = i.width = e), i;
    }
    function ct(e, t, n) {
        for (var r, i = (ft.tweeners[t] || []).concat(ft.tweeners["*"]), o = 0, a = i.length; o < a; o++) if (r = i[o].call(n, t, e)) return r;
    }
    function ft(o, e, t) {
        var n, a, r = 0, i = ft.prefilters.length, s = S.Deferred().always(function() {
            delete u.elem;
        }), u = function() {
            if (a) return !1;
            for (var e = tt || ut(), t = Math.max(0, l.startTime + l.duration - e), n = 1 - (t / l.duration || 0), r = 0, i = l.tweens.length; r < i; r++) l.tweens[r].run(n);
            return s.notifyWith(o, [ l, n, t ]), n < 1 && i ? t : (i || s.notifyWith(o, [ l, 1, 0 ]), 
            s.resolveWith(o, [ l ]), !1);
        }, l = s.promise({
            elem: o,
            props: S.extend({}, e),
            opts: S.extend(!0, {
                specialEasing: {},
                easing: S.easing._default
            }, t),
            originalProperties: e,
            originalOptions: t,
            startTime: tt || ut(),
            duration: t.duration,
            tweens: [],
            createTween: function(e, t) {
                var n = S.Tween(o, l.opts, e, t, l.opts.specialEasing[e] || l.opts.easing);
                return l.tweens.push(n), n;
            },
            stop: function(e) {
                var t = 0, n = e ? l.tweens.length : 0;
                if (a) return this;
                for (a = !0; t < n; t++) l.tweens[t].run(1);
                return e ? (s.notifyWith(o, [ l, 1, 0 ]), s.resolveWith(o, [ l, e ])) : s.rejectWith(o, [ l, e ]), 
                this;
            }
        }), c = l.props;
        for ((!function(e, t) {
            var n, r, i, o, a;
            for (n in e) if (i = t[r = X(n)], o = e[n], Array.isArray(o) && (i = o[1], o = e[n] = o[0]), 
            n !== r && (e[r] = o, delete e[n]), (a = S.cssHooks[r]) && "expand" in a) for (n in o = a.expand(o), 
            delete e[r], o) n in e || (e[n] = o[n], t[n] = i); else t[r] = i;
        }(c, l.opts.specialEasing)); r < i; r++) if (n = ft.prefilters[r].call(l, o, c, l.opts)) return m(n.stop) && (S._queueHooks(l.elem, l.opts.queue).stop = n.stop.bind(n)), 
        n;
        return S.map(c, ct, l), m(l.opts.start) && l.opts.start.call(o, l), l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always), 
        S.fx.timer(S.extend(u, {
            elem: o,
            anim: l,
            queue: l.opts.queue
        })), l;
    }
    S.Animation = S.extend(ft, {
        tweeners: {
            "*": [ function(e, t) {
                var n = this.createTween(e, t);
                return se(n.elem, e, te.exec(t), n), n;
            } ]
        },
        tweener: function(e, t) {
            m(e) ? (t = e, e = [ "*" ]) : e = e.match(P);
            for (var n, r = 0, i = e.length; r < i; r++) n = e[r], ft.tweeners[n] = ft.tweeners[n] || [], 
            ft.tweeners[n].unshift(t);
        },
        prefilters: [ function(e, t, n) {
            var r, i, o, a, s, u, l, c, f = "width" in t || "height" in t, p = this, d = {}, h = e.style, g = e.nodeType && ae(e), v = Y.get(e, "fxshow");
            for (r in n.queue || (null == (a = S._queueHooks(e, "fx")).unqueued && (a.unqueued = 0, 
            s = a.empty.fire, a.empty.fire = function() {
                a.unqueued || s();
            }), a.unqueued++, p.always(function() {
                p.always(function() {
                    a.unqueued--, S.queue(e, "fx").length || a.empty.fire();
                });
            })), t) if (i = t[r], ot.test(i)) {
                if (delete t[r], o = o || "toggle" === i, i === (g ? "hide" : "show")) {
                    if ("show" !== i || !v || void 0 === v[r]) continue;
                    g = !0;
                }
                d[r] = v && v[r] || S.style(e, r);
            }
            if ((u = !S.isEmptyObject(t)) || !S.isEmptyObject(d)) for (r in f && 1 === e.nodeType && (n.overflow = [ h.overflow, h.overflowX, h.overflowY ], 
            null == (l = v && v.display) && (l = Y.get(e, "display")), "none" === (c = S.css(e, "display")) && (l ? c = l : (le([ e ], !0), 
            l = e.style.display || l, c = S.css(e, "display"), le([ e ]))), ("inline" === c || "inline-block" === c && null != l) && "none" === S.css(e, "float") && (u || (p.done(function() {
                h.display = l;
            }), null == l && (c = h.display, l = "none" === c ? "" : c)), h.display = "inline-block")), 
            n.overflow && (h.overflow = "hidden", p.always(function() {
                h.overflow = n.overflow[0], h.overflowX = n.overflow[1], h.overflowY = n.overflow[2];
            })), u = !1, d) u || (v ? "hidden" in v && (g = v.hidden) : v = Y.access(e, "fxshow", {
                display: l
            }), o && (v.hidden = !g), g && le([ e ], !0), p.done(function() {
                for (r in g || le([ e ]), Y.remove(e, "fxshow"), d) S.style(e, r, d[r]);
            })), u = ct(g ? v[r] : 0, r, p), r in v || (v[r] = u.start, g && (u.end = u.start, 
            u.start = 0));
        } ],
        prefilter: function(e, t) {
            t ? ft.prefilters.unshift(e) : ft.prefilters.push(e);
        }
    }), S.speed = function(e, t, n) {
        var r = e && "object" == typeof e ? S.extend({}, e) : {
            complete: n || !n && t || m(e) && e,
            duration: e,
            easing: n && t || t && !m(t) && t
        };
        return S.fx.off ? r.duration = 0 : "number" != typeof r.duration && (r.duration in S.fx.speeds ? r.duration = S.fx.speeds[r.duration] : r.duration = S.fx.speeds._default), 
        null != r.queue && !0 !== r.queue || (r.queue = "fx"), r.old = r.complete, r.complete = function() {
            m(r.old) && r.old.call(this), r.queue && S.dequeue(this, r.queue);
        }, r;
    }, S.fn.extend({
        fadeTo: function(e, t, n, r) {
            return this.filter(ae).css("opacity", 0).show().end().animate({
                opacity: t
            }, e, n, r);
        },
        animate: function(t, e, n, r) {
            var i = S.isEmptyObject(t), o = S.speed(e, n, r), a = function() {
                var e = ft(this, S.extend({}, t), o);
                (i || Y.get(this, "finish")) && e.stop(!0);
            };
            return a.finish = a, i || !1 === o.queue ? this.each(a) : this.queue(o.queue, a);
        },
        stop: function(i, e, o) {
            var a = function(e) {
                var t = e.stop;
                delete e.stop, t(o);
            };
            return "string" != typeof i && (o = e, e = i, i = void 0), e && this.queue(i || "fx", []), 
            this.each(function() {
                var e = !0, t = null != i && i + "queueHooks", n = S.timers, r = Y.get(this);
                if (t) r[t] && r[t].stop && a(r[t]); else for (t in r) r[t] && r[t].stop && at.test(t) && a(r[t]);
                for (t = n.length; t--; ) n[t].elem !== this || null != i && n[t].queue !== i || (n[t].anim.stop(o), 
                e = !1, n.splice(t, 1));
                !e && o || S.dequeue(this, i);
            });
        },
        finish: function(a) {
            return !1 !== a && (a = a || "fx"), this.each(function() {
                var e, t = Y.get(this), n = t[a + "queue"], r = t[a + "queueHooks"], i = S.timers, o = n ? n.length : 0;
                for (t.finish = !0, S.queue(this, a, []), r && r.stop && r.stop.call(this, !0), 
                e = i.length; e--; ) i[e].elem === this && i[e].queue === a && (i[e].anim.stop(!0), 
                i.splice(e, 1));
                for (e = 0; e < o; e++) n[e] && n[e].finish && n[e].finish.call(this);
                delete t.finish;
            });
        }
    }), S.each([ "toggle", "show", "hide" ], function(e, r) {
        var i = S.fn[r];
        S.fn[r] = function(e, t, n) {
            return null == e || "boolean" == typeof e ? i.apply(this, arguments) : this.animate(lt(r, !0), e, t, n);
        };
    }), S.each({
        slideDown: lt("show"),
        slideUp: lt("hide"),
        slideToggle: lt("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(e, r) {
        S.fn[e] = function(e, t, n) {
            return this.animate(r, e, t, n);
        };
    }), S.timers = [], S.fx.tick = function() {
        var e, t = 0, n = S.timers;
        for (tt = Date.now(); t < n.length; t++) (e = n[t])() || n[t] !== e || n.splice(t--, 1);
        n.length || S.fx.stop(), tt = void 0;
    }, S.fx.timer = function(e) {
        S.timers.push(e), S.fx.start();
    }, S.fx.interval = 13, S.fx.start = function() {
        nt || (nt = !0, st());
    }, S.fx.stop = function() {
        nt = null;
    }, S.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    }, S.fn.delay = function(r, e) {
        return r = S.fx && S.fx.speeds[r] || r, e = e || "fx", this.queue(e, function(e, t) {
            var n = C.setTimeout(e, r);
            t.stop = function() {
                C.clearTimeout(n);
            };
        });
    }, rt = E.createElement("input"), it = E.createElement("select").appendChild(E.createElement("option")), 
    rt.type = "checkbox", y.checkOn = "" !== rt.value, y.optSelected = it.selected, 
    (rt = E.createElement("input")).value = "t", rt.type = "radio", y.radioValue = "t" === rt.value;
    var pt, dt = S.expr.attrHandle;
    S.fn.extend({
        attr: function(e, t) {
            return $(this, S.attr, e, t, 1 < arguments.length);
        },
        removeAttr: function(e) {
            return this.each(function() {
                S.removeAttr(this, e);
            });
        }
    }), S.extend({
        attr: function(e, t, n) {
            var r, i, o = e.nodeType;
            if (3 !== o && 8 !== o && 2 !== o) return "undefined" == typeof e.getAttribute ? S.prop(e, t, n) : (1 === o && S.isXMLDoc(e) || (i = S.attrHooks[t.toLowerCase()] || (S.expr.match.bool.test(t) ? pt : void 0)), 
            void 0 !== n ? null === n ? void S.removeAttr(e, t) : i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : (e.setAttribute(t, n + ""), 
            n) : i && "get" in i && null !== (r = i.get(e, t)) ? r : null == (r = S.find.attr(e, t)) ? void 0 : r);
        },
        attrHooks: {
            type: {
                set: function(e, t) {
                    if (!y.radioValue && "radio" === t && A(e, "input")) {
                        var n = e.value;
                        return e.setAttribute("type", t), n && (e.value = n), t;
                    }
                }
            }
        },
        removeAttr: function(e, t) {
            var n, r = 0, i = t && t.match(P);
            if (i && 1 === e.nodeType) while (n = i[r++]) e.removeAttribute(n);
        }
    }), pt = {
        set: function(e, t, n) {
            return !1 === t ? S.removeAttr(e, n) : e.setAttribute(n, n), n;
        }
    }, S.each(S.expr.match.bool.source.match(/\w+/g), function(e, t) {
        var a = dt[t] || S.find.attr;
        dt[t] = function(e, t, n) {
            var r, i, o = t.toLowerCase();
            return n || (i = dt[o], dt[o] = r, r = null != a(e, t, n) ? o : null, dt[o] = i), 
            r;
        };
    });
    var ht = /^(?:input|select|textarea|button)$/i, gt = /^(?:a|area)$/i;
    function vt(e) {
        return (e.match(P) || []).join(" ");
    }
    function yt(e) {
        return e.getAttribute && e.getAttribute("class") || "";
    }
    function mt(e) {
        return Array.isArray(e) ? e : "string" == typeof e && e.match(P) || [];
    }
    S.fn.extend({
        prop: function(e, t) {
            return $(this, S.prop, e, t, 1 < arguments.length);
        },
        removeProp: function(e) {
            return this.each(function() {
                delete this[S.propFix[e] || e];
            });
        }
    }), S.extend({
        prop: function(e, t, n) {
            var r, i, o = e.nodeType;
            if (3 !== o && 8 !== o && 2 !== o) return 1 === o && S.isXMLDoc(e) || (t = S.propFix[t] || t, 
            i = S.propHooks[t]), void 0 !== n ? i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : e[t] = n : i && "get" in i && null !== (r = i.get(e, t)) ? r : e[t];
        },
        propHooks: {
            tabIndex: {
                get: function(e) {
                    var t = S.find.attr(e, "tabindex");
                    return t ? parseInt(t, 10) : ht.test(e.nodeName) || gt.test(e.nodeName) && e.href ? 0 : -1;
                }
            }
        },
        propFix: {
            for: "htmlFor",
            class: "className"
        }
    }), y.optSelected || (S.propHooks.selected = {
        get: function(e) {
            var t = e.parentNode;
            return t && t.parentNode && t.parentNode.selectedIndex, null;
        },
        set: function(e) {
            var t = e.parentNode;
            t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex);
        }
    }), S.each([ "tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable" ], function() {
        S.propFix[this.toLowerCase()] = this;
    }), S.fn.extend({
        addClass: function(t) {
            var e, n, r, i, o, a, s, u = 0;
            if (m(t)) return this.each(function(e) {
                S(this).addClass(t.call(this, e, yt(this)));
            });
            if ((e = mt(t)).length) while (n = this[u++]) if (i = yt(n), r = 1 === n.nodeType && " " + vt(i) + " ") {
                a = 0;
                while (o = e[a++]) r.indexOf(" " + o + " ") < 0 && (r += o + " ");
                i !== (s = vt(r)) && n.setAttribute("class", s);
            }
            return this;
        },
        removeClass: function(t) {
            var e, n, r, i, o, a, s, u = 0;
            if (m(t)) return this.each(function(e) {
                S(this).removeClass(t.call(this, e, yt(this)));
            });
            if (!arguments.length) return this.attr("class", "");
            if ((e = mt(t)).length) while (n = this[u++]) if (i = yt(n), r = 1 === n.nodeType && " " + vt(i) + " ") {
                a = 0;
                while (o = e[a++]) while (-1 < r.indexOf(" " + o + " ")) r = r.replace(" " + o + " ", " ");
                i !== (s = vt(r)) && n.setAttribute("class", s);
            }
            return this;
        },
        toggleClass: function(i, t) {
            var o = typeof i, a = "string" === o || Array.isArray(i);
            return "boolean" == typeof t && a ? t ? this.addClass(i) : this.removeClass(i) : m(i) ? this.each(function(e) {
                S(this).toggleClass(i.call(this, e, yt(this), t), t);
            }) : this.each(function() {
                var e, t, n, r;
                if (a) {
                    t = 0, n = S(this), r = mt(i);
                    while (e = r[t++]) n.hasClass(e) ? n.removeClass(e) : n.addClass(e);
                } else void 0 !== i && "boolean" !== o || ((e = yt(this)) && Y.set(this, "__className__", e), 
                this.setAttribute && this.setAttribute("class", e || !1 === i ? "" : Y.get(this, "__className__") || ""));
            });
        },
        hasClass: function(e) {
            var t, n, r = 0;
            t = " " + e + " ";
            while (n = this[r++]) if (1 === n.nodeType && -1 < (" " + vt(yt(n)) + " ").indexOf(t)) return !0;
            return !1;
        }
    });
    var xt = /\r/g;
    S.fn.extend({
        val: function(n) {
            var r, e, i, t = this[0];
            return arguments.length ? (i = m(n), this.each(function(e) {
                var t;
                1 === this.nodeType && (null == (t = i ? n.call(this, e, S(this).val()) : n) ? t = "" : "number" == typeof t ? t += "" : Array.isArray(t) && (t = S.map(t, function(e) {
                    return null == e ? "" : e + "";
                })), (r = S.valHooks[this.type] || S.valHooks[this.nodeName.toLowerCase()]) && "set" in r && void 0 !== r.set(this, t, "value") || (this.value = t));
            })) : t ? (r = S.valHooks[t.type] || S.valHooks[t.nodeName.toLowerCase()]) && "get" in r && void 0 !== (e = r.get(t, "value")) ? e : "string" == typeof (e = t.value) ? e.replace(xt, "") : null == e ? "" : e : void 0;
        }
    }), S.extend({
        valHooks: {
            option: {
                get: function(e) {
                    var t = S.find.attr(e, "value");
                    return null != t ? t : vt(S.text(e));
                }
            },
            select: {
                get: function(e) {
                    var t, n, r, i = e.options, o = e.selectedIndex, a = "select-one" === e.type, s = a ? null : [], u = a ? o + 1 : i.length;
                    for (r = o < 0 ? u : a ? o : 0; r < u; r++) if (((n = i[r]).selected || r === o) && !n.disabled && (!n.parentNode.disabled || !A(n.parentNode, "optgroup"))) {
                        if (t = S(n).val(), a) return t;
                        s.push(t);
                    }
                    return s;
                },
                set: function(e, t) {
                    var n, r, i = e.options, o = S.makeArray(t), a = i.length;
                    while (a--) ((r = i[a]).selected = -1 < S.inArray(S.valHooks.option.get(r), o)) && (n = !0);
                    return n || (e.selectedIndex = -1), o;
                }
            }
        }
    }), S.each([ "radio", "checkbox" ], function() {
        S.valHooks[this] = {
            set: function(e, t) {
                if (Array.isArray(t)) return e.checked = -1 < S.inArray(S(e).val(), t);
            }
        }, y.checkOn || (S.valHooks[this].get = function(e) {
            return null === e.getAttribute("value") ? "on" : e.value;
        });
    }), y.focusin = "onfocusin" in C;
    var bt = /^(?:focusinfocus|focusoutblur)$/, wt = function(e) {
        e.stopPropagation();
    };
    S.extend(S.event, {
        trigger: function(e, t, n, r) {
            var i, o, a, s, u, l, c, f, p = [ n || E ], d = v.call(e, "type") ? e.type : e, h = v.call(e, "namespace") ? e.namespace.split(".") : [];
            if (o = f = a = n = n || E, 3 !== n.nodeType && 8 !== n.nodeType && !bt.test(d + S.event.triggered) && (-1 < d.indexOf(".") && (d = (h = d.split(".")).shift(), 
            h.sort()), u = d.indexOf(":") < 0 && "on" + d, (e = e[S.expando] ? e : new S.Event(d, "object" == typeof e && e)).isTrigger = r ? 2 : 3, 
            e.namespace = h.join("."), e.rnamespace = e.namespace ? new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, 
            e.result = void 0, e.target || (e.target = n), t = null == t ? [ e ] : S.makeArray(t, [ e ]), 
            c = S.event.special[d] || {}, r || !c.trigger || !1 !== c.trigger.apply(n, t))) {
                if (!r && !c.noBubble && !x(n)) {
                    for (s = c.delegateType || d, bt.test(s + d) || (o = o.parentNode); o; o = o.parentNode) p.push(o), 
                    a = o;
                    a === (n.ownerDocument || E) && p.push(a.defaultView || a.parentWindow || C);
                }
                i = 0;
                while ((o = p[i++]) && !e.isPropagationStopped()) f = o, e.type = 1 < i ? s : c.bindType || d, 
                (l = (Y.get(o, "events") || Object.create(null))[e.type] && Y.get(o, "handle")) && l.apply(o, t), 
                (l = u && o[u]) && l.apply && V(o) && (e.result = l.apply(o, t), !1 === e.result && e.preventDefault());
                return e.type = d, r || e.isDefaultPrevented() || c._default && !1 !== c._default.apply(p.pop(), t) || !V(n) || u && m(n[d]) && !x(n) && ((a = n[u]) && (n[u] = null), 
                S.event.triggered = d, e.isPropagationStopped() && f.addEventListener(d, wt), n[d](), 
                e.isPropagationStopped() && f.removeEventListener(d, wt), S.event.triggered = void 0, 
                a && (n[u] = a)), e.result;
            }
        },
        simulate: function(e, t, n) {
            var r = S.extend(new S.Event(), n, {
                type: e,
                isSimulated: !0
            });
            S.event.trigger(r, null, t);
        }
    }), S.fn.extend({
        trigger: function(e, t) {
            return this.each(function() {
                S.event.trigger(e, t, this);
            });
        },
        triggerHandler: function(e, t) {
            var n = this[0];
            if (n) return S.event.trigger(e, t, n, !0);
        }
    }), y.focusin || S.each({
        focus: "focusin",
        blur: "focusout"
    }, function(n, r) {
        var i = function(e) {
            S.event.simulate(r, e.target, S.event.fix(e));
        };
        S.event.special[r] = {
            setup: function() {
                var e = this.ownerDocument || this.document || this, t = Y.access(e, r);
                t || e.addEventListener(n, i, !0), Y.access(e, r, (t || 0) + 1);
            },
            teardown: function() {
                var e = this.ownerDocument || this.document || this, t = Y.access(e, r) - 1;
                t ? Y.access(e, r, t) : (e.removeEventListener(n, i, !0), Y.remove(e, r));
            }
        };
    });
    var Tt = C.location, Ct = {
        guid: Date.now()
    }, Et = /\?/;
    S.parseXML = function(e) {
        var t;
        if (!e || "string" != typeof e) return null;
        try {
            t = new C.DOMParser().parseFromString(e, "text/xml");
        } catch (e) {
            t = void 0;
        }
        return t && !t.getElementsByTagName("parsererror").length || S.error("Invalid XML: " + e), 
        t;
    };
    var St = /\[\]$/, kt = /\r?\n/g, At = /^(?:submit|button|image|reset|file)$/i, Nt = /^(?:input|select|textarea|keygen)/i;
    function Dt(n, e, r, i) {
        var t;
        if (Array.isArray(e)) S.each(e, function(e, t) {
            r || St.test(n) ? i(n, t) : Dt(n + "[" + ("object" == typeof t && null != t ? e : "") + "]", t, r, i);
        }); else if (r || "object" !== w(e)) i(n, e); else for (t in e) Dt(n + "[" + t + "]", e[t], r, i);
    }
    S.param = function(e, t) {
        var n, r = [], i = function(e, t) {
            var n = m(t) ? t() : t;
            r[r.length] = encodeURIComponent(e) + "=" + encodeURIComponent(null == n ? "" : n);
        };
        if (null == e) return "";
        if (Array.isArray(e) || e.jquery && !S.isPlainObject(e)) S.each(e, function() {
            i(this.name, this.value);
        }); else for (n in e) Dt(n, e[n], t, i);
        return r.join("&");
    }, S.fn.extend({
        serialize: function() {
            return S.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {
                var e = S.prop(this, "elements");
                return e ? S.makeArray(e) : this;
            }).filter(function() {
                var e = this.type;
                return this.name && !S(this).is(":disabled") && Nt.test(this.nodeName) && !At.test(e) && (this.checked || !pe.test(e));
            }).map(function(e, t) {
                var n = S(this).val();
                return null == n ? null : Array.isArray(n) ? S.map(n, function(e) {
                    return {
                        name: t.name,
                        value: e.replace(kt, "\r\n")
                    };
                }) : {
                    name: t.name,
                    value: n.replace(kt, "\r\n")
                };
            }).get();
        }
    });
    var jt = /%20/g, qt = /#.*$/, Lt = /([?&])_=[^&]*/, Ht = /^(.*?):[ \t]*([^\r\n]*)$/gm, Ot = /^(?:GET|HEAD)$/, Pt = /^\/\//, Rt = {}, Mt = {}, It = "*/".concat("*"), Wt = E.createElement("a");
    function Ft(o) {
        return function(e, t) {
            "string" != typeof e && (t = e, e = "*");
            var n, r = 0, i = e.toLowerCase().match(P) || [];
            if (m(t)) while (n = i[r++]) "+" === n[0] ? (n = n.slice(1) || "*", (o[n] = o[n] || []).unshift(t)) : (o[n] = o[n] || []).push(t);
        };
    }
    function Bt(t, i, o, a) {
        var s = {}, u = t === Mt;
        function l(e) {
            var r;
            return s[e] = !0, S.each(t[e] || [], function(e, t) {
                var n = t(i, o, a);
                return "string" != typeof n || u || s[n] ? u ? !(r = n) : void 0 : (i.dataTypes.unshift(n), 
                l(n), !1);
            }), r;
        }
        return l(i.dataTypes[0]) || !s["*"] && l("*");
    }
    function $t(e, t) {
        var n, r, i = S.ajaxSettings.flatOptions || {};
        for (n in t) void 0 !== t[n] && ((i[n] ? e : r || (r = {}))[n] = t[n]);
        return r && S.extend(!0, e, r), e;
    }
    Wt.href = Tt.href, S.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: Tt.href,
            type: "GET",
            isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Tt.protocol),
            global: !0,
            processData: !0,
            async: !0,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": It,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },
            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },
            converters: {
                "* text": String,
                "text html": !0,
                "text json": JSON.parse,
                "text xml": S.parseXML
            },
            flatOptions: {
                url: !0,
                context: !0
            }
        },
        ajaxSetup: function(e, t) {
            return t ? $t($t(e, S.ajaxSettings), t) : $t(S.ajaxSettings, e);
        },
        ajaxPrefilter: Ft(Rt),
        ajaxTransport: Ft(Mt),
        ajax: function(e, t) {
            "object" == typeof e && (t = e, e = void 0), t = t || {};
            var c, f, p, n, d, r, h, g, i, o, v = S.ajaxSetup({}, t), y = v.context || v, m = v.context && (y.nodeType || y.jquery) ? S(y) : S.event, x = S.Deferred(), b = S.Callbacks("once memory"), w = v.statusCode || {}, a = {}, s = {}, u = "canceled", T = {
                readyState: 0,
                getResponseHeader: function(e) {
                    var t;
                    if (h) {
                        if (!n) {
                            n = {};
                            while (t = Ht.exec(p)) n[t[1].toLowerCase() + " "] = (n[t[1].toLowerCase() + " "] || []).concat(t[2]);
                        }
                        t = n[e.toLowerCase() + " "];
                    }
                    return null == t ? null : t.join(", ");
                },
                getAllResponseHeaders: function() {
                    return h ? p : null;
                },
                setRequestHeader: function(e, t) {
                    return null == h && (e = s[e.toLowerCase()] = s[e.toLowerCase()] || e, a[e] = t), 
                    this;
                },
                overrideMimeType: function(e) {
                    return null == h && (v.mimeType = e), this;
                },
                statusCode: function(e) {
                    var t;
                    if (e) if (h) T.always(e[T.status]); else for (t in e) w[t] = [ w[t], e[t] ];
                    return this;
                },
                abort: function(e) {
                    var t = e || u;
                    return c && c.abort(t), l(0, t), this;
                }
            };
            if (x.promise(T), v.url = ((e || v.url || Tt.href) + "").replace(Pt, Tt.protocol + "//"), 
            v.type = t.method || t.type || v.method || v.type, v.dataTypes = (v.dataType || "*").toLowerCase().match(P) || [ "" ], 
            null == v.crossDomain) {
                r = E.createElement("a");
                try {
                    r.href = v.url, r.href = r.href, v.crossDomain = Wt.protocol + "//" + Wt.host != r.protocol + "//" + r.host;
                } catch (e) {
                    v.crossDomain = !0;
                }
            }
            if (v.data && v.processData && "string" != typeof v.data && (v.data = S.param(v.data, v.traditional)), 
            Bt(Rt, v, t, T), h) return T;
            for (i in (g = S.event && v.global) && 0 == S.active++ && S.event.trigger("ajaxStart"), 
            v.type = v.type.toUpperCase(), v.hasContent = !Ot.test(v.type), f = v.url.replace(qt, ""), 
            v.hasContent ? v.data && v.processData && 0 === (v.contentType || "").indexOf("application/x-www-form-urlencoded") && (v.data = v.data.replace(jt, "+")) : (o = v.url.slice(f.length), 
            v.data && (v.processData || "string" == typeof v.data) && (f += (Et.test(f) ? "&" : "?") + v.data, 
            delete v.data), !1 === v.cache && (f = f.replace(Lt, "$1"), o = (Et.test(f) ? "&" : "?") + "_=" + Ct.guid++ + o), 
            v.url = f + o), v.ifModified && (S.lastModified[f] && T.setRequestHeader("If-Modified-Since", S.lastModified[f]), 
            S.etag[f] && T.setRequestHeader("If-None-Match", S.etag[f])), (v.data && v.hasContent && !1 !== v.contentType || t.contentType) && T.setRequestHeader("Content-Type", v.contentType), 
            T.setRequestHeader("Accept", v.dataTypes[0] && v.accepts[v.dataTypes[0]] ? v.accepts[v.dataTypes[0]] + ("*" !== v.dataTypes[0] ? ", " + It + "; q=0.01" : "") : v.accepts["*"]), 
            v.headers) T.setRequestHeader(i, v.headers[i]);
            if (v.beforeSend && (!1 === v.beforeSend.call(y, T, v) || h)) return T.abort();
            if (u = "abort", b.add(v.complete), T.done(v.success), T.fail(v.error), c = Bt(Mt, v, t, T)) {
                if (T.readyState = 1, g && m.trigger("ajaxSend", [ T, v ]), h) return T;
                v.async && 0 < v.timeout && (d = C.setTimeout(function() {
                    T.abort("timeout");
                }, v.timeout));
                try {
                    h = !1, c.send(a, l);
                } catch (e) {
                    if (h) throw e;
                    l(-1, e);
                }
            } else l(-1, "No Transport");
            function l(e, t, n, r) {
                var i, o, a, s, u, l = t;
                h || (h = !0, d && C.clearTimeout(d), c = void 0, p = r || "", T.readyState = 0 < e ? 4 : 0, 
                i = 200 <= e && e < 300 || 304 === e, n && (s = function(e, t, n) {
                    var r, i, o, a, s = e.contents, u = e.dataTypes;
                    while ("*" === u[0]) u.shift(), void 0 === r && (r = e.mimeType || t.getResponseHeader("Content-Type"));
                    if (r) for (i in s) if (s[i] && s[i].test(r)) {
                        u.unshift(i);
                        break;
                    }
                    if (u[0] in n) o = u[0]; else {
                        for (i in n) {
                            if (!u[0] || e.converters[i + " " + u[0]]) {
                                o = i;
                                break;
                            }
                            a || (a = i);
                        }
                        o = o || a;
                    }
                    if (o) return o !== u[0] && u.unshift(o), n[o];
                }(v, T, n)), !i && -1 < S.inArray("script", v.dataTypes) && (v.converters["text script"] = function() {}), 
                s = function(e, t, n, r) {
                    var i, o, a, s, u, l = {}, c = e.dataTypes.slice();
                    if (c[1]) for (a in e.converters) l[a.toLowerCase()] = e.converters[a];
                    o = c.shift();
                    while (o) if (e.responseFields[o] && (n[e.responseFields[o]] = t), !u && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), 
                    u = o, o = c.shift()) if ("*" === o) o = u; else if ("*" !== u && u !== o) {
                        if (!(a = l[u + " " + o] || l["* " + o])) for (i in l) if ((s = i.split(" "))[1] === o && (a = l[u + " " + s[0]] || l["* " + s[0]])) {
                            !0 === a ? a = l[i] : !0 !== l[i] && (o = s[0], c.unshift(s[1]));
                            break;
                        }
                        if (!0 !== a) if (a && e["throws"]) t = a(t); else try {
                            t = a(t);
                        } catch (e) {
                            return {
                                state: "parsererror",
                                error: a ? e : "No conversion from " + u + " to " + o
                            };
                        }
                    }
                    return {
                        state: "success",
                        data: t
                    };
                }(v, s, T, i), i ? (v.ifModified && ((u = T.getResponseHeader("Last-Modified")) && (S.lastModified[f] = u), 
                (u = T.getResponseHeader("etag")) && (S.etag[f] = u)), 204 === e || "HEAD" === v.type ? l = "nocontent" : 304 === e ? l = "notmodified" : (l = s.state, 
                o = s.data, i = !(a = s.error))) : (a = l, !e && l || (l = "error", e < 0 && (e = 0))), 
                T.status = e, T.statusText = (t || l) + "", i ? x.resolveWith(y, [ o, l, T ]) : x.rejectWith(y, [ T, l, a ]), 
                T.statusCode(w), w = void 0, g && m.trigger(i ? "ajaxSuccess" : "ajaxError", [ T, v, i ? o : a ]), 
                b.fireWith(y, [ T, l ]), g && (m.trigger("ajaxComplete", [ T, v ]), --S.active || S.event.trigger("ajaxStop")));
            }
            return T;
        },
        getJSON: function(e, t, n) {
            return S.get(e, t, n, "json");
        },
        getScript: function(e, t) {
            return S.get(e, void 0, t, "script");
        }
    }), S.each([ "get", "post" ], function(e, i) {
        S[i] = function(e, t, n, r) {
            return m(t) && (r = r || n, n = t, t = void 0), S.ajax(S.extend({
                url: e,
                type: i,
                dataType: r,
                data: t,
                success: n
            }, S.isPlainObject(e) && e));
        };
    }), S.ajaxPrefilter(function(e) {
        var t;
        for (t in e.headers) "content-type" === t.toLowerCase() && (e.contentType = e.headers[t] || "");
    }), S._evalUrl = function(e, t, n) {
        return S.ajax({
            url: e,
            type: "GET",
            dataType: "script",
            cache: !0,
            async: !1,
            global: !1,
            converters: {
                "text script": function() {}
            },
            dataFilter: function(e) {
                S.globalEval(e, t, n);
            }
        });
    }, S.fn.extend({
        wrapAll: function(e) {
            var t;
            return this[0] && (m(e) && (e = e.call(this[0])), t = S(e, this[0].ownerDocument).eq(0).clone(!0), 
            this[0].parentNode && t.insertBefore(this[0]), t.map(function() {
                var e = this;
                while (e.firstElementChild) e = e.firstElementChild;
                return e;
            }).append(this)), this;
        },
        wrapInner: function(n) {
            return m(n) ? this.each(function(e) {
                S(this).wrapInner(n.call(this, e));
            }) : this.each(function() {
                var e = S(this), t = e.contents();
                t.length ? t.wrapAll(n) : e.append(n);
            });
        },
        wrap: function(t) {
            var n = m(t);
            return this.each(function(e) {
                S(this).wrapAll(n ? t.call(this, e) : t);
            });
        },
        unwrap: function(e) {
            return this.parent(e).not("body").each(function() {
                S(this).replaceWith(this.childNodes);
            }), this;
        }
    }), S.expr.pseudos.hidden = function(e) {
        return !S.expr.pseudos.visible(e);
    }, S.expr.pseudos.visible = function(e) {
        return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);
    }, S.ajaxSettings.xhr = function() {
        try {
            return new C.XMLHttpRequest();
        } catch (e) {}
    };
    var _t = {
        0: 200,
        1223: 204
    }, zt = S.ajaxSettings.xhr();
    y.cors = !!zt && "withCredentials" in zt, y.ajax = zt = !!zt, S.ajaxTransport(function(i) {
        var o, a;
        if (y.cors || zt && !i.crossDomain) return {
            send: function(e, t) {
                var n, r = i.xhr();
                if (r.open(i.type, i.url, i.async, i.username, i.password), i.xhrFields) for (n in i.xhrFields) r[n] = i.xhrFields[n];
                for (n in i.mimeType && r.overrideMimeType && r.overrideMimeType(i.mimeType), i.crossDomain || e["X-Requested-With"] || (e["X-Requested-With"] = "XMLHttpRequest"), 
                e) r.setRequestHeader(n, e[n]);
                o = function(e) {
                    return function() {
                        o && (o = a = r.onload = r.onerror = r.onabort = r.ontimeout = r.onreadystatechange = null, 
                        "abort" === e ? r.abort() : "error" === e ? "number" != typeof r.status ? t(0, "error") : t(r.status, r.statusText) : t(_t[r.status] || r.status, r.statusText, "text" !== (r.responseType || "text") || "string" != typeof r.responseText ? {
                            binary: r.response
                        } : {
                            text: r.responseText
                        }, r.getAllResponseHeaders()));
                    };
                }, r.onload = o(), a = r.onerror = r.ontimeout = o("error"), void 0 !== r.onabort ? r.onabort = a : r.onreadystatechange = function() {
                    4 === r.readyState && C.setTimeout(function() {
                        o && a();
                    });
                }, o = o("abort");
                try {
                    r.send(i.hasContent && i.data || null);
                } catch (e) {
                    if (o) throw e;
                }
            },
            abort: function() {
                o && o();
            }
        };
    }), S.ajaxPrefilter(function(e) {
        e.crossDomain && (e.contents.script = !1);
    }), S.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function(e) {
                return S.globalEval(e), e;
            }
        }
    }), S.ajaxPrefilter("script", function(e) {
        void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = "GET");
    }), S.ajaxTransport("script", function(n) {
        var r, i;
        if (n.crossDomain || n.scriptAttrs) return {
            send: function(e, t) {
                r = S("<script>").attr(n.scriptAttrs || {}).prop({
                    charset: n.scriptCharset,
                    src: n.url
                }).on("load error", i = function(e) {
                    r.remove(), i = null, e && t("error" === e.type ? 404 : 200, e.type);
                }), E.head.appendChild(r[0]);
            },
            abort: function() {
                i && i();
            }
        };
    });
    var Ut, Xt = [], Vt = /(=)\?(?=&|$)|\?\?/;
    S.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var e = Xt.pop() || S.expando + "_" + Ct.guid++;
            return this[e] = !0, e;
        }
    }), S.ajaxPrefilter("json jsonp", function(e, t, n) {
        var r, i, o, a = !1 !== e.jsonp && (Vt.test(e.url) ? "url" : "string" == typeof e.data && 0 === (e.contentType || "").indexOf("application/x-www-form-urlencoded") && Vt.test(e.data) && "data");
        if (a || "jsonp" === e.dataTypes[0]) return r = e.jsonpCallback = m(e.jsonpCallback) ? e.jsonpCallback() : e.jsonpCallback, 
        a ? e[a] = e[a].replace(Vt, "$1" + r) : !1 !== e.jsonp && (e.url += (Et.test(e.url) ? "&" : "?") + e.jsonp + "=" + r), 
        e.converters["script json"] = function() {
            return o || S.error(r + " was not called"), o[0];
        }, e.dataTypes[0] = "json", i = C[r], C[r] = function() {
            o = arguments;
        }, n.always(function() {
            void 0 === i ? S(C).removeProp(r) : C[r] = i, e[r] && (e.jsonpCallback = t.jsonpCallback, 
            Xt.push(r)), o && m(i) && i(o[0]), o = i = void 0;
        }), "script";
    }), y.createHTMLDocument = ((Ut = E.implementation.createHTMLDocument("").body).innerHTML = "<form></form><form></form>", 
    2 === Ut.childNodes.length), S.parseHTML = function(e, t, n) {
        return "string" != typeof e ? [] : ("boolean" == typeof t && (n = t, t = !1), t || (y.createHTMLDocument ? ((r = (t = E.implementation.createHTMLDocument("")).createElement("base")).href = E.location.href, 
        t.head.appendChild(r)) : t = E), o = !n && [], (i = N.exec(e)) ? [ t.createElement(i[1]) ] : (i = xe([ e ], t, o), 
        o && o.length && S(o).remove(), S.merge([], i.childNodes)));
        var r, i, o;
    }, S.fn.load = function(e, t, n) {
        var r, i, o, a = this, s = e.indexOf(" ");
        return -1 < s && (r = vt(e.slice(s)), e = e.slice(0, s)), m(t) ? (n = t, t = void 0) : t && "object" == typeof t && (i = "POST"), 
        0 < a.length && S.ajax({
            url: e,
            type: i || "GET",
            dataType: "html",
            data: t
        }).done(function(e) {
            o = arguments, a.html(r ? S("<div>").append(S.parseHTML(e)).find(r) : e);
        }).always(n && function(e, t) {
            a.each(function() {
                n.apply(this, o || [ e.responseText, t, e ]);
            });
        }), this;
    }, S.expr.pseudos.animated = function(t) {
        return S.grep(S.timers, function(e) {
            return t === e.elem;
        }).length;
    }, S.offset = {
        setOffset: function(e, t, n) {
            var r, i, o, a, s, u, l = S.css(e, "position"), c = S(e), f = {};
            "static" === l && (e.style.position = "relative"), s = c.offset(), o = S.css(e, "top"), 
            u = S.css(e, "left"), ("absolute" === l || "fixed" === l) && -1 < (o + u).indexOf("auto") ? (a = (r = c.position()).top, 
            i = r.left) : (a = parseFloat(o) || 0, i = parseFloat(u) || 0), m(t) && (t = t.call(e, n, S.extend({}, s))), 
            null != t.top && (f.top = t.top - s.top + a), null != t.left && (f.left = t.left - s.left + i), 
            "using" in t ? t.using.call(e, f) : ("number" == typeof f.top && (f.top += "px"), 
            "number" == typeof f.left && (f.left += "px"), c.css(f));
        }
    }, S.fn.extend({
        offset: function(t) {
            if (arguments.length) return void 0 === t ? this : this.each(function(e) {
                S.offset.setOffset(this, t, e);
            });
            var e, n, r = this[0];
            return r ? r.getClientRects().length ? (e = r.getBoundingClientRect(), n = r.ownerDocument.defaultView, 
            {
                top: e.top + n.pageYOffset,
                left: e.left + n.pageXOffset
            }) : {
                top: 0,
                left: 0
            } : void 0;
        },
        position: function() {
            if (this[0]) {
                var e, t, n, r = this[0], i = {
                    top: 0,
                    left: 0
                };
                if ("fixed" === S.css(r, "position")) t = r.getBoundingClientRect(); else {
                    t = this.offset(), n = r.ownerDocument, e = r.offsetParent || n.documentElement;
                    while (e && (e === n.body || e === n.documentElement) && "static" === S.css(e, "position")) e = e.parentNode;
                    e && e !== r && 1 === e.nodeType && ((i = S(e).offset()).top += S.css(e, "borderTopWidth", !0), 
                    i.left += S.css(e, "borderLeftWidth", !0));
                }
                return {
                    top: t.top - i.top - S.css(r, "marginTop", !0),
                    left: t.left - i.left - S.css(r, "marginLeft", !0)
                };
            }
        },
        offsetParent: function() {
            return this.map(function() {
                var e = this.offsetParent;
                while (e && "static" === S.css(e, "position")) e = e.offsetParent;
                return e || re;
            });
        }
    }), S.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(t, i) {
        var o = "pageYOffset" === i;
        S.fn[t] = function(e) {
            return $(this, function(e, t, n) {
                var r;
                if (x(e) ? r = e : 9 === e.nodeType && (r = e.defaultView), void 0 === n) return r ? r[i] : e[t];
                r ? r.scrollTo(o ? r.pageXOffset : n, o ? n : r.pageYOffset) : e[t] = n;
            }, t, e, arguments.length);
        };
    }), S.each([ "top", "left" ], function(e, n) {
        S.cssHooks[n] = $e(y.pixelPosition, function(e, t) {
            if (t) return t = Be(e, n), Me.test(t) ? S(e).position()[n] + "px" : t;
        });
    }), S.each({
        Height: "height",
        Width: "width"
    }, function(a, s) {
        S.each({
            padding: "inner" + a,
            content: s,
            "": "outer" + a
        }, function(r, o) {
            S.fn[o] = function(e, t) {
                var n = arguments.length && (r || "boolean" != typeof e), i = r || (!0 === e || !0 === t ? "margin" : "border");
                return $(this, function(e, t, n) {
                    var r;
                    return x(e) ? 0 === o.indexOf("outer") ? e["inner" + a] : e.document.documentElement["client" + a] : 9 === e.nodeType ? (r = e.documentElement, 
                    Math.max(e.body["scroll" + a], r["scroll" + a], e.body["offset" + a], r["offset" + a], r["client" + a])) : void 0 === n ? S.css(e, t, i) : S.style(e, t, n, i);
                }, s, n ? e : void 0, n);
            };
        });
    }), S.each([ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function(e, t) {
        S.fn[t] = function(e) {
            return this.on(t, e);
        };
    }), S.fn.extend({
        bind: function(e, t, n) {
            return this.on(e, null, t, n);
        },
        unbind: function(e, t) {
            return this.off(e, null, t);
        },
        delegate: function(e, t, n, r) {
            return this.on(t, e, n, r);
        },
        undelegate: function(e, t, n) {
            return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n);
        },
        hover: function(e, t) {
            return this.mouseenter(e).mouseleave(t || e);
        }
    }), S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function(e, n) {
        S.fn[n] = function(e, t) {
            return 0 < arguments.length ? this.on(n, null, e, t) : this.trigger(n);
        };
    });
    var Gt = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    S.proxy = function(e, t) {
        var n, r, i;
        if ("string" == typeof t && (n = e[t], t = e, e = n), m(e)) return r = s.call(arguments, 2), 
        (i = function() {
            return e.apply(t || this, r.concat(s.call(arguments)));
        }).guid = e.guid = e.guid || S.guid++, i;
    }, S.holdReady = function(e) {
        e ? S.readyWait++ : S.ready(!0);
    }, S.isArray = Array.isArray, S.parseJSON = JSON.parse, S.nodeName = A, S.isFunction = m, 
    S.isWindow = x, S.camelCase = X, S.type = w, S.now = Date.now, S.isNumeric = function(e) {
        var t = S.type(e);
        return ("number" === t || "string" === t) && !isNaN(e - parseFloat(e));
    }, S.trim = function(e) {
        return null == e ? "" : (e + "").replace(Gt, "");
    }, "function" == typeof define && define.amd && define("jquery", [], function() {
        return S;
    });
    var Yt = C.jQuery, Qt = C.$;
    return S.noConflict = function(e) {
        return C.$ === S && (C.$ = Qt), e && C.jQuery === S && (C.jQuery = Yt), S;
    }, "undefined" == typeof e && (C.jQuery = C.$ = S), S;
});

(function() {
    var root = this;
    var previousUnderscore = root._;
    var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
    var push = ArrayProto.push, slice = ArrayProto.slice, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
    var nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind, nativeCreate = Object.create;
    var Ctor = function() {};
    var _ = function(obj) {
        if (obj instanceof _) return obj;
        if (!(this instanceof _)) return new _(obj);
        this._wrapped = obj;
    };
    if (typeof exports !== "undefined") {
        if (typeof module !== "undefined" && module.exports) {
            exports = module.exports = _;
        }
        exports._ = _;
    } else {
        root._ = _;
    }
    _.VERSION = "1.8.3";
    var optimizeCb = function(func, context, argCount) {
        if (context === void 0) return func;
        switch (argCount == null ? 3 : argCount) {
          case 1:
            return function(value) {
                return func.call(context, value);
            };

          case 2:
            return function(value, other) {
                return func.call(context, value, other);
            };

          case 3:
            return function(value, index, collection) {
                return func.call(context, value, index, collection);
            };

          case 4:
            return function(accumulator, value, index, collection) {
                return func.call(context, accumulator, value, index, collection);
            };
        }
        return function() {
            return func.apply(context, arguments);
        };
    };
    var cb = function(value, context, argCount) {
        if (value == null) return _.identity;
        if (_.isFunction(value)) return optimizeCb(value, context, argCount);
        if (_.isObject(value)) return _.matcher(value);
        return _.property(value);
    };
    _.iteratee = function(value, context) {
        return cb(value, context, Infinity);
    };
    var createAssigner = function(keysFunc, undefinedOnly) {
        return function(obj) {
            var length = arguments.length;
            if (length < 2 || obj == null) return obj;
            for (var index = 1; index < length; index++) {
                var source = arguments[index], keys = keysFunc(source), l = keys.length;
                for (var i = 0; i < l; i++) {
                    var key = keys[i];
                    if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
                }
            }
            return obj;
        };
    };
    var baseCreate = function(prototype) {
        if (!_.isObject(prototype)) return {};
        if (nativeCreate) return nativeCreate(prototype);
        Ctor.prototype = prototype;
        var result = new Ctor();
        Ctor.prototype = null;
        return result;
    };
    var property = function(key) {
        return function(obj) {
            return obj == null ? void 0 : obj[key];
        };
    };
    var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
    var getLength = property("length");
    var isArrayLike = function(collection) {
        var length = getLength(collection);
        return typeof length == "number" && length >= 0 && length <= MAX_ARRAY_INDEX;
    };
    _.each = _.forEach = function(obj, iteratee, context) {
        iteratee = optimizeCb(iteratee, context);
        var i, length;
        if (isArrayLike(obj)) {
            for (i = 0, length = obj.length; i < length; i++) {
                iteratee(obj[i], i, obj);
            }
        } else {
            var keys = _.keys(obj);
            for (i = 0, length = keys.length; i < length; i++) {
                iteratee(obj[keys[i]], keys[i], obj);
            }
        }
        return obj;
    };
    _.map = _.collect = function(obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length, results = Array(length);
        for (var index = 0; index < length; index++) {
            var currentKey = keys ? keys[index] : index;
            results[index] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
    };
    function createReduce(dir) {
        function iterator(obj, iteratee, memo, keys, index, length) {
            for (;index >= 0 && index < length; index += dir) {
                var currentKey = keys ? keys[index] : index;
                memo = iteratee(memo, obj[currentKey], currentKey, obj);
            }
            return memo;
        }
        return function(obj, iteratee, memo, context) {
            iteratee = optimizeCb(iteratee, context, 4);
            var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length, index = dir > 0 ? 0 : length - 1;
            if (arguments.length < 3) {
                memo = obj[keys ? keys[index] : index];
                index += dir;
            }
            return iterator(obj, iteratee, memo, keys, index, length);
        };
    }
    _.reduce = _.foldl = _.inject = createReduce(1);
    _.reduceRight = _.foldr = createReduce(-1);
    _.find = _.detect = function(obj, predicate, context) {
        var key;
        if (isArrayLike(obj)) {
            key = _.findIndex(obj, predicate, context);
        } else {
            key = _.findKey(obj, predicate, context);
        }
        if (key !== void 0 && key !== -1) return obj[key];
    };
    _.filter = _.select = function(obj, predicate, context) {
        var results = [];
        predicate = cb(predicate, context);
        _.each(obj, function(value, index, list) {
            if (predicate(value, index, list)) results.push(value);
        });
        return results;
    };
    _.reject = function(obj, predicate, context) {
        return _.filter(obj, _.negate(cb(predicate)), context);
    };
    _.every = _.all = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length;
        for (var index = 0; index < length; index++) {
            var currentKey = keys ? keys[index] : index;
            if (!predicate(obj[currentKey], currentKey, obj)) return false;
        }
        return true;
    };
    _.some = _.any = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length;
        for (var index = 0; index < length; index++) {
            var currentKey = keys ? keys[index] : index;
            if (predicate(obj[currentKey], currentKey, obj)) return true;
        }
        return false;
    };
    _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
        if (!isArrayLike(obj)) obj = _.values(obj);
        if (typeof fromIndex != "number" || guard) fromIndex = 0;
        return _.indexOf(obj, item, fromIndex) >= 0;
    };
    _.invoke = function(obj, method) {
        var args = slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function(value) {
            var func = isFunc ? method : value[method];
            return func == null ? func : func.apply(value, args);
        });
    };
    _.pluck = function(obj, key) {
        return _.map(obj, _.property(key));
    };
    _.where = function(obj, attrs) {
        return _.filter(obj, _.matcher(attrs));
    };
    _.findWhere = function(obj, attrs) {
        return _.find(obj, _.matcher(attrs));
    };
    _.max = function(obj, iteratee, context) {
        var result = -Infinity, lastComputed = -Infinity, value, computed;
        if (iteratee == null && obj != null) {
            obj = isArrayLike(obj) ? obj : _.values(obj);
            for (var i = 0, length = obj.length; i < length; i++) {
                value = obj[i];
                if (value > result) {
                    result = value;
                }
            }
        } else {
            iteratee = cb(iteratee, context);
            _.each(obj, function(value, index, list) {
                computed = iteratee(value, index, list);
                if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
                    result = value;
                    lastComputed = computed;
                }
            });
        }
        return result;
    };
    _.min = function(obj, iteratee, context) {
        var result = Infinity, lastComputed = Infinity, value, computed;
        if (iteratee == null && obj != null) {
            obj = isArrayLike(obj) ? obj : _.values(obj);
            for (var i = 0, length = obj.length; i < length; i++) {
                value = obj[i];
                if (value < result) {
                    result = value;
                }
            }
        } else {
            iteratee = cb(iteratee, context);
            _.each(obj, function(value, index, list) {
                computed = iteratee(value, index, list);
                if (computed < lastComputed || computed === Infinity && result === Infinity) {
                    result = value;
                    lastComputed = computed;
                }
            });
        }
        return result;
    };
    _.shuffle = function(obj) {
        var set = isArrayLike(obj) ? obj : _.values(obj);
        var length = set.length;
        var shuffled = Array(length);
        for (var index = 0, rand; index < length; index++) {
            rand = _.random(0, index);
            if (rand !== index) shuffled[index] = shuffled[rand];
            shuffled[rand] = set[index];
        }
        return shuffled;
    };
    _.sample = function(obj, n, guard) {
        if (n == null || guard) {
            if (!isArrayLike(obj)) obj = _.values(obj);
            return obj[_.random(obj.length - 1)];
        }
        return _.shuffle(obj).slice(0, Math.max(0, n));
    };
    _.sortBy = function(obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        return _.pluck(_.map(obj, function(value, index, list) {
            return {
                value: value,
                index: index,
                criteria: iteratee(value, index, list)
            };
        }).sort(function(left, right) {
            var a = left.criteria;
            var b = right.criteria;
            if (a !== b) {
                if (a > b || a === void 0) return 1;
                if (a < b || b === void 0) return -1;
            }
            return left.index - right.index;
        }), "value");
    };
    var group = function(behavior) {
        return function(obj, iteratee, context) {
            var result = {};
            iteratee = cb(iteratee, context);
            _.each(obj, function(value, index) {
                var key = iteratee(value, index, obj);
                behavior(result, value, key);
            });
            return result;
        };
    };
    _.groupBy = group(function(result, value, key) {
        if (_.has(result, key)) result[key].push(value); else result[key] = [ value ];
    });
    _.indexBy = group(function(result, value, key) {
        result[key] = value;
    });
    _.countBy = group(function(result, value, key) {
        if (_.has(result, key)) result[key]++; else result[key] = 1;
    });
    _.toArray = function(obj) {
        if (!obj) return [];
        if (_.isArray(obj)) return slice.call(obj);
        if (isArrayLike(obj)) return _.map(obj, _.identity);
        return _.values(obj);
    };
    _.size = function(obj) {
        if (obj == null) return 0;
        return isArrayLike(obj) ? obj.length : _.keys(obj).length;
    };
    _.partition = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var pass = [], fail = [];
        _.each(obj, function(value, key, obj) {
            (predicate(value, key, obj) ? pass : fail).push(value);
        });
        return [ pass, fail ];
    };
    _.first = _.head = _.take = function(array, n, guard) {
        if (array == null) return void 0;
        if (n == null || guard) return array[0];
        return _.initial(array, array.length - n);
    };
    _.initial = function(array, n, guard) {
        return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
    };
    _.last = function(array, n, guard) {
        if (array == null) return void 0;
        if (n == null || guard) return array[array.length - 1];
        return _.rest(array, Math.max(0, array.length - n));
    };
    _.rest = _.tail = _.drop = function(array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n);
    };
    _.compact = function(array) {
        return _.filter(array, _.identity);
    };
    var flatten = function(input, shallow, strict, startIndex) {
        var output = [], idx = 0;
        for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
            var value = input[i];
            if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
                if (!shallow) value = flatten(value, shallow, strict);
                var j = 0, len = value.length;
                output.length += len;
                while (j < len) {
                    output[idx++] = value[j++];
                }
            } else if (!strict) {
                output[idx++] = value;
            }
        }
        return output;
    };
    _.flatten = function(array, shallow) {
        return flatten(array, shallow, false);
    };
    _.without = function(array) {
        return _.difference(array, slice.call(arguments, 1));
    };
    _.uniq = _.unique = function(array, isSorted, iteratee, context) {
        if (!_.isBoolean(isSorted)) {
            context = iteratee;
            iteratee = isSorted;
            isSorted = false;
        }
        if (iteratee != null) iteratee = cb(iteratee, context);
        var result = [];
        var seen = [];
        for (var i = 0, length = getLength(array); i < length; i++) {
            var value = array[i], computed = iteratee ? iteratee(value, i, array) : value;
            if (isSorted) {
                if (!i || seen !== computed) result.push(value);
                seen = computed;
            } else if (iteratee) {
                if (!_.contains(seen, computed)) {
                    seen.push(computed);
                    result.push(value);
                }
            } else if (!_.contains(result, value)) {
                result.push(value);
            }
        }
        return result;
    };
    _.union = function() {
        return _.uniq(flatten(arguments, true, true));
    };
    _.intersection = function(array) {
        var result = [];
        var argsLength = arguments.length;
        for (var i = 0, length = getLength(array); i < length; i++) {
            var item = array[i];
            if (_.contains(result, item)) continue;
            for (var j = 1; j < argsLength; j++) {
                if (!_.contains(arguments[j], item)) break;
            }
            if (j === argsLength) result.push(item);
        }
        return result;
    };
    _.difference = function(array) {
        var rest = flatten(arguments, true, true, 1);
        return _.filter(array, function(value) {
            return !_.contains(rest, value);
        });
    };
    _.zip = function() {
        return _.unzip(arguments);
    };
    _.unzip = function(array) {
        var length = array && _.max(array, getLength).length || 0;
        var result = Array(length);
        for (var index = 0; index < length; index++) {
            result[index] = _.pluck(array, index);
        }
        return result;
    };
    _.object = function(list, values) {
        var result = {};
        for (var i = 0, length = getLength(list); i < length; i++) {
            if (values) {
                result[list[i]] = values[i];
            } else {
                result[list[i][0]] = list[i][1];
            }
        }
        return result;
    };
    function createPredicateIndexFinder(dir) {
        return function(array, predicate, context) {
            predicate = cb(predicate, context);
            var length = getLength(array);
            var index = dir > 0 ? 0 : length - 1;
            for (;index >= 0 && index < length; index += dir) {
                if (predicate(array[index], index, array)) return index;
            }
            return -1;
        };
    }
    _.findIndex = createPredicateIndexFinder(1);
    _.findLastIndex = createPredicateIndexFinder(-1);
    _.sortedIndex = function(array, obj, iteratee, context) {
        iteratee = cb(iteratee, context, 1);
        var value = iteratee(obj);
        var low = 0, high = getLength(array);
        while (low < high) {
            var mid = Math.floor((low + high) / 2);
            if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
        }
        return low;
    };
    function createIndexFinder(dir, predicateFind, sortedIndex) {
        return function(array, item, idx) {
            var i = 0, length = getLength(array);
            if (typeof idx == "number") {
                if (dir > 0) {
                    i = idx >= 0 ? idx : Math.max(idx + length, i);
                } else {
                    length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
                }
            } else if (sortedIndex && idx && length) {
                idx = sortedIndex(array, item);
                return array[idx] === item ? idx : -1;
            }
            if (item !== item) {
                idx = predicateFind(slice.call(array, i, length), _.isNaN);
                return idx >= 0 ? idx + i : -1;
            }
            for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
                if (array[idx] === item) return idx;
            }
            return -1;
        };
    }
    _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
    _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
    _.range = function(start, stop, step) {
        if (stop == null) {
            stop = start || 0;
            start = 0;
        }
        step = step || 1;
        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var range = Array(length);
        for (var idx = 0; idx < length; idx++, start += step) {
            range[idx] = start;
        }
        return range;
    };
    var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
        if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
        var self = baseCreate(sourceFunc.prototype);
        var result = sourceFunc.apply(self, args);
        if (_.isObject(result)) return result;
        return self;
    };
    _.bind = function(func, context) {
        if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func)) throw new TypeError("Bind must be called on a function");
        var args = slice.call(arguments, 2);
        var bound = function() {
            return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
        };
        return bound;
    };
    _.partial = function(func) {
        var boundArgs = slice.call(arguments, 1);
        var bound = function() {
            var position = 0, length = boundArgs.length;
            var args = Array(length);
            for (var i = 0; i < length; i++) {
                args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
            }
            while (position < arguments.length) args.push(arguments[position++]);
            return executeBound(func, bound, this, this, args);
        };
        return bound;
    };
    _.bindAll = function(obj) {
        var i, length = arguments.length, key;
        if (length <= 1) throw new Error("bindAll must be passed function names");
        for (i = 1; i < length; i++) {
            key = arguments[i];
            obj[key] = _.bind(obj[key], obj);
        }
        return obj;
    };
    _.memoize = function(func, hasher) {
        var memoize = function(key) {
            var cache = memoize.cache;
            var address = "" + (hasher ? hasher.apply(this, arguments) : key);
            if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
            return cache[address];
        };
        memoize.cache = {};
        return memoize;
    };
    _.delay = function(func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function() {
            return func.apply(null, args);
        }, wait);
    };
    _.defer = _.partial(_.delay, _, 1);
    _.throttle = function(func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        if (!options) options = {};
        var later = function() {
            previous = options.leading === false ? 0 : _.now();
            timeout = null;
            result = func.apply(context, args);
            if (!timeout) context = args = null;
        };
        return function() {
            var now = _.now();
            if (!previous && options.leading === false) previous = now;
            var remaining = wait - (now - previous);
            context = this;
            args = arguments;
            if (remaining <= 0 || remaining > wait) {
                if (timeout) {
                    clearTimeout(timeout);
                    timeout = null;
                }
                previous = now;
                result = func.apply(context, args);
                if (!timeout) context = args = null;
            } else if (!timeout && options.trailing !== false) {
                timeout = setTimeout(later, remaining);
            }
            return result;
        };
    };
    _.debounce = function(func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        var later = function() {
            var last = _.now() - timestamp;
            if (last < wait && last >= 0) {
                timeout = setTimeout(later, wait - last);
            } else {
                timeout = null;
                if (!immediate) {
                    result = func.apply(context, args);
                    if (!timeout) context = args = null;
                }
            }
        };
        return function() {
            context = this;
            args = arguments;
            timestamp = _.now();
            var callNow = immediate && !timeout;
            if (!timeout) timeout = setTimeout(later, wait);
            if (callNow) {
                result = func.apply(context, args);
                context = args = null;
            }
            return result;
        };
    };
    _.wrap = function(func, wrapper) {
        return _.partial(wrapper, func);
    };
    _.negate = function(predicate) {
        return function() {
            return !predicate.apply(this, arguments);
        };
    };
    _.compose = function() {
        var args = arguments;
        var start = args.length - 1;
        return function() {
            var i = start;
            var result = args[start].apply(this, arguments);
            while (i--) result = args[i].call(this, result);
            return result;
        };
    };
    _.after = function(times, func) {
        return function() {
            if (--times < 1) {
                return func.apply(this, arguments);
            }
        };
    };
    _.before = function(times, func) {
        var memo;
        return function() {
            if (--times > 0) {
                memo = func.apply(this, arguments);
            }
            if (times <= 1) func = null;
            return memo;
        };
    };
    _.once = _.partial(_.before, 2);
    var hasEnumBug = !{
        toString: null
    }.propertyIsEnumerable("toString");
    var nonEnumerableProps = [ "valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString" ];
    function collectNonEnumProps(obj, keys) {
        var nonEnumIdx = nonEnumerableProps.length;
        var constructor = obj.constructor;
        var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;
        var prop = "constructor";
        if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);
        while (nonEnumIdx--) {
            prop = nonEnumerableProps[nonEnumIdx];
            if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
                keys.push(prop);
            }
        }
    }
    _.keys = function(obj) {
        if (!_.isObject(obj)) return [];
        if (nativeKeys) return nativeKeys(obj);
        var keys = [];
        for (var key in obj) if (_.has(obj, key)) keys.push(key);
        if (hasEnumBug) collectNonEnumProps(obj, keys);
        return keys;
    };
    _.allKeys = function(obj) {
        if (!_.isObject(obj)) return [];
        var keys = [];
        for (var key in obj) keys.push(key);
        if (hasEnumBug) collectNonEnumProps(obj, keys);
        return keys;
    };
    _.values = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = Array(length);
        for (var i = 0; i < length; i++) {
            values[i] = obj[keys[i]];
        }
        return values;
    };
    _.mapObject = function(obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        var keys = _.keys(obj), length = keys.length, results = {}, currentKey;
        for (var index = 0; index < length; index++) {
            currentKey = keys[index];
            results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
    };
    _.pairs = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = Array(length);
        for (var i = 0; i < length; i++) {
            pairs[i] = [ keys[i], obj[keys[i]] ];
        }
        return pairs;
    };
    _.invert = function(obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
            result[obj[keys[i]]] = keys[i];
        }
        return result;
    };
    _.functions = _.methods = function(obj) {
        var names = [];
        for (var key in obj) {
            if (_.isFunction(obj[key])) names.push(key);
        }
        return names.sort();
    };
    _.extend = createAssigner(_.allKeys);
    _.extendOwn = _.assign = createAssigner(_.keys);
    _.findKey = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = _.keys(obj), key;
        for (var i = 0, length = keys.length; i < length; i++) {
            key = keys[i];
            if (predicate(obj[key], key, obj)) return key;
        }
    };
    _.pick = function(object, oiteratee, context) {
        var result = {}, obj = object, iteratee, keys;
        if (obj == null) return result;
        if (_.isFunction(oiteratee)) {
            keys = _.allKeys(obj);
            iteratee = optimizeCb(oiteratee, context);
        } else {
            keys = flatten(arguments, false, false, 1);
            iteratee = function(value, key, obj) {
                return key in obj;
            };
            obj = Object(obj);
        }
        for (var i = 0, length = keys.length; i < length; i++) {
            var key = keys[i];
            var value = obj[key];
            if (iteratee(value, key, obj)) result[key] = value;
        }
        return result;
    };
    _.omit = function(obj, iteratee, context) {
        if (_.isFunction(iteratee)) {
            iteratee = _.negate(iteratee);
        } else {
            var keys = _.map(flatten(arguments, false, false, 1), String);
            iteratee = function(value, key) {
                return !_.contains(keys, key);
            };
        }
        return _.pick(obj, iteratee, context);
    };
    _.defaults = createAssigner(_.allKeys, true);
    _.create = function(prototype, props) {
        var result = baseCreate(prototype);
        if (props) _.extendOwn(result, props);
        return result;
    };
    _.clone = function(obj) {
        if (!_.isObject(obj)) return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
    };
    _.tap = function(obj, interceptor) {
        interceptor(obj);
        return obj;
    };
    _.isMatch = function(object, attrs) {
        var keys = _.keys(attrs), length = keys.length;
        if (object == null) return !length;
        var obj = Object(object);
        for (var i = 0; i < length; i++) {
            var key = keys[i];
            if (attrs[key] !== obj[key] || !(key in obj)) return false;
        }
        return true;
    };
    var eq = function(a, b, aStack, bStack) {
        if (a === b) return a !== 0 || 1 / a === 1 / b;
        if (a == null || b == null) return a === b;
        if (a instanceof _) a = a._wrapped;
        if (b instanceof _) b = b._wrapped;
        var className = toString.call(a);
        if (className !== toString.call(b)) return false;
        switch (className) {
          case "[object RegExp]":
          case "[object String]":
            return "" + a === "" + b;

          case "[object Number]":
            if (+a !== +a) return +b !== +b;
            return +a === 0 ? 1 / +a === 1 / b : +a === +b;

          case "[object Date]":
          case "[object Boolean]":
            return +a === +b;
        }
        var areArrays = className === "[object Array]";
        if (!areArrays) {
            if (typeof a != "object" || typeof b != "object") return false;
            var aCtor = a.constructor, bCtor = b.constructor;
            if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
                return false;
            }
        }
        aStack = aStack || [];
        bStack = bStack || [];
        var length = aStack.length;
        while (length--) {
            if (aStack[length] === a) return bStack[length] === b;
        }
        aStack.push(a);
        bStack.push(b);
        if (areArrays) {
            length = a.length;
            if (length !== b.length) return false;
            while (length--) {
                if (!eq(a[length], b[length], aStack, bStack)) return false;
            }
        } else {
            var keys = _.keys(a), key;
            length = keys.length;
            if (_.keys(b).length !== length) return false;
            while (length--) {
                key = keys[length];
                if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
            }
        }
        aStack.pop();
        bStack.pop();
        return true;
    };
    _.isEqual = function(a, b) {
        return eq(a, b);
    };
    _.isEmpty = function(obj) {
        if (obj == null) return true;
        if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
        return _.keys(obj).length === 0;
    };
    _.isElement = function(obj) {
        return !!(obj && obj.nodeType === 1);
    };
    _.isArray = nativeIsArray || function(obj) {
        return toString.call(obj) === "[object Array]";
    };
    _.isObject = function(obj) {
        var type = typeof obj;
        return type === "function" || type === "object" && !!obj;
    };
    _.each([ "Arguments", "Function", "String", "Number", "Date", "RegExp", "Error" ], function(name) {
        _["is" + name] = function(obj) {
            return toString.call(obj) === "[object " + name + "]";
        };
    });
    if (!_.isArguments(arguments)) {
        _.isArguments = function(obj) {
            return _.has(obj, "callee");
        };
    }
    if (typeof /./ != "function" && typeof Int8Array != "object") {
        _.isFunction = function(obj) {
            return typeof obj == "function" || false;
        };
    }
    _.isFinite = function(obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
    };
    _.isNaN = function(obj) {
        return _.isNumber(obj) && obj !== +obj;
    };
    _.isBoolean = function(obj) {
        return obj === true || obj === false || toString.call(obj) === "[object Boolean]";
    };
    _.isNull = function(obj) {
        return obj === null;
    };
    _.isUndefined = function(obj) {
        return obj === void 0;
    };
    _.has = function(obj, key) {
        return obj != null && hasOwnProperty.call(obj, key);
    };
    _.noConflict = function() {
        root._ = previousUnderscore;
        return this;
    };
    _.identity = function(value) {
        return value;
    };
    _.constant = function(value) {
        return function() {
            return value;
        };
    };
    _.noop = function() {};
    _.property = property;
    _.propertyOf = function(obj) {
        return obj == null ? function() {} : function(key) {
            return obj[key];
        };
    };
    _.matcher = _.matches = function(attrs) {
        attrs = _.extendOwn({}, attrs);
        return function(obj) {
            return _.isMatch(obj, attrs);
        };
    };
    _.times = function(n, iteratee, context) {
        var accum = Array(Math.max(0, n));
        iteratee = optimizeCb(iteratee, context, 1);
        for (var i = 0; i < n; i++) accum[i] = iteratee(i);
        return accum;
    };
    _.random = function(min, max) {
        if (max == null) {
            max = min;
            min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
    };
    _.now = Date.now || function() {
        return new Date().getTime();
    };
    var escapeMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#x27;",
        "`": "&#x60;"
    };
    var unescapeMap = _.invert(escapeMap);
    var createEscaper = function(map) {
        var escaper = function(match) {
            return map[match];
        };
        var source = "(?:" + _.keys(map).join("|") + ")";
        var testRegexp = RegExp(source);
        var replaceRegexp = RegExp(source, "g");
        return function(string) {
            string = string == null ? "" : "" + string;
            return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
        };
    };
    _.escape = createEscaper(escapeMap);
    _.unescape = createEscaper(unescapeMap);
    _.result = function(object, property, fallback) {
        var value = object == null ? void 0 : object[property];
        if (value === void 0) {
            value = fallback;
        }
        return _.isFunction(value) ? value.call(object) : value;
    };
    var idCounter = 0;
    _.uniqueId = function(prefix) {
        var id = ++idCounter + "";
        return prefix ? prefix + id : id;
    };
    _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
    };
    var noMatch = /(.)^/;
    var escapes = {
        "'": "'",
        "\\": "\\",
        "\r": "r",
        "\n": "n",
        "\u2028": "u2028",
        "\u2029": "u2029"
    };
    var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
    var escapeChar = function(match) {
        return "\\" + escapes[match];
    };
    _.template = function(text, settings, oldSettings) {
        if (!settings && oldSettings) settings = oldSettings;
        settings = _.defaults({}, settings, _.templateSettings);
        var matcher = RegExp([ (settings.escape || noMatch).source, (settings.interpolate || noMatch).source, (settings.evaluate || noMatch).source ].join("|") + "|$", "g");
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
            source += text.slice(index, offset).replace(escaper, escapeChar);
            index = offset + match.length;
            if (escape) {
                source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
            } else if (interpolate) {
                source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
            } else if (evaluate) {
                source += "';\n" + evaluate + "\n__p+='";
            }
            return match;
        });
        source += "';\n";
        if (!settings.variable) source = "with(obj||{}){\n" + source + "}\n";
        source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
        try {
            var render = new Function(settings.variable || "obj", "_", source);
        } catch (e) {
            e.source = source;
            throw e;
        }
        var template = function(data) {
            return render.call(this, data, _);
        };
        var argument = settings.variable || "obj";
        template.source = "function(" + argument + "){\n" + source + "}";
        return template;
    };
    _.chain = function(obj) {
        var instance = _(obj);
        instance._chain = true;
        return instance;
    };
    var result = function(instance, obj) {
        return instance._chain ? _(obj).chain() : obj;
    };
    _.mixin = function(obj) {
        _.each(_.functions(obj), function(name) {
            var func = _[name] = obj[name];
            _.prototype[name] = function() {
                var args = [ this._wrapped ];
                push.apply(args, arguments);
                return result(this, func.apply(_, args));
            };
        });
    };
    _.mixin(_);
    _.each([ "pop", "push", "reverse", "shift", "sort", "splice", "unshift" ], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
            var obj = this._wrapped;
            method.apply(obj, arguments);
            if ((name === "shift" || name === "splice") && obj.length === 0) delete obj[0];
            return result(this, obj);
        };
    });
    _.each([ "concat", "join", "slice" ], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
            return result(this, method.apply(this._wrapped, arguments));
        };
    });
    _.prototype.value = function() {
        return this._wrapped;
    };
    _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
    _.prototype.toString = function() {
        return "" + this._wrapped;
    };
    if (typeof define === "function" && define.amd) {
        define("underscore", [], function() {
            return _;
        });
    }
}).call(this);

(function(window) {
    "use strict";
    var minErrConfig = {
        objectMaxDepth: 5,
        urlErrorParamsEnabled: true
    };
    function errorHandlingConfig(config) {
        if (isObject(config)) {
            if (isDefined(config.objectMaxDepth)) {
                minErrConfig.objectMaxDepth = isValidObjectMaxDepth(config.objectMaxDepth) ? config.objectMaxDepth : NaN;
            }
            if (isDefined(config.urlErrorParamsEnabled) && isBoolean(config.urlErrorParamsEnabled)) {
                minErrConfig.urlErrorParamsEnabled = config.urlErrorParamsEnabled;
            }
        } else {
            return minErrConfig;
        }
    }
    function isValidObjectMaxDepth(maxDepth) {
        return isNumber(maxDepth) && maxDepth > 0;
    }
    function minErr(module, ErrorConstructor) {
        ErrorConstructor = ErrorConstructor || Error;
        var url = "https://errors.angularjs.org/1.8.3/";
        var regex = url.replace(".", "\\.") + "[\\s\\S]*";
        var errRegExp = new RegExp(regex, "g");
        return function() {
            var code = arguments[0], template = arguments[1], message = "[" + (module ? module + ":" : "") + code + "] ", templateArgs = sliceArgs(arguments, 2).map(function(arg) {
                return toDebugString(arg, minErrConfig.objectMaxDepth);
            }), paramPrefix, i;
            message += template.replace(/\{\d+\}/g, function(match) {
                var index = +match.slice(1, -1);
                if (index < templateArgs.length) {
                    return templateArgs[index].replace(errRegExp, "");
                }
                return match;
            });
            message += "\n" + url + (module ? module + "/" : "") + code;
            if (minErrConfig.urlErrorParamsEnabled) {
                for (i = 0, paramPrefix = "?"; i < templateArgs.length; i++, paramPrefix = "&") {
                    message += paramPrefix + "p" + i + "=" + encodeURIComponent(templateArgs[i]);
                }
            }
            return new ErrorConstructor(message);
        };
    }
    var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;
    var VALIDITY_STATE_PROPERTY = "validity";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var lowercase = function(string) {
        return isString(string) ? string.toLowerCase() : string;
    };
    var uppercase = function(string) {
        return isString(string) ? string.toUpperCase() : string;
    };
    var msie, jqLite, jQuery, slice = [].slice, splice = [].splice, push = [].push, toString = Object.prototype.toString, getPrototypeOf = Object.getPrototypeOf, ngMinErr = minErr("ng"), angular = window.angular || (window.angular = {}), angularModule, uid = 0;
    msie = window.document.documentMode;
    function isArrayLike(obj) {
        if (obj == null || isWindow(obj)) return false;
        if (isArray(obj) || isString(obj) || jqLite && obj instanceof jqLite) return true;
        var length = "length" in Object(obj) && obj.length;
        return isNumber(length) && (length >= 0 && length - 1 in obj || typeof obj.item === "function");
    }
    function forEach(obj, iterator, context) {
        var key, length;
        if (obj) {
            if (isFunction(obj)) {
                for (key in obj) {
                    if (key !== "prototype" && key !== "length" && key !== "name" && obj.hasOwnProperty(key)) {
                        iterator.call(context, obj[key], key, obj);
                    }
                }
            } else if (isArray(obj) || isArrayLike(obj)) {
                var isPrimitive = typeof obj !== "object";
                for (key = 0, length = obj.length; key < length; key++) {
                    if (isPrimitive || key in obj) {
                        iterator.call(context, obj[key], key, obj);
                    }
                }
            } else if (obj.forEach && obj.forEach !== forEach) {
                obj.forEach(iterator, context, obj);
            } else if (isBlankObject(obj)) {
                for (key in obj) {
                    iterator.call(context, obj[key], key, obj);
                }
            } else if (typeof obj.hasOwnProperty === "function") {
                for (key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        iterator.call(context, obj[key], key, obj);
                    }
                }
            } else {
                for (key in obj) {
                    if (hasOwnProperty.call(obj, key)) {
                        iterator.call(context, obj[key], key, obj);
                    }
                }
            }
        }
        return obj;
    }
    function forEachSorted(obj, iterator, context) {
        var keys = Object.keys(obj).sort();
        for (var i = 0; i < keys.length; i++) {
            iterator.call(context, obj[keys[i]], keys[i]);
        }
        return keys;
    }
    function reverseParams(iteratorFn) {
        return function(value, key) {
            iteratorFn(key, value);
        };
    }
    function nextUid() {
        return ++uid;
    }
    function setHashKey(obj, h) {
        if (h) {
            obj.$$hashKey = h;
        } else {
            delete obj.$$hashKey;
        }
    }
    function baseExtend(dst, objs, deep) {
        var h = dst.$$hashKey;
        for (var i = 0, ii = objs.length; i < ii; ++i) {
            var obj = objs[i];
            if (!isObject(obj) && !isFunction(obj)) continue;
            var keys = Object.keys(obj);
            for (var j = 0, jj = keys.length; j < jj; j++) {
                var key = keys[j];
                var src = obj[key];
                if (deep && isObject(src)) {
                    if (isDate(src)) {
                        dst[key] = new Date(src.valueOf());
                    } else if (isRegExp(src)) {
                        dst[key] = new RegExp(src);
                    } else if (src.nodeName) {
                        dst[key] = src.cloneNode(true);
                    } else if (isElement(src)) {
                        dst[key] = src.clone();
                    } else {
                        if (key !== "__proto__") {
                            if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
                            baseExtend(dst[key], [ src ], true);
                        }
                    }
                } else {
                    dst[key] = src;
                }
            }
        }
        setHashKey(dst, h);
        return dst;
    }
    function extend(dst) {
        return baseExtend(dst, slice.call(arguments, 1), false);
    }
    function merge(dst) {
        return baseExtend(dst, slice.call(arguments, 1), true);
    }
    function toInt(str) {
        return parseInt(str, 10);
    }
    var isNumberNaN = Number.isNaN || function isNumberNaN(num) {
        return num !== num;
    };
    function inherit(parent, extra) {
        return extend(Object.create(parent), extra);
    }
    function noop() {}
    noop.$inject = [];
    function identity($) {
        return $;
    }
    identity.$inject = [];
    function valueFn(value) {
        return function valueRef() {
            return value;
        };
    }
    function hasCustomToString(obj) {
        return isFunction(obj.toString) && obj.toString !== toString;
    }
    function isUndefined(value) {
        return typeof value === "undefined";
    }
    function isDefined(value) {
        return typeof value !== "undefined";
    }
    function isObject(value) {
        return value !== null && typeof value === "object";
    }
    function isBlankObject(value) {
        return value !== null && typeof value === "object" && !getPrototypeOf(value);
    }
    function isString(value) {
        return typeof value === "string";
    }
    function isNumber(value) {
        return typeof value === "number";
    }
    function isDate(value) {
        return toString.call(value) === "[object Date]";
    }
    function isArray(arr) {
        return Array.isArray(arr) || arr instanceof Array;
    }
    function isError(value) {
        var tag = toString.call(value);
        switch (tag) {
          case "[object Error]":
            return true;

          case "[object Exception]":
            return true;

          case "[object DOMException]":
            return true;

          default:
            return value instanceof Error;
        }
    }
    function isFunction(value) {
        return typeof value === "function";
    }
    function isRegExp(value) {
        return toString.call(value) === "[object RegExp]";
    }
    function isWindow(obj) {
        return obj && obj.window === obj;
    }
    function isScope(obj) {
        return obj && obj.$evalAsync && obj.$watch;
    }
    function isFile(obj) {
        return toString.call(obj) === "[object File]";
    }
    function isFormData(obj) {
        return toString.call(obj) === "[object FormData]";
    }
    function isBlob(obj) {
        return toString.call(obj) === "[object Blob]";
    }
    function isBoolean(value) {
        return typeof value === "boolean";
    }
    function isPromiseLike(obj) {
        return obj && isFunction(obj.then);
    }
    var TYPED_ARRAY_REGEXP = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/;
    function isTypedArray(value) {
        return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value));
    }
    function isArrayBuffer(obj) {
        return toString.call(obj) === "[object ArrayBuffer]";
    }
    var trim = function(value) {
        return isString(value) ? value.trim() : value;
    };
    var escapeForRegexp = function(s) {
        return s.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
    };
    function isElement(node) {
        return !!(node && (node.nodeName || node.prop && node.attr && node.find));
    }
    function makeMap(str) {
        var obj = {}, items = str.split(","), i;
        for (i = 0; i < items.length; i++) {
            obj[items[i]] = true;
        }
        return obj;
    }
    function nodeName_(element) {
        return lowercase(element.nodeName || element[0] && element[0].nodeName);
    }
    function includes(array, obj) {
        return Array.prototype.indexOf.call(array, obj) !== -1;
    }
    function arrayRemove(array, value) {
        var index = array.indexOf(value);
        if (index >= 0) {
            array.splice(index, 1);
        }
        return index;
    }
    function copy(source, destination, maxDepth) {
        var stackSource = [];
        var stackDest = [];
        maxDepth = isValidObjectMaxDepth(maxDepth) ? maxDepth : NaN;
        if (destination) {
            if (isTypedArray(destination) || isArrayBuffer(destination)) {
                throw ngMinErr("cpta", "Can't copy! TypedArray destination cannot be mutated.");
            }
            if (source === destination) {
                throw ngMinErr("cpi", "Can't copy! Source and destination are identical.");
            }
            if (isArray(destination)) {
                destination.length = 0;
            } else {
                forEach(destination, function(value, key) {
                    if (key !== "$$hashKey") {
                        delete destination[key];
                    }
                });
            }
            stackSource.push(source);
            stackDest.push(destination);
            return copyRecurse(source, destination, maxDepth);
        }
        return copyElement(source, maxDepth);
        function copyRecurse(source, destination, maxDepth) {
            maxDepth--;
            if (maxDepth < 0) {
                return "...";
            }
            var h = destination.$$hashKey;
            var key;
            if (isArray(source)) {
                for (var i = 0, ii = source.length; i < ii; i++) {
                    destination.push(copyElement(source[i], maxDepth));
                }
            } else if (isBlankObject(source)) {
                for (key in source) {
                    destination[key] = copyElement(source[key], maxDepth);
                }
            } else if (source && typeof source.hasOwnProperty === "function") {
                for (key in source) {
                    if (source.hasOwnProperty(key)) {
                        destination[key] = copyElement(source[key], maxDepth);
                    }
                }
            } else {
                for (key in source) {
                    if (hasOwnProperty.call(source, key)) {
                        destination[key] = copyElement(source[key], maxDepth);
                    }
                }
            }
            setHashKey(destination, h);
            return destination;
        }
        function copyElement(source, maxDepth) {
            if (!isObject(source)) {
                return source;
            }
            var index = stackSource.indexOf(source);
            if (index !== -1) {
                return stackDest[index];
            }
            if (isWindow(source) || isScope(source)) {
                throw ngMinErr("cpws", "Can't copy! Making copies of Window or Scope instances is not supported.");
            }
            var needsRecurse = false;
            var destination = copyType(source);
            if (destination === undefined) {
                destination = isArray(source) ? [] : Object.create(getPrototypeOf(source));
                needsRecurse = true;
            }
            stackSource.push(source);
            stackDest.push(destination);
            return needsRecurse ? copyRecurse(source, destination, maxDepth) : destination;
        }
        function copyType(source) {
            switch (toString.call(source)) {
              case "[object Int8Array]":
              case "[object Int16Array]":
              case "[object Int32Array]":
              case "[object Float32Array]":
              case "[object Float64Array]":
              case "[object Uint8Array]":
              case "[object Uint8ClampedArray]":
              case "[object Uint16Array]":
              case "[object Uint32Array]":
                return new source.constructor(copyElement(source.buffer), source.byteOffset, source.length);

              case "[object ArrayBuffer]":
                if (!source.slice) {
                    var copied = new ArrayBuffer(source.byteLength);
                    new Uint8Array(copied).set(new Uint8Array(source));
                    return copied;
                }
                return source.slice(0);

              case "[object Boolean]":
              case "[object Number]":
              case "[object String]":
              case "[object Date]":
                return new source.constructor(source.valueOf());

              case "[object RegExp]":
                var re = new RegExp(source.source, source.toString().match(/[^/]*$/)[0]);
                re.lastIndex = source.lastIndex;
                return re;

              case "[object Blob]":
                return new source.constructor([ source ], {
                    type: source.type
                });
            }
            if (isFunction(source.cloneNode)) {
                return source.cloneNode(true);
            }
        }
    }
    function simpleCompare(a, b) {
        return a === b || a !== a && b !== b;
    }
    function equals(o1, o2) {
        if (o1 === o2) return true;
        if (o1 === null || o2 === null) return false;
        if (o1 !== o1 && o2 !== o2) return true;
        var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
        if (t1 === t2 && t1 === "object") {
            if (isArray(o1)) {
                if (!isArray(o2)) return false;
                if ((length = o1.length) === o2.length) {
                    for (key = 0; key < length; key++) {
                        if (!equals(o1[key], o2[key])) return false;
                    }
                    return true;
                }
            } else if (isDate(o1)) {
                if (!isDate(o2)) return false;
                return simpleCompare(o1.getTime(), o2.getTime());
            } else if (isRegExp(o1)) {
                if (!isRegExp(o2)) return false;
                return o1.toString() === o2.toString();
            } else {
                if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
                keySet = createMap();
                for (key in o1) {
                    if (key.charAt(0) === "$" || isFunction(o1[key])) continue;
                    if (!equals(o1[key], o2[key])) return false;
                    keySet[key] = true;
                }
                for (key in o2) {
                    if (!(key in keySet) && key.charAt(0) !== "$" && isDefined(o2[key]) && !isFunction(o2[key])) return false;
                }
                return true;
            }
        }
        return false;
    }
    var csp = function() {
        if (!isDefined(csp.rules)) {
            var ngCspElement = window.document.querySelector("[ng-csp]") || window.document.querySelector("[data-ng-csp]");
            if (ngCspElement) {
                var ngCspAttribute = ngCspElement.getAttribute("ng-csp") || ngCspElement.getAttribute("data-ng-csp");
                csp.rules = {
                    noUnsafeEval: !ngCspAttribute || ngCspAttribute.indexOf("no-unsafe-eval") !== -1,
                    noInlineStyle: !ngCspAttribute || ngCspAttribute.indexOf("no-inline-style") !== -1
                };
            } else {
                csp.rules = {
                    noUnsafeEval: noUnsafeEval(),
                    noInlineStyle: false
                };
            }
        }
        return csp.rules;
        function noUnsafeEval() {
            try {
                new Function("");
                return false;
            } catch (e) {
                return true;
            }
        }
    };
    var jq = function() {
        if (isDefined(jq.name_)) return jq.name_;
        var el;
        var i, ii = ngAttrPrefixes.length, prefix, name;
        for (i = 0; i < ii; ++i) {
            prefix = ngAttrPrefixes[i];
            el = window.document.querySelector("[" + prefix.replace(":", "\\:") + "jq]");
            if (el) {
                name = el.getAttribute(prefix + "jq");
                break;
            }
        }
        return jq.name_ = name;
    };
    function concat(array1, array2, index) {
        return array1.concat(slice.call(array2, index));
    }
    function sliceArgs(args, startIndex) {
        return slice.call(args, startIndex || 0);
    }
    function bind(self, fn) {
        var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
        if (isFunction(fn) && !(fn instanceof RegExp)) {
            return curryArgs.length ? function() {
                return arguments.length ? fn.apply(self, concat(curryArgs, arguments, 0)) : fn.apply(self, curryArgs);
            } : function() {
                return arguments.length ? fn.apply(self, arguments) : fn.call(self);
            };
        } else {
            return fn;
        }
    }
    function toJsonReplacer(key, value) {
        var val = value;
        if (typeof key === "string" && key.charAt(0) === "$" && key.charAt(1) === "$") {
            val = undefined;
        } else if (isWindow(value)) {
            val = "$WINDOW";
        } else if (value && window.document === value) {
            val = "$DOCUMENT";
        } else if (isScope(value)) {
            val = "$SCOPE";
        }
        return val;
    }
    function toJson(obj, pretty) {
        if (isUndefined(obj)) return undefined;
        if (!isNumber(pretty)) {
            pretty = pretty ? 2 : null;
        }
        return JSON.stringify(obj, toJsonReplacer, pretty);
    }
    function fromJson(json) {
        return isString(json) ? JSON.parse(json) : json;
    }
    var ALL_COLONS = /:/g;
    function timezoneToOffset(timezone, fallback) {
        timezone = timezone.replace(ALL_COLONS, "");
        var requestedTimezoneOffset = Date.parse("Jan 01, 1970 00:00:00 " + timezone) / 6e4;
        return isNumberNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
    }
    function addDateMinutes(date, minutes) {
        date = new Date(date.getTime());
        date.setMinutes(date.getMinutes() + minutes);
        return date;
    }
    function convertTimezoneToLocal(date, timezone, reverse) {
        reverse = reverse ? -1 : 1;
        var dateTimezoneOffset = date.getTimezoneOffset();
        var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
        return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
    }
    function startingTag(element) {
        element = jqLite(element).clone().empty();
        var elemHtml = jqLite("<div></div>").append(element).html();
        try {
            return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) : elemHtml.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/, function(match, nodeName) {
                return "<" + lowercase(nodeName);
            });
        } catch (e) {
            return lowercase(elemHtml);
        }
    }
    function tryDecodeURIComponent(value) {
        try {
            return decodeURIComponent(value);
        } catch (e) {}
    }
    function parseKeyValue(keyValue) {
        var obj = {};
        forEach((keyValue || "").split("&"), function(keyValue) {
            var splitPoint, key, val;
            if (keyValue) {
                key = keyValue = keyValue.replace(/\+/g, "%20");
                splitPoint = keyValue.indexOf("=");
                if (splitPoint !== -1) {
                    key = keyValue.substring(0, splitPoint);
                    val = keyValue.substring(splitPoint + 1);
                }
                key = tryDecodeURIComponent(key);
                if (isDefined(key)) {
                    val = isDefined(val) ? tryDecodeURIComponent(val) : true;
                    if (!hasOwnProperty.call(obj, key)) {
                        obj[key] = val;
                    } else if (isArray(obj[key])) {
                        obj[key].push(val);
                    } else {
                        obj[key] = [ obj[key], val ];
                    }
                }
            }
        });
        return obj;
    }
    function toKeyValue(obj) {
        var parts = [];
        forEach(obj, function(value, key) {
            if (isArray(value)) {
                forEach(value, function(arrayValue) {
                    parts.push(encodeUriQuery(key, true) + (arrayValue === true ? "" : "=" + encodeUriQuery(arrayValue, true)));
                });
            } else {
                parts.push(encodeUriQuery(key, true) + (value === true ? "" : "=" + encodeUriQuery(value, true)));
            }
        });
        return parts.length ? parts.join("&") : "";
    }
    function encodeUriSegment(val) {
        return encodeUriQuery(val, true).replace(/%26/gi, "&").replace(/%3D/gi, "=").replace(/%2B/gi, "+");
    }
    function encodeUriQuery(val, pctEncodeSpaces) {
        return encodeURIComponent(val).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%3B/gi, ";").replace(/%20/g, pctEncodeSpaces ? "%20" : "+");
    }
    var ngAttrPrefixes = [ "ng-", "data-ng-", "ng:", "x-ng-" ];
    function getNgAttribute(element, ngAttr) {
        var attr, i, ii = ngAttrPrefixes.length;
        for (i = 0; i < ii; ++i) {
            attr = ngAttrPrefixes[i] + ngAttr;
            if (isString(attr = element.getAttribute(attr))) {
                return attr;
            }
        }
        return null;
    }
    function allowAutoBootstrap(document) {
        var script = document.currentScript;
        if (!script) {
            return true;
        }
        if (!(script instanceof window.HTMLScriptElement || script instanceof window.SVGScriptElement)) {
            return false;
        }
        var attributes = script.attributes;
        var srcs = [ attributes.getNamedItem("src"), attributes.getNamedItem("href"), attributes.getNamedItem("xlink:href") ];
        return srcs.every(function(src) {
            if (!src) {
                return true;
            }
            if (!src.value) {
                return false;
            }
            var link = document.createElement("a");
            link.href = src.value;
            if (document.location.origin === link.origin) {
                return true;
            }
            switch (link.protocol) {
              case "http:":
              case "https:":
              case "ftp:":
              case "blob:":
              case "file:":
              case "data:":
                return true;

              default:
                return false;
            }
        });
    }
    var isAutoBootstrapAllowed = allowAutoBootstrap(window.document);
    function angularInit(element, bootstrap) {
        var appElement, module, config = {};
        forEach(ngAttrPrefixes, function(prefix) {
            var name = prefix + "app";
            if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
                appElement = element;
                module = element.getAttribute(name);
            }
        });
        forEach(ngAttrPrefixes, function(prefix) {
            var name = prefix + "app";
            var candidate;
            if (!appElement && (candidate = element.querySelector("[" + name.replace(":", "\\:") + "]"))) {
                appElement = candidate;
                module = candidate.getAttribute(name);
            }
        });
        if (appElement) {
            if (!isAutoBootstrapAllowed) {
                window.console.error("AngularJS: disabling automatic bootstrap. <script> protocol indicates " + "an extension, document.location.href does not match.");
                return;
            }
            config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
            bootstrap(appElement, module ? [ module ] : [], config);
        }
    }
    function bootstrap(element, modules, config) {
        if (!isObject(config)) config = {};
        var defaultConfig = {
            strictDi: false
        };
        config = extend(defaultConfig, config);
        var doBootstrap = function() {
            element = jqLite(element);
            if (element.injector()) {
                var tag = element[0] === window.document ? "document" : startingTag(element);
                throw ngMinErr("btstrpd", "App already bootstrapped with this element '{0}'", tag.replace(/</, "&lt;").replace(/>/, "&gt;"));
            }
            modules = modules || [];
            modules.unshift([ "$provide", function($provide) {
                $provide.value("$rootElement", element);
            } ]);
            if (config.debugInfoEnabled) {
                modules.push([ "$compileProvider", function($compileProvider) {
                    $compileProvider.debugInfoEnabled(true);
                } ]);
            }
            modules.unshift("ng");
            var injector = createInjector(modules, config.strictDi);
            injector.invoke([ "$rootScope", "$rootElement", "$compile", "$injector", function bootstrapApply(scope, element, compile, injector) {
                scope.$apply(function() {
                    element.data("$injector", injector);
                    compile(element)(scope);
                });
            } ]);
            return injector;
        };
        var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
        var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;
        if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
            config.debugInfoEnabled = true;
            window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, "");
        }
        if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
            return doBootstrap();
        }
        window.name = window.name.replace(NG_DEFER_BOOTSTRAP, "");
        angular.resumeBootstrap = function(extraModules) {
            forEach(extraModules, function(module) {
                modules.push(module);
            });
            return doBootstrap();
        };
        if (isFunction(angular.resumeDeferredBootstrap)) {
            angular.resumeDeferredBootstrap();
        }
    }
    function reloadWithDebugInfo() {
        window.name = "NG_ENABLE_DEBUG_INFO!" + window.name;
        window.location.reload();
    }
    function getTestability(rootElement) {
        var injector = angular.element(rootElement).injector();
        if (!injector) {
            throw ngMinErr("test", "no injector found for element argument to getTestability");
        }
        return injector.get("$$testability");
    }
    var SNAKE_CASE_REGEXP = /[A-Z]/g;
    function snake_case(name, separator) {
        separator = separator || "_";
        return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
            return (pos ? separator : "") + letter.toLowerCase();
        });
    }
    var bindJQueryFired = false;
    function bindJQuery() {
        var originalCleanData;
        if (bindJQueryFired) {
            return;
        }
        var jqName = jq();
        jQuery = isUndefined(jqName) ? window.jQuery : !jqName ? undefined : window[jqName];
        if (jQuery && jQuery.fn.on) {
            jqLite = jQuery;
            extend(jQuery.fn, {
                scope: JQLitePrototype.scope,
                isolateScope: JQLitePrototype.isolateScope,
                controller: JQLitePrototype.controller,
                injector: JQLitePrototype.injector,
                inheritedData: JQLitePrototype.inheritedData
            });
        } else {
            jqLite = JQLite;
        }
        originalCleanData = jqLite.cleanData;
        jqLite.cleanData = function(elems) {
            var events;
            for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                events = (jqLite._data(elem) || {}).events;
                if (events && events.$destroy) {
                    jqLite(elem).triggerHandler("$destroy");
                }
            }
            originalCleanData(elems);
        };
        angular.element = jqLite;
        bindJQueryFired = true;
    }
    function UNSAFE_restoreLegacyJqLiteXHTMLReplacement() {
        JQLite.legacyXHTMLReplacement = true;
    }
    function assertArg(arg, name, reason) {
        if (!arg) {
            throw ngMinErr("areq", "Argument '{0}' is {1}", name || "?", reason || "required");
        }
        return arg;
    }
    function assertArgFn(arg, name, acceptArrayAnnotation) {
        if (acceptArrayAnnotation && isArray(arg)) {
            arg = arg[arg.length - 1];
        }
        assertArg(isFunction(arg), name, "not a function, got " + (arg && typeof arg === "object" ? arg.constructor.name || "Object" : typeof arg));
        return arg;
    }
    function assertNotHasOwnProperty(name, context) {
        if (name === "hasOwnProperty") {
            throw ngMinErr("badname", "hasOwnProperty is not a valid {0} name", context);
        }
    }
    function getter(obj, path, bindFnToScope) {
        if (!path) return obj;
        var keys = path.split(".");
        var key;
        var lastInstance = obj;
        var len = keys.length;
        for (var i = 0; i < len; i++) {
            key = keys[i];
            if (obj) {
                obj = (lastInstance = obj)[key];
            }
        }
        if (!bindFnToScope && isFunction(obj)) {
            return bind(lastInstance, obj);
        }
        return obj;
    }
    function getBlockNodes(nodes) {
        var node = nodes[0];
        var endNode = nodes[nodes.length - 1];
        var blockNodes;
        for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
            if (blockNodes || nodes[i] !== node) {
                if (!blockNodes) {
                    blockNodes = jqLite(slice.call(nodes, 0, i));
                }
                blockNodes.push(node);
            }
        }
        return blockNodes || nodes;
    }
    function createMap() {
        return Object.create(null);
    }
    function stringify(value) {
        if (value == null) {
            return "";
        }
        switch (typeof value) {
          case "string":
            break;

          case "number":
            value = "" + value;
            break;

          default:
            if (hasCustomToString(value) && !isArray(value) && !isDate(value)) {
                value = value.toString();
            } else {
                value = toJson(value);
            }
        }
        return value;
    }
    var NODE_TYPE_ELEMENT = 1;
    var NODE_TYPE_ATTRIBUTE = 2;
    var NODE_TYPE_TEXT = 3;
    var NODE_TYPE_COMMENT = 8;
    var NODE_TYPE_DOCUMENT = 9;
    var NODE_TYPE_DOCUMENT_FRAGMENT = 11;
    function setupModuleLoader(window) {
        var $injectorMinErr = minErr("$injector");
        var ngMinErr = minErr("ng");
        function ensure(obj, name, factory) {
            return obj[name] || (obj[name] = factory());
        }
        var angular = ensure(window, "angular", Object);
        angular.$$minErr = angular.$$minErr || minErr;
        return ensure(angular, "module", function() {
            var modules = {};
            return function module(name, requires, configFn) {
                var info = {};
                var assertNotHasOwnProperty = function(name, context) {
                    if (name === "hasOwnProperty") {
                        throw ngMinErr("badname", "hasOwnProperty is not a valid {0} name", context);
                    }
                };
                assertNotHasOwnProperty(name, "module");
                if (requires && modules.hasOwnProperty(name)) {
                    modules[name] = null;
                }
                return ensure(modules, name, function() {
                    if (!requires) {
                        throw $injectorMinErr("nomod", "Module '{0}' is not available! You either misspelled " + "the module name or forgot to load it. If registering a module ensure that you " + "specify the dependencies as the second argument.", name);
                    }
                    var invokeQueue = [];
                    var configBlocks = [];
                    var runBlocks = [];
                    var config = invokeLater("$injector", "invoke", "push", configBlocks);
                    var moduleInstance = {
                        _invokeQueue: invokeQueue,
                        _configBlocks: configBlocks,
                        _runBlocks: runBlocks,
                        info: function(value) {
                            if (isDefined(value)) {
                                if (!isObject(value)) throw ngMinErr("aobj", "Argument '{0}' must be an object", "value");
                                info = value;
                                return this;
                            }
                            return info;
                        },
                        requires: requires,
                        name: name,
                        provider: invokeLaterAndSetModuleName("$provide", "provider"),
                        factory: invokeLaterAndSetModuleName("$provide", "factory"),
                        service: invokeLaterAndSetModuleName("$provide", "service"),
                        value: invokeLater("$provide", "value"),
                        constant: invokeLater("$provide", "constant", "unshift"),
                        decorator: invokeLaterAndSetModuleName("$provide", "decorator", configBlocks),
                        animation: invokeLaterAndSetModuleName("$animateProvider", "register"),
                        filter: invokeLaterAndSetModuleName("$filterProvider", "register"),
                        controller: invokeLaterAndSetModuleName("$controllerProvider", "register"),
                        directive: invokeLaterAndSetModuleName("$compileProvider", "directive"),
                        component: invokeLaterAndSetModuleName("$compileProvider", "component"),
                        config: config,
                        run: function(block) {
                            runBlocks.push(block);
                            return this;
                        }
                    };
                    if (configFn) {
                        config(configFn);
                    }
                    return moduleInstance;
                    function invokeLater(provider, method, insertMethod, queue) {
                        if (!queue) queue = invokeQueue;
                        return function() {
                            queue[insertMethod || "push"]([ provider, method, arguments ]);
                            return moduleInstance;
                        };
                    }
                    function invokeLaterAndSetModuleName(provider, method, queue) {
                        if (!queue) queue = invokeQueue;
                        return function(recipeName, factoryFunction) {
                            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;
                            queue.push([ provider, method, arguments ]);
                            return moduleInstance;
                        };
                    }
                });
            };
        });
    }
    function shallowCopy(src, dst) {
        if (isArray(src)) {
            dst = dst || [];
            for (var i = 0, ii = src.length; i < ii; i++) {
                dst[i] = src[i];
            }
        } else if (isObject(src)) {
            dst = dst || {};
            for (var key in src) {
                if (!(key.charAt(0) === "$" && key.charAt(1) === "$")) {
                    dst[key] = src[key];
                }
            }
        }
        return dst || src;
    }
    function serializeObject(obj, maxDepth) {
        var seen = [];
        if (isValidObjectMaxDepth(maxDepth)) {
            obj = angular.copy(obj, null, maxDepth);
        }
        return JSON.stringify(obj, function(key, val) {
            val = toJsonReplacer(key, val);
            if (isObject(val)) {
                if (seen.indexOf(val) >= 0) return "...";
                seen.push(val);
            }
            return val;
        });
    }
    function toDebugString(obj, maxDepth) {
        if (typeof obj === "function") {
            return obj.toString().replace(/ \{[\s\S]*$/, "");
        } else if (isUndefined(obj)) {
            return "undefined";
        } else if (typeof obj !== "string") {
            return serializeObject(obj, maxDepth);
        }
        return obj;
    }
    var version = {
        full: "1.8.3",
        major: 1,
        minor: 8,
        dot: 3,
        codeName: "ultimate-farewell"
    };
    function publishExternalAPI(angular) {
        extend(angular, {
            errorHandlingConfig: errorHandlingConfig,
            bootstrap: bootstrap,
            copy: copy,
            extend: extend,
            merge: merge,
            equals: equals,
            element: jqLite,
            forEach: forEach,
            injector: createInjector,
            noop: noop,
            bind: bind,
            toJson: toJson,
            fromJson: fromJson,
            identity: identity,
            isUndefined: isUndefined,
            isDefined: isDefined,
            isString: isString,
            isFunction: isFunction,
            isObject: isObject,
            isNumber: isNumber,
            isElement: isElement,
            isArray: isArray,
            version: version,
            isDate: isDate,
            callbacks: {
                $$counter: 0
            },
            getTestability: getTestability,
            reloadWithDebugInfo: reloadWithDebugInfo,
            UNSAFE_restoreLegacyJqLiteXHTMLReplacement: UNSAFE_restoreLegacyJqLiteXHTMLReplacement,
            $$minErr: minErr,
            $$csp: csp,
            $$encodeUriSegment: encodeUriSegment,
            $$encodeUriQuery: encodeUriQuery,
            $$lowercase: lowercase,
            $$stringify: stringify,
            $$uppercase: uppercase
        });
        angularModule = setupModuleLoader(window);
        angularModule("ng", [ "ngLocale" ], [ "$provide", function ngModule($provide) {
            $provide.provider({
                $$sanitizeUri: $$SanitizeUriProvider
            });
            $provide.provider("$compile", $CompileProvider).directive({
                a: htmlAnchorDirective,
                input: inputDirective,
                textarea: inputDirective,
                form: formDirective,
                script: scriptDirective,
                select: selectDirective,
                option: optionDirective,
                ngBind: ngBindDirective,
                ngBindHtml: ngBindHtmlDirective,
                ngBindTemplate: ngBindTemplateDirective,
                ngClass: ngClassDirective,
                ngClassEven: ngClassEvenDirective,
                ngClassOdd: ngClassOddDirective,
                ngCloak: ngCloakDirective,
                ngController: ngControllerDirective,
                ngForm: ngFormDirective,
                ngHide: ngHideDirective,
                ngIf: ngIfDirective,
                ngInclude: ngIncludeDirective,
                ngInit: ngInitDirective,
                ngNonBindable: ngNonBindableDirective,
                ngPluralize: ngPluralizeDirective,
                ngRef: ngRefDirective,
                ngRepeat: ngRepeatDirective,
                ngShow: ngShowDirective,
                ngStyle: ngStyleDirective,
                ngSwitch: ngSwitchDirective,
                ngSwitchWhen: ngSwitchWhenDirective,
                ngSwitchDefault: ngSwitchDefaultDirective,
                ngOptions: ngOptionsDirective,
                ngTransclude: ngTranscludeDirective,
                ngModel: ngModelDirective,
                ngList: ngListDirective,
                ngChange: ngChangeDirective,
                pattern: patternDirective,
                ngPattern: patternDirective,
                required: requiredDirective,
                ngRequired: requiredDirective,
                minlength: minlengthDirective,
                ngMinlength: minlengthDirective,
                maxlength: maxlengthDirective,
                ngMaxlength: maxlengthDirective,
                ngValue: ngValueDirective,
                ngModelOptions: ngModelOptionsDirective
            }).directive({
                ngInclude: ngIncludeFillContentDirective,
                input: hiddenInputBrowserCacheDirective
            }).directive(ngAttributeAliasDirectives).directive(ngEventDirectives);
            $provide.provider({
                $anchorScroll: $AnchorScrollProvider,
                $animate: $AnimateProvider,
                $animateCss: $CoreAnimateCssProvider,
                $$animateJs: $$CoreAnimateJsProvider,
                $$animateQueue: $$CoreAnimateQueueProvider,
                $$AnimateRunner: $$AnimateRunnerFactoryProvider,
                $$animateAsyncRun: $$AnimateAsyncRunFactoryProvider,
                $browser: $BrowserProvider,
                $cacheFactory: $CacheFactoryProvider,
                $controller: $ControllerProvider,
                $document: $DocumentProvider,
                $$isDocumentHidden: $$IsDocumentHiddenProvider,
                $exceptionHandler: $ExceptionHandlerProvider,
                $filter: $FilterProvider,
                $$forceReflow: $$ForceReflowProvider,
                $interpolate: $InterpolateProvider,
                $interval: $IntervalProvider,
                $$intervalFactory: $$IntervalFactoryProvider,
                $http: $HttpProvider,
                $httpParamSerializer: $HttpParamSerializerProvider,
                $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
                $httpBackend: $HttpBackendProvider,
                $xhrFactory: $xhrFactoryProvider,
                $jsonpCallbacks: $jsonpCallbacksProvider,
                $location: $LocationProvider,
                $log: $LogProvider,
                $parse: $ParseProvider,
                $rootScope: $RootScopeProvider,
                $q: $QProvider,
                $$q: $$QProvider,
                $sce: $SceProvider,
                $sceDelegate: $SceDelegateProvider,
                $sniffer: $SnifferProvider,
                $$taskTrackerFactory: $$TaskTrackerFactoryProvider,
                $templateCache: $TemplateCacheProvider,
                $templateRequest: $TemplateRequestProvider,
                $$testability: $$TestabilityProvider,
                $timeout: $TimeoutProvider,
                $window: $WindowProvider,
                $$rAF: $$RAFProvider,
                $$jqLite: $$jqLiteProvider,
                $$Map: $$MapProvider,
                $$cookieReader: $$CookieReaderProvider
            });
        } ]).info({
            angularVersion: "1.8.3"
        });
    }
    JQLite.expando = "ng339";
    var jqCache = JQLite.cache = {}, jqId = 1;
    JQLite._data = function(node) {
        return this.cache[node[this.expando]] || {};
    };
    function jqNextId() {
        return ++jqId;
    }
    var DASH_LOWERCASE_REGEXP = /-([a-z])/g;
    var MS_HACK_REGEXP = /^-ms-/;
    var MOUSE_EVENT_MAP = {
        mouseleave: "mouseout",
        mouseenter: "mouseover"
    };
    var jqLiteMinErr = minErr("jqLite");
    function cssKebabToCamel(name) {
        return kebabToCamel(name.replace(MS_HACK_REGEXP, "ms-"));
    }
    function fnCamelCaseReplace(all, letter) {
        return letter.toUpperCase();
    }
    function kebabToCamel(name) {
        return name.replace(DASH_LOWERCASE_REGEXP, fnCamelCaseReplace);
    }
    var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
    var HTML_REGEXP = /<|&#?\w+;/;
    var TAG_NAME_REGEXP = /<([\w:-]+)/;
    var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;
    var wrapMap = {
        thead: [ "table" ],
        col: [ "colgroup", "table" ],
        tr: [ "tbody", "table" ],
        td: [ "tr", "tbody", "table" ]
    };
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    var wrapMapIE9 = {
        option: [ 1, '<select multiple="multiple">', "</select>" ],
        _default: [ 0, "", "" ]
    };
    for (var key in wrapMap) {
        var wrapMapValueClosing = wrapMap[key];
        var wrapMapValue = wrapMapValueClosing.slice().reverse();
        wrapMapIE9[key] = [ wrapMapValue.length, "<" + wrapMapValue.join("><") + ">", "</" + wrapMapValueClosing.join("></") + ">" ];
    }
    wrapMapIE9.optgroup = wrapMapIE9.option;
    function jqLiteIsTextNode(html) {
        return !HTML_REGEXP.test(html);
    }
    function jqLiteAcceptsData(node) {
        var nodeType = node.nodeType;
        return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
    }
    function jqLiteHasData(node) {
        for (var key in jqCache[node.ng339]) {
            return true;
        }
        return false;
    }
    function jqLiteBuildFragment(html, context) {
        var tmp, tag, wrap, finalHtml, fragment = context.createDocumentFragment(), nodes = [], i;
        if (jqLiteIsTextNode(html)) {
            nodes.push(context.createTextNode(html));
        } else {
            tmp = fragment.appendChild(context.createElement("div"));
            tag = (TAG_NAME_REGEXP.exec(html) || [ "", "" ])[1].toLowerCase();
            finalHtml = JQLite.legacyXHTMLReplacement ? html.replace(XHTML_TAG_REGEXP, "<$1></$2>") : html;
            if (msie < 10) {
                wrap = wrapMapIE9[tag] || wrapMapIE9._default;
                tmp.innerHTML = wrap[1] + finalHtml + wrap[2];
                i = wrap[0];
                while (i--) {
                    tmp = tmp.firstChild;
                }
            } else {
                wrap = wrapMap[tag] || [];
                i = wrap.length;
                while (--i > -1) {
                    tmp.appendChild(window.document.createElement(wrap[i]));
                    tmp = tmp.firstChild;
                }
                tmp.innerHTML = finalHtml;
            }
            nodes = concat(nodes, tmp.childNodes);
            tmp = fragment.firstChild;
            tmp.textContent = "";
        }
        fragment.textContent = "";
        fragment.innerHTML = "";
        forEach(nodes, function(node) {
            fragment.appendChild(node);
        });
        return fragment;
    }
    function jqLiteParseHTML(html, context) {
        context = context || window.document;
        var parsed;
        if (parsed = SINGLE_TAG_REGEXP.exec(html)) {
            return [ context.createElement(parsed[1]) ];
        }
        if (parsed = jqLiteBuildFragment(html, context)) {
            return parsed.childNodes;
        }
        return [];
    }
    function jqLiteWrapNode(node, wrapper) {
        var parent = node.parentNode;
        if (parent) {
            parent.replaceChild(wrapper, node);
        }
        wrapper.appendChild(node);
    }
    var jqLiteContains = window.Node.prototype.contains || function(arg) {
        return !!(this.compareDocumentPosition(arg) & 16);
    };
    function JQLite(element) {
        if (element instanceof JQLite) {
            return element;
        }
        var argIsString;
        if (isString(element)) {
            element = trim(element);
            argIsString = true;
        }
        if (!(this instanceof JQLite)) {
            if (argIsString && element.charAt(0) !== "<") {
                throw jqLiteMinErr("nosel", "Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");
            }
            return new JQLite(element);
        }
        if (argIsString) {
            jqLiteAddNodes(this, jqLiteParseHTML(element));
        } else if (isFunction(element)) {
            jqLiteReady(element);
        } else {
            jqLiteAddNodes(this, element);
        }
    }
    function jqLiteClone(element) {
        return element.cloneNode(true);
    }
    function jqLiteDealoc(element, onlyDescendants) {
        if (!onlyDescendants && jqLiteAcceptsData(element)) jqLite.cleanData([ element ]);
        if (element.querySelectorAll) {
            jqLite.cleanData(element.querySelectorAll("*"));
        }
    }
    function isEmptyObject(obj) {
        var name;
        for (name in obj) {
            return false;
        }
        return true;
    }
    function removeIfEmptyData(element) {
        var expandoId = element.ng339;
        var expandoStore = expandoId && jqCache[expandoId];
        var events = expandoStore && expandoStore.events;
        var data = expandoStore && expandoStore.data;
        if ((!data || isEmptyObject(data)) && (!events || isEmptyObject(events))) {
            delete jqCache[expandoId];
            element.ng339 = undefined;
        }
    }
    function jqLiteOff(element, type, fn, unsupported) {
        if (isDefined(unsupported)) throw jqLiteMinErr("offargs", "jqLite#off() does not support the `selector` argument");
        var expandoStore = jqLiteExpandoStore(element);
        var events = expandoStore && expandoStore.events;
        var handle = expandoStore && expandoStore.handle;
        if (!handle) return;
        if (!type) {
            for (type in events) {
                if (type !== "$destroy") {
                    element.removeEventListener(type, handle);
                }
                delete events[type];
            }
        } else {
            var removeHandler = function(type) {
                var listenerFns = events[type];
                if (isDefined(fn)) {
                    arrayRemove(listenerFns || [], fn);
                }
                if (!(isDefined(fn) && listenerFns && listenerFns.length > 0)) {
                    element.removeEventListener(type, handle);
                    delete events[type];
                }
            };
            forEach(type.split(" "), function(type) {
                removeHandler(type);
                if (MOUSE_EVENT_MAP[type]) {
                    removeHandler(MOUSE_EVENT_MAP[type]);
                }
            });
        }
        removeIfEmptyData(element);
    }
    function jqLiteRemoveData(element, name) {
        var expandoId = element.ng339;
        var expandoStore = expandoId && jqCache[expandoId];
        if (expandoStore) {
            if (name) {
                delete expandoStore.data[name];
            } else {
                expandoStore.data = {};
            }
            removeIfEmptyData(element);
        }
    }
    function jqLiteExpandoStore(element, createIfNecessary) {
        var expandoId = element.ng339, expandoStore = expandoId && jqCache[expandoId];
        if (createIfNecessary && !expandoStore) {
            element.ng339 = expandoId = jqNextId();
            expandoStore = jqCache[expandoId] = {
                events: {},
                data: {},
                handle: undefined
            };
        }
        return expandoStore;
    }
    function jqLiteData(element, key, value) {
        if (jqLiteAcceptsData(element)) {
            var prop;
            var isSimpleSetter = isDefined(value);
            var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
            var massGetter = !key;
            var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
            var data = expandoStore && expandoStore.data;
            if (isSimpleSetter) {
                data[kebabToCamel(key)] = value;
            } else {
                if (massGetter) {
                    return data;
                } else {
                    if (isSimpleGetter) {
                        return data && data[kebabToCamel(key)];
                    } else {
                        for (prop in key) {
                            data[kebabToCamel(prop)] = key[prop];
                        }
                    }
                }
            }
        }
    }
    function jqLiteHasClass(element, selector) {
        if (!element.getAttribute) return false;
        return (" " + (element.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").indexOf(" " + selector + " ") > -1;
    }
    function jqLiteRemoveClass(element, cssClasses) {
        if (cssClasses && element.setAttribute) {
            var existingClasses = (" " + (element.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ");
            var newClasses = existingClasses;
            forEach(cssClasses.split(" "), function(cssClass) {
                cssClass = trim(cssClass);
                newClasses = newClasses.replace(" " + cssClass + " ", " ");
            });
            if (newClasses !== existingClasses) {
                element.setAttribute("class", trim(newClasses));
            }
        }
    }
    function jqLiteAddClass(element, cssClasses) {
        if (cssClasses && element.setAttribute) {
            var existingClasses = (" " + (element.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ");
            var newClasses = existingClasses;
            forEach(cssClasses.split(" "), function(cssClass) {
                cssClass = trim(cssClass);
                if (newClasses.indexOf(" " + cssClass + " ") === -1) {
                    newClasses += cssClass + " ";
                }
            });
            if (newClasses !== existingClasses) {
                element.setAttribute("class", trim(newClasses));
            }
        }
    }
    function jqLiteAddNodes(root, elements) {
        if (elements) {
            if (elements.nodeType) {
                root[root.length++] = elements;
            } else {
                var length = elements.length;
                if (typeof length === "number" && elements.window !== elements) {
                    if (length) {
                        for (var i = 0; i < length; i++) {
                            root[root.length++] = elements[i];
                        }
                    }
                } else {
                    root[root.length++] = elements;
                }
            }
        }
    }
    function jqLiteController(element, name) {
        return jqLiteInheritedData(element, "$" + (name || "ngController") + "Controller");
    }
    function jqLiteInheritedData(element, name, value) {
        if (element.nodeType === NODE_TYPE_DOCUMENT) {
            element = element.documentElement;
        }
        var names = isArray(name) ? name : [ name ];
        while (element) {
            for (var i = 0, ii = names.length; i < ii; i++) {
                if (isDefined(value = jqLite.data(element, names[i]))) return value;
            }
            element = element.parentNode || element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host;
        }
    }
    function jqLiteEmpty(element) {
        jqLiteDealoc(element, true);
        while (element.firstChild) {
            element.removeChild(element.firstChild);
        }
    }
    function jqLiteRemove(element, keepData) {
        if (!keepData) jqLiteDealoc(element);
        var parent = element.parentNode;
        if (parent) parent.removeChild(element);
    }
    function jqLiteDocumentLoaded(action, win) {
        win = win || window;
        if (win.document.readyState === "complete") {
            win.setTimeout(action);
        } else {
            jqLite(win).on("load", action);
        }
    }
    function jqLiteReady(fn) {
        function trigger() {
            window.document.removeEventListener("DOMContentLoaded", trigger);
            window.removeEventListener("load", trigger);
            fn();
        }
        if (window.document.readyState === "complete") {
            window.setTimeout(fn);
        } else {
            window.document.addEventListener("DOMContentLoaded", trigger);
            window.addEventListener("load", trigger);
        }
    }
    var JQLitePrototype = JQLite.prototype = {
        ready: jqLiteReady,
        toString: function() {
            var value = [];
            forEach(this, function(e) {
                value.push("" + e);
            });
            return "[" + value.join(", ") + "]";
        },
        eq: function(index) {
            return index >= 0 ? jqLite(this[index]) : jqLite(this[this.length + index]);
        },
        length: 0,
        push: push,
        sort: [].sort,
        splice: [].splice
    };
    var BOOLEAN_ATTR = {};
    forEach("multiple,selected,checked,disabled,readOnly,required,open".split(","), function(value) {
        BOOLEAN_ATTR[lowercase(value)] = value;
    });
    var BOOLEAN_ELEMENTS = {};
    forEach("input,select,option,textarea,button,form,details".split(","), function(value) {
        BOOLEAN_ELEMENTS[value] = true;
    });
    var ALIASED_ATTR = {
        ngMinlength: "minlength",
        ngMaxlength: "maxlength",
        ngMin: "min",
        ngMax: "max",
        ngPattern: "pattern",
        ngStep: "step"
    };
    function getBooleanAttrName(element, name) {
        var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];
        return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
    }
    function getAliasedAttrName(name) {
        return ALIASED_ATTR[name];
    }
    forEach({
        data: jqLiteData,
        removeData: jqLiteRemoveData,
        hasData: jqLiteHasData,
        cleanData: function jqLiteCleanData(nodes) {
            for (var i = 0, ii = nodes.length; i < ii; i++) {
                jqLiteRemoveData(nodes[i]);
                jqLiteOff(nodes[i]);
            }
        }
    }, function(fn, name) {
        JQLite[name] = fn;
    });
    forEach({
        data: jqLiteData,
        inheritedData: jqLiteInheritedData,
        scope: function(element) {
            return jqLite.data(element, "$scope") || jqLiteInheritedData(element.parentNode || element, [ "$isolateScope", "$scope" ]);
        },
        isolateScope: function(element) {
            return jqLite.data(element, "$isolateScope") || jqLite.data(element, "$isolateScopeNoTemplate");
        },
        controller: jqLiteController,
        injector: function(element) {
            return jqLiteInheritedData(element, "$injector");
        },
        removeAttr: function(element, name) {
            element.removeAttribute(name);
        },
        hasClass: jqLiteHasClass,
        css: function(element, name, value) {
            name = cssKebabToCamel(name);
            if (isDefined(value)) {
                element.style[name] = value;
            } else {
                return element.style[name];
            }
        },
        attr: function(element, name, value) {
            var ret;
            var nodeType = element.nodeType;
            if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT || !element.getAttribute) {
                return;
            }
            var lowercasedName = lowercase(name);
            var isBooleanAttr = BOOLEAN_ATTR[lowercasedName];
            if (isDefined(value)) {
                if (value === null || value === false && isBooleanAttr) {
                    element.removeAttribute(name);
                } else {
                    element.setAttribute(name, isBooleanAttr ? lowercasedName : value);
                }
            } else {
                ret = element.getAttribute(name);
                if (isBooleanAttr && ret !== null) {
                    ret = lowercasedName;
                }
                return ret === null ? undefined : ret;
            }
        },
        prop: function(element, name, value) {
            if (isDefined(value)) {
                element[name] = value;
            } else {
                return element[name];
            }
        },
        text: function() {
            getText.$dv = "";
            return getText;
            function getText(element, value) {
                if (isUndefined(value)) {
                    var nodeType = element.nodeType;
                    return nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT ? element.textContent : "";
                }
                element.textContent = value;
            }
        }(),
        val: function(element, value) {
            if (isUndefined(value)) {
                if (element.multiple && nodeName_(element) === "select") {
                    var result = [];
                    forEach(element.options, function(option) {
                        if (option.selected) {
                            result.push(option.value || option.text);
                        }
                    });
                    return result;
                }
                return element.value;
            }
            element.value = value;
        },
        html: function(element, value) {
            if (isUndefined(value)) {
                return element.innerHTML;
            }
            jqLiteDealoc(element, true);
            element.innerHTML = value;
        },
        empty: jqLiteEmpty
    }, function(fn, name) {
        JQLite.prototype[name] = function(arg1, arg2) {
            var i, key;
            var nodeCount = this.length;
            if (fn !== jqLiteEmpty && isUndefined(fn.length === 2 && (fn !== jqLiteHasClass && fn !== jqLiteController) ? arg1 : arg2)) {
                if (isObject(arg1)) {
                    for (i = 0; i < nodeCount; i++) {
                        if (fn === jqLiteData) {
                            fn(this[i], arg1);
                        } else {
                            for (key in arg1) {
                                fn(this[i], key, arg1[key]);
                            }
                        }
                    }
                    return this;
                } else {
                    var value = fn.$dv;
                    var jj = isUndefined(value) ? Math.min(nodeCount, 1) : nodeCount;
                    for (var j = 0; j < jj; j++) {
                        var nodeValue = fn(this[j], arg1, arg2);
                        value = value ? value + nodeValue : nodeValue;
                    }
                    return value;
                }
            } else {
                for (i = 0; i < nodeCount; i++) {
                    fn(this[i], arg1, arg2);
                }
                return this;
            }
        };
    });
    function createEventHandler(element, events) {
        var eventHandler = function(event, type) {
            event.isDefaultPrevented = function() {
                return event.defaultPrevented;
            };
            var eventFns = events[type || event.type];
            var eventFnsLength = eventFns ? eventFns.length : 0;
            if (!eventFnsLength) return;
            if (isUndefined(event.immediatePropagationStopped)) {
                var originalStopImmediatePropagation = event.stopImmediatePropagation;
                event.stopImmediatePropagation = function() {
                    event.immediatePropagationStopped = true;
                    if (event.stopPropagation) {
                        event.stopPropagation();
                    }
                    if (originalStopImmediatePropagation) {
                        originalStopImmediatePropagation.call(event);
                    }
                };
            }
            event.isImmediatePropagationStopped = function() {
                return event.immediatePropagationStopped === true;
            };
            var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper;
            if (eventFnsLength > 1) {
                eventFns = shallowCopy(eventFns);
            }
            for (var i = 0; i < eventFnsLength; i++) {
                if (!event.isImmediatePropagationStopped()) {
                    handlerWrapper(element, event, eventFns[i]);
                }
            }
        };
        eventHandler.elem = element;
        return eventHandler;
    }
    function defaultHandlerWrapper(element, event, handler) {
        handler.call(element, event);
    }
    function specialMouseHandlerWrapper(target, event, handler) {
        var related = event.relatedTarget;
        if (!related || related !== target && !jqLiteContains.call(target, related)) {
            handler.call(target, event);
        }
    }
    forEach({
        removeData: jqLiteRemoveData,
        on: function jqLiteOn(element, type, fn, unsupported) {
            if (isDefined(unsupported)) throw jqLiteMinErr("onargs", "jqLite#on() does not support the `selector` or `eventData` parameters");
            if (!jqLiteAcceptsData(element)) {
                return;
            }
            var expandoStore = jqLiteExpandoStore(element, true);
            var events = expandoStore.events;
            var handle = expandoStore.handle;
            if (!handle) {
                handle = expandoStore.handle = createEventHandler(element, events);
            }
            var types = type.indexOf(" ") >= 0 ? type.split(" ") : [ type ];
            var i = types.length;
            var addHandler = function(type, specialHandlerWrapper, noEventListener) {
                var eventFns = events[type];
                if (!eventFns) {
                    eventFns = events[type] = [];
                    eventFns.specialHandlerWrapper = specialHandlerWrapper;
                    if (type !== "$destroy" && !noEventListener) {
                        element.addEventListener(type, handle);
                    }
                }
                eventFns.push(fn);
            };
            while (i--) {
                type = types[i];
                if (MOUSE_EVENT_MAP[type]) {
                    addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper);
                    addHandler(type, undefined, true);
                } else {
                    addHandler(type);
                }
            }
        },
        off: jqLiteOff,
        one: function(element, type, fn) {
            element = jqLite(element);
            element.on(type, function onFn() {
                element.off(type, fn);
                element.off(type, onFn);
            });
            element.on(type, fn);
        },
        replaceWith: function(element, replaceNode) {
            var index, parent = element.parentNode;
            jqLiteDealoc(element);
            forEach(new JQLite(replaceNode), function(node) {
                if (index) {
                    parent.insertBefore(node, index.nextSibling);
                } else {
                    parent.replaceChild(node, element);
                }
                index = node;
            });
        },
        children: function(element) {
            var children = [];
            forEach(element.childNodes, function(element) {
                if (element.nodeType === NODE_TYPE_ELEMENT) {
                    children.push(element);
                }
            });
            return children;
        },
        contents: function(element) {
            return element.contentDocument || element.childNodes || [];
        },
        append: function(element, node) {
            var nodeType = element.nodeType;
            if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;
            node = new JQLite(node);
            for (var i = 0, ii = node.length; i < ii; i++) {
                var child = node[i];
                element.appendChild(child);
            }
        },
        prepend: function(element, node) {
            if (element.nodeType === NODE_TYPE_ELEMENT) {
                var index = element.firstChild;
                forEach(new JQLite(node), function(child) {
                    element.insertBefore(child, index);
                });
            }
        },
        wrap: function(element, wrapNode) {
            jqLiteWrapNode(element, jqLite(wrapNode).eq(0).clone()[0]);
        },
        remove: jqLiteRemove,
        detach: function(element) {
            jqLiteRemove(element, true);
        },
        after: function(element, newElement) {
            var index = element, parent = element.parentNode;
            if (parent) {
                newElement = new JQLite(newElement);
                for (var i = 0, ii = newElement.length; i < ii; i++) {
                    var node = newElement[i];
                    parent.insertBefore(node, index.nextSibling);
                    index = node;
                }
            }
        },
        addClass: jqLiteAddClass,
        removeClass: jqLiteRemoveClass,
        toggleClass: function(element, selector, condition) {
            if (selector) {
                forEach(selector.split(" "), function(className) {
                    var classCondition = condition;
                    if (isUndefined(classCondition)) {
                        classCondition = !jqLiteHasClass(element, className);
                    }
                    (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
                });
            }
        },
        parent: function(element) {
            var parent = element.parentNode;
            return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
        },
        next: function(element) {
            return element.nextElementSibling;
        },
        find: function(element, selector) {
            if (element.getElementsByTagName) {
                return element.getElementsByTagName(selector);
            } else {
                return [];
            }
        },
        clone: jqLiteClone,
        triggerHandler: function(element, event, extraParameters) {
            var dummyEvent, eventFnsCopy, handlerArgs;
            var eventName = event.type || event;
            var expandoStore = jqLiteExpandoStore(element);
            var events = expandoStore && expandoStore.events;
            var eventFns = events && events[eventName];
            if (eventFns) {
                dummyEvent = {
                    preventDefault: function() {
                        this.defaultPrevented = true;
                    },
                    isDefaultPrevented: function() {
                        return this.defaultPrevented === true;
                    },
                    stopImmediatePropagation: function() {
                        this.immediatePropagationStopped = true;
                    },
                    isImmediatePropagationStopped: function() {
                        return this.immediatePropagationStopped === true;
                    },
                    stopPropagation: noop,
                    type: eventName,
                    target: element
                };
                if (event.type) {
                    dummyEvent = extend(dummyEvent, event);
                }
                eventFnsCopy = shallowCopy(eventFns);
                handlerArgs = extraParameters ? [ dummyEvent ].concat(extraParameters) : [ dummyEvent ];
                forEach(eventFnsCopy, function(fn) {
                    if (!dummyEvent.isImmediatePropagationStopped()) {
                        fn.apply(element, handlerArgs);
                    }
                });
            }
        }
    }, function(fn, name) {
        JQLite.prototype[name] = function(arg1, arg2, arg3) {
            var value;
            for (var i = 0, ii = this.length; i < ii; i++) {
                if (isUndefined(value)) {
                    value = fn(this[i], arg1, arg2, arg3);
                    if (isDefined(value)) {
                        value = jqLite(value);
                    }
                } else {
                    jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
                }
            }
            return isDefined(value) ? value : this;
        };
    });
    JQLite.prototype.bind = JQLite.prototype.on;
    JQLite.prototype.unbind = JQLite.prototype.off;
    function $$jqLiteProvider() {
        this.$get = function $$jqLite() {
            return extend(JQLite, {
                hasClass: function(node, classes) {
                    if (node.attr) node = node[0];
                    return jqLiteHasClass(node, classes);
                },
                addClass: function(node, classes) {
                    if (node.attr) node = node[0];
                    return jqLiteAddClass(node, classes);
                },
                removeClass: function(node, classes) {
                    if (node.attr) node = node[0];
                    return jqLiteRemoveClass(node, classes);
                }
            });
        };
    }
    function hashKey(obj, nextUidFn) {
        var key = obj && obj.$$hashKey;
        if (key) {
            if (typeof key === "function") {
                key = obj.$$hashKey();
            }
            return key;
        }
        var objType = typeof obj;
        if (objType === "function" || objType === "object" && obj !== null) {
            key = obj.$$hashKey = objType + ":" + (nextUidFn || nextUid)();
        } else {
            key = objType + ":" + obj;
        }
        return key;
    }
    var nanKey = Object.create(null);
    function NgMapShim() {
        this._keys = [];
        this._values = [];
        this._lastKey = NaN;
        this._lastIndex = -1;
    }
    NgMapShim.prototype = {
        _idx: function(key) {
            if (key !== this._lastKey) {
                this._lastKey = key;
                this._lastIndex = this._keys.indexOf(key);
            }
            return this._lastIndex;
        },
        _transformKey: function(key) {
            return isNumberNaN(key) ? nanKey : key;
        },
        get: function(key) {
            key = this._transformKey(key);
            var idx = this._idx(key);
            if (idx !== -1) {
                return this._values[idx];
            }
        },
        has: function(key) {
            key = this._transformKey(key);
            var idx = this._idx(key);
            return idx !== -1;
        },
        set: function(key, value) {
            key = this._transformKey(key);
            var idx = this._idx(key);
            if (idx === -1) {
                idx = this._lastIndex = this._keys.length;
            }
            this._keys[idx] = key;
            this._values[idx] = value;
        },
        delete: function(key) {
            key = this._transformKey(key);
            var idx = this._idx(key);
            if (idx === -1) {
                return false;
            }
            this._keys.splice(idx, 1);
            this._values.splice(idx, 1);
            this._lastKey = NaN;
            this._lastIndex = -1;
            return true;
        }
    };
    var NgMap = NgMapShim;
    var $$MapProvider = [ function() {
        this.$get = [ function() {
            return NgMap;
        } ];
    } ];
    var ARROW_ARG = /^([^(]+?)=>/;
    var FN_ARGS = /^[^(]*\(\s*([^)]*)\)/m;
    var FN_ARG_SPLIT = /,/;
    var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
    var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm;
    var $injectorMinErr = minErr("$injector");
    function stringifyFn(fn) {
        return Function.prototype.toString.call(fn);
    }
    function extractArgs(fn) {
        var fnText = stringifyFn(fn).replace(STRIP_COMMENTS, ""), args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);
        return args;
    }
    function anonFn(fn) {
        var args = extractArgs(fn);
        if (args) {
            return "function(" + (args[1] || "").replace(/[\s\r\n]+/, " ") + ")";
        }
        return "fn";
    }
    function annotate(fn, strictDi, name) {
        var $inject, argDecl, last;
        if (typeof fn === "function") {
            if (!($inject = fn.$inject)) {
                $inject = [];
                if (fn.length) {
                    if (strictDi) {
                        if (!isString(name) || !name) {
                            name = fn.name || anonFn(fn);
                        }
                        throw $injectorMinErr("strictdi", "{0} is not using explicit annotation and cannot be invoked in strict mode", name);
                    }
                    argDecl = extractArgs(fn);
                    forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
                        arg.replace(FN_ARG, function(all, underscore, name) {
                            $inject.push(name);
                        });
                    });
                }
                fn.$inject = $inject;
            }
        } else if (isArray(fn)) {
            last = fn.length - 1;
            assertArgFn(fn[last], "fn");
            $inject = fn.slice(0, last);
        } else {
            assertArgFn(fn, "fn", true);
        }
        return $inject;
    }
    function createInjector(modulesToLoad, strictDi) {
        strictDi = strictDi === true;
        var INSTANTIATING = {}, providerSuffix = "Provider", path = [], loadedModules = new NgMap(), providerCache = {
            $provide: {
                provider: supportObject(provider),
                factory: supportObject(factory),
                service: supportObject(service),
                value: supportObject(value),
                constant: supportObject(constant),
                decorator: decorator
            }
        }, providerInjector = providerCache.$injector = createInternalInjector(providerCache, function(serviceName, caller) {
            if (angular.isString(caller)) {
                path.push(caller);
            }
            throw $injectorMinErr("unpr", "Unknown provider: {0}", path.join(" <- "));
        }), instanceCache = {}, protoInstanceInjector = createInternalInjector(instanceCache, function(serviceName, caller) {
            var provider = providerInjector.get(serviceName + providerSuffix, caller);
            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);
        }), instanceInjector = protoInstanceInjector;
        providerCache["$injector" + providerSuffix] = {
            $get: valueFn(protoInstanceInjector)
        };
        instanceInjector.modules = providerInjector.modules = createMap();
        var runBlocks = loadModules(modulesToLoad);
        instanceInjector = protoInstanceInjector.get("$injector");
        instanceInjector.strictDi = strictDi;
        forEach(runBlocks, function(fn) {
            if (fn) instanceInjector.invoke(fn);
        });
        instanceInjector.loadNewModules = function(mods) {
            forEach(loadModules(mods), function(fn) {
                if (fn) instanceInjector.invoke(fn);
            });
        };
        return instanceInjector;
        function supportObject(delegate) {
            return function(key, value) {
                if (isObject(key)) {
                    forEach(key, reverseParams(delegate));
                } else {
                    return delegate(key, value);
                }
            };
        }
        function provider(name, provider_) {
            assertNotHasOwnProperty(name, "service");
            if (isFunction(provider_) || isArray(provider_)) {
                provider_ = providerInjector.instantiate(provider_);
            }
            if (!provider_.$get) {
                throw $injectorMinErr("pget", "Provider '{0}' must define $get factory method.", name);
            }
            return providerCache[name + providerSuffix] = provider_;
        }
        function enforceReturnValue(name, factory) {
            return function enforcedReturnValue() {
                var result = instanceInjector.invoke(factory, this);
                if (isUndefined(result)) {
                    throw $injectorMinErr("undef", "Provider '{0}' must return a value from $get factory method.", name);
                }
                return result;
            };
        }
        function factory(name, factoryFn, enforce) {
            return provider(name, {
                $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
            });
        }
        function service(name, constructor) {
            return factory(name, [ "$injector", function($injector) {
                return $injector.instantiate(constructor);
            } ]);
        }
        function value(name, val) {
            return factory(name, valueFn(val), false);
        }
        function constant(name, value) {
            assertNotHasOwnProperty(name, "constant");
            providerCache[name] = value;
            instanceCache[name] = value;
        }
        function decorator(serviceName, decorFn) {
            var origProvider = providerInjector.get(serviceName + providerSuffix), orig$get = origProvider.$get;
            origProvider.$get = function() {
                var origInstance = instanceInjector.invoke(orig$get, origProvider);
                return instanceInjector.invoke(decorFn, null, {
                    $delegate: origInstance
                });
            };
        }
        function loadModules(modulesToLoad) {
            assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), "modulesToLoad", "not an array");
            var runBlocks = [], moduleFn;
            forEach(modulesToLoad, function(module) {
                if (loadedModules.get(module)) return;
                loadedModules.set(module, true);
                function runInvokeQueue(queue) {
                    var i, ii;
                    for (i = 0, ii = queue.length; i < ii; i++) {
                        var invokeArgs = queue[i], provider = providerInjector.get(invokeArgs[0]);
                        provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
                    }
                }
                try {
                    if (isString(module)) {
                        moduleFn = angularModule(module);
                        instanceInjector.modules[module] = moduleFn;
                        runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
                        runInvokeQueue(moduleFn._invokeQueue);
                        runInvokeQueue(moduleFn._configBlocks);
                    } else if (isFunction(module)) {
                        runBlocks.push(providerInjector.invoke(module));
                    } else if (isArray(module)) {
                        runBlocks.push(providerInjector.invoke(module));
                    } else {
                        assertArgFn(module, "module");
                    }
                } catch (e) {
                    if (isArray(module)) {
                        module = module[module.length - 1];
                    }
                    if (e.message && e.stack && e.stack.indexOf(e.message) === -1) {
                        e = e.message + "\n" + e.stack;
                    }
                    throw $injectorMinErr("modulerr", "Failed to instantiate module {0} due to:\n{1}", module, e.stack || e.message || e);
                }
            });
            return runBlocks;
        }
        function createInternalInjector(cache, factory) {
            function getService(serviceName, caller) {
                if (cache.hasOwnProperty(serviceName)) {
                    if (cache[serviceName] === INSTANTIATING) {
                        throw $injectorMinErr("cdep", "Circular dependency found: {0}", serviceName + " <- " + path.join(" <- "));
                    }
                    return cache[serviceName];
                } else {
                    try {
                        path.unshift(serviceName);
                        cache[serviceName] = INSTANTIATING;
                        cache[serviceName] = factory(serviceName, caller);
                        return cache[serviceName];
                    } catch (err) {
                        if (cache[serviceName] === INSTANTIATING) {
                            delete cache[serviceName];
                        }
                        throw err;
                    } finally {
                        path.shift();
                    }
                }
            }
            function injectionArgs(fn, locals, serviceName) {
                var args = [], $inject = createInjector.$$annotate(fn, strictDi, serviceName);
                for (var i = 0, length = $inject.length; i < length; i++) {
                    var key = $inject[i];
                    if (typeof key !== "string") {
                        throw $injectorMinErr("itkn", "Incorrect injection token! Expected service name as string, got {0}", key);
                    }
                    args.push(locals && locals.hasOwnProperty(key) ? locals[key] : getService(key, serviceName));
                }
                return args;
            }
            function isClass(func) {
                if (msie || typeof func !== "function") {
                    return false;
                }
                var result = func.$$ngIsClass;
                if (!isBoolean(result)) {
                    result = func.$$ngIsClass = /^class\b/.test(stringifyFn(func));
                }
                return result;
            }
            function invoke(fn, self, locals, serviceName) {
                if (typeof locals === "string") {
                    serviceName = locals;
                    locals = null;
                }
                var args = injectionArgs(fn, locals, serviceName);
                if (isArray(fn)) {
                    fn = fn[fn.length - 1];
                }
                if (!isClass(fn)) {
                    return fn.apply(self, args);
                } else {
                    args.unshift(null);
                    return new (Function.prototype.bind.apply(fn, args))();
                }
            }
            function instantiate(Type, locals, serviceName) {
                var ctor = isArray(Type) ? Type[Type.length - 1] : Type;
                var args = injectionArgs(Type, locals, serviceName);
                args.unshift(null);
                return new (Function.prototype.bind.apply(ctor, args))();
            }
            return {
                invoke: invoke,
                instantiate: instantiate,
                get: getService,
                annotate: createInjector.$$annotate,
                has: function(name) {
                    return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
                }
            };
        }
    }
    createInjector.$$annotate = annotate;
    function $AnchorScrollProvider() {
        var autoScrollingEnabled = true;
        this.disableAutoScrolling = function() {
            autoScrollingEnabled = false;
        };
        this.$get = [ "$window", "$location", "$rootScope", function($window, $location, $rootScope) {
            var document = $window.document;
            function getFirstAnchor(list) {
                var result = null;
                Array.prototype.some.call(list, function(element) {
                    if (nodeName_(element) === "a") {
                        result = element;
                        return true;
                    }
                });
                return result;
            }
            function getYOffset() {
                var offset = scroll.yOffset;
                if (isFunction(offset)) {
                    offset = offset();
                } else if (isElement(offset)) {
                    var elem = offset[0];
                    var style = $window.getComputedStyle(elem);
                    if (style.position !== "fixed") {
                        offset = 0;
                    } else {
                        offset = elem.getBoundingClientRect().bottom;
                    }
                } else if (!isNumber(offset)) {
                    offset = 0;
                }
                return offset;
            }
            function scrollTo(elem) {
                if (elem) {
                    elem.scrollIntoView();
                    var offset = getYOffset();
                    if (offset) {
                        var elemTop = elem.getBoundingClientRect().top;
                        $window.scrollBy(0, elemTop - offset);
                    }
                } else {
                    $window.scrollTo(0, 0);
                }
            }
            function scroll(hash) {
                hash = isString(hash) ? hash : isNumber(hash) ? hash.toString() : $location.hash();
                var elm;
                if (!hash) scrollTo(null); else if (elm = document.getElementById(hash)) scrollTo(elm); else if (elm = getFirstAnchor(document.getElementsByName(hash))) scrollTo(elm); else if (hash === "top") scrollTo(null);
            }
            if (autoScrollingEnabled) {
                $rootScope.$watch(function autoScrollWatch() {
                    return $location.hash();
                }, function autoScrollWatchAction(newVal, oldVal) {
                    if (newVal === oldVal && newVal === "") return;
                    jqLiteDocumentLoaded(function() {
                        $rootScope.$evalAsync(scroll);
                    });
                });
            }
            return scroll;
        } ];
    }
    var $animateMinErr = minErr("$animate");
    var ELEMENT_NODE = 1;
    var NG_ANIMATE_CLASSNAME = "ng-animate";
    function mergeClasses(a, b) {
        if (!a && !b) return "";
        if (!a) return b;
        if (!b) return a;
        if (isArray(a)) a = a.join(" ");
        if (isArray(b)) b = b.join(" ");
        return a + " " + b;
    }
    function extractElementNode(element) {
        for (var i = 0; i < element.length; i++) {
            var elm = element[i];
            if (elm.nodeType === ELEMENT_NODE) {
                return elm;
            }
        }
    }
    function splitClasses(classes) {
        if (isString(classes)) {
            classes = classes.split(" ");
        }
        var obj = createMap();
        forEach(classes, function(klass) {
            if (klass.length) {
                obj[klass] = true;
            }
        });
        return obj;
    }
    function prepareAnimateOptions(options) {
        return isObject(options) ? options : {};
    }
    var $$CoreAnimateJsProvider = function() {
        this.$get = noop;
    };
    var $$CoreAnimateQueueProvider = function() {
        var postDigestQueue = new NgMap();
        var postDigestElements = [];
        this.$get = [ "$$AnimateRunner", "$rootScope", function($$AnimateRunner, $rootScope) {
            return {
                enabled: noop,
                on: noop,
                off: noop,
                pin: noop,
                push: function(element, event, options, domOperation) {
                    if (domOperation) {
                        domOperation();
                    }
                    options = options || {};
                    if (options.from) {
                        element.css(options.from);
                    }
                    if (options.to) {
                        element.css(options.to);
                    }
                    if (options.addClass || options.removeClass) {
                        addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
                    }
                    var runner = new $$AnimateRunner();
                    runner.complete();
                    return runner;
                }
            };
            function updateData(data, classes, value) {
                var changed = false;
                if (classes) {
                    classes = isString(classes) ? classes.split(" ") : isArray(classes) ? classes : [];
                    forEach(classes, function(className) {
                        if (className) {
                            changed = true;
                            data[className] = value;
                        }
                    });
                }
                return changed;
            }
            function handleCSSClassChanges() {
                forEach(postDigestElements, function(element) {
                    var data = postDigestQueue.get(element);
                    if (data) {
                        var existing = splitClasses(element.attr("class"));
                        var toAdd = "";
                        var toRemove = "";
                        forEach(data, function(status, className) {
                            var hasClass = !!existing[className];
                            if (status !== hasClass) {
                                if (status) {
                                    toAdd += (toAdd.length ? " " : "") + className;
                                } else {
                                    toRemove += (toRemove.length ? " " : "") + className;
                                }
                            }
                        });
                        forEach(element, function(elm) {
                            if (toAdd) {
                                jqLiteAddClass(elm, toAdd);
                            }
                            if (toRemove) {
                                jqLiteRemoveClass(elm, toRemove);
                            }
                        });
                        postDigestQueue.delete(element);
                    }
                });
                postDigestElements.length = 0;
            }
            function addRemoveClassesPostDigest(element, add, remove) {
                var data = postDigestQueue.get(element) || {};
                var classesAdded = updateData(data, add, true);
                var classesRemoved = updateData(data, remove, false);
                if (classesAdded || classesRemoved) {
                    postDigestQueue.set(element, data);
                    postDigestElements.push(element);
                    if (postDigestElements.length === 1) {
                        $rootScope.$$postDigest(handleCSSClassChanges);
                    }
                }
            }
        } ];
    };
    var $AnimateProvider = [ "$provide", function($provide) {
        var provider = this;
        var classNameFilter = null;
        var customFilter = null;
        this.$$registeredAnimations = Object.create(null);
        this.register = function(name, factory) {
            if (name && name.charAt(0) !== ".") {
                throw $animateMinErr("notcsel", "Expecting class selector starting with '.' got '{0}'.", name);
            }
            var key = name + "-animation";
            provider.$$registeredAnimations[name.substr(1)] = key;
            $provide.factory(key, factory);
        };
        this.customFilter = function(filterFn) {
            if (arguments.length === 1) {
                customFilter = isFunction(filterFn) ? filterFn : null;
            }
            return customFilter;
        };
        this.classNameFilter = function(expression) {
            if (arguments.length === 1) {
                classNameFilter = expression instanceof RegExp ? expression : null;
                if (classNameFilter) {
                    var reservedRegex = new RegExp("[(\\s|\\/)]" + NG_ANIMATE_CLASSNAME + "[(\\s|\\/)]");
                    if (reservedRegex.test(classNameFilter.toString())) {
                        classNameFilter = null;
                        throw $animateMinErr("nongcls", '$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);
                    }
                }
            }
            return classNameFilter;
        };
        this.$get = [ "$$animateQueue", function($$animateQueue) {
            function domInsert(element, parentElement, afterElement) {
                if (afterElement) {
                    var afterNode = extractElementNode(afterElement);
                    if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
                        afterElement = null;
                    }
                }
                if (afterElement) {
                    afterElement.after(element);
                } else {
                    parentElement.prepend(element);
                }
            }
            return {
                on: $$animateQueue.on,
                off: $$animateQueue.off,
                pin: $$animateQueue.pin,
                enabled: $$animateQueue.enabled,
                cancel: function(runner) {
                    if (runner.cancel) {
                        runner.cancel();
                    }
                },
                enter: function(element, parent, after, options) {
                    parent = parent && jqLite(parent);
                    after = after && jqLite(after);
                    parent = parent || after.parent();
                    domInsert(element, parent, after);
                    return $$animateQueue.push(element, "enter", prepareAnimateOptions(options));
                },
                move: function(element, parent, after, options) {
                    parent = parent && jqLite(parent);
                    after = after && jqLite(after);
                    parent = parent || after.parent();
                    domInsert(element, parent, after);
                    return $$animateQueue.push(element, "move", prepareAnimateOptions(options));
                },
                leave: function(element, options) {
                    return $$animateQueue.push(element, "leave", prepareAnimateOptions(options), function() {
                        element.remove();
                    });
                },
                addClass: function(element, className, options) {
                    options = prepareAnimateOptions(options);
                    options.addClass = mergeClasses(options.addclass, className);
                    return $$animateQueue.push(element, "addClass", options);
                },
                removeClass: function(element, className, options) {
                    options = prepareAnimateOptions(options);
                    options.removeClass = mergeClasses(options.removeClass, className);
                    return $$animateQueue.push(element, "removeClass", options);
                },
                setClass: function(element, add, remove, options) {
                    options = prepareAnimateOptions(options);
                    options.addClass = mergeClasses(options.addClass, add);
                    options.removeClass = mergeClasses(options.removeClass, remove);
                    return $$animateQueue.push(element, "setClass", options);
                },
                animate: function(element, from, to, className, options) {
                    options = prepareAnimateOptions(options);
                    options.from = options.from ? extend(options.from, from) : from;
                    options.to = options.to ? extend(options.to, to) : to;
                    className = className || "ng-inline-animate";
                    options.tempClasses = mergeClasses(options.tempClasses, className);
                    return $$animateQueue.push(element, "animate", options);
                }
            };
        } ];
    } ];
    var $$AnimateAsyncRunFactoryProvider = function() {
        this.$get = [ "$$rAF", function($$rAF) {
            var waitQueue = [];
            function waitForTick(fn) {
                waitQueue.push(fn);
                if (waitQueue.length > 1) return;
                $$rAF(function() {
                    for (var i = 0; i < waitQueue.length; i++) {
                        waitQueue[i]();
                    }
                    waitQueue = [];
                });
            }
            return function() {
                var passed = false;
                waitForTick(function() {
                    passed = true;
                });
                return function(callback) {
                    if (passed) {
                        callback();
                    } else {
                        waitForTick(callback);
                    }
                };
            };
        } ];
    };
    var $$AnimateRunnerFactoryProvider = function() {
        this.$get = [ "$q", "$sniffer", "$$animateAsyncRun", "$$isDocumentHidden", "$timeout", function($q, $sniffer, $$animateAsyncRun, $$isDocumentHidden, $timeout) {
            var INITIAL_STATE = 0;
            var DONE_PENDING_STATE = 1;
            var DONE_COMPLETE_STATE = 2;
            AnimateRunner.chain = function(chain, callback) {
                var index = 0;
                next();
                function next() {
                    if (index === chain.length) {
                        callback(true);
                        return;
                    }
                    chain[index](function(response) {
                        if (response === false) {
                            callback(false);
                            return;
                        }
                        index++;
                        next();
                    });
                }
            };
            AnimateRunner.all = function(runners, callback) {
                var count = 0;
                var status = true;
                forEach(runners, function(runner) {
                    runner.done(onProgress);
                });
                function onProgress(response) {
                    status = status && response;
                    if (++count === runners.length) {
                        callback(status);
                    }
                }
            };
            function AnimateRunner(host) {
                this.setHost(host);
                var rafTick = $$animateAsyncRun();
                var timeoutTick = function(fn) {
                    $timeout(fn, 0, false);
                };
                this._doneCallbacks = [];
                this._tick = function(fn) {
                    if ($$isDocumentHidden()) {
                        timeoutTick(fn);
                    } else {
                        rafTick(fn);
                    }
                };
                this._state = 0;
            }
            AnimateRunner.prototype = {
                setHost: function(host) {
                    this.host = host || {};
                },
                done: function(fn) {
                    if (this._state === DONE_COMPLETE_STATE) {
                        fn();
                    } else {
                        this._doneCallbacks.push(fn);
                    }
                },
                progress: noop,
                getPromise: function() {
                    if (!this.promise) {
                        var self = this;
                        this.promise = $q(function(resolve, reject) {
                            self.done(function(status) {
                                if (status === false) {
                                    reject();
                                } else {
                                    resolve();
                                }
                            });
                        });
                    }
                    return this.promise;
                },
                then: function(resolveHandler, rejectHandler) {
                    return this.getPromise().then(resolveHandler, rejectHandler);
                },
                catch: function(handler) {
                    return this.getPromise()["catch"](handler);
                },
                finally: function(handler) {
                    return this.getPromise()["finally"](handler);
                },
                pause: function() {
                    if (this.host.pause) {
                        this.host.pause();
                    }
                },
                resume: function() {
                    if (this.host.resume) {
                        this.host.resume();
                    }
                },
                end: function() {
                    if (this.host.end) {
                        this.host.end();
                    }
                    this._resolve(true);
                },
                cancel: function() {
                    if (this.host.cancel) {
                        this.host.cancel();
                    }
                    this._resolve(false);
                },
                complete: function(response) {
                    var self = this;
                    if (self._state === INITIAL_STATE) {
                        self._state = DONE_PENDING_STATE;
                        self._tick(function() {
                            self._resolve(response);
                        });
                    }
                },
                _resolve: function(response) {
                    if (this._state !== DONE_COMPLETE_STATE) {
                        forEach(this._doneCallbacks, function(fn) {
                            fn(response);
                        });
                        this._doneCallbacks.length = 0;
                        this._state = DONE_COMPLETE_STATE;
                    }
                }
            };
            return AnimateRunner;
        } ];
    };
    var $CoreAnimateCssProvider = function() {
        this.$get = [ "$$rAF", "$q", "$$AnimateRunner", function($$rAF, $q, $$AnimateRunner) {
            return function(element, initialOptions) {
                var options = initialOptions || {};
                if (!options.$$prepared) {
                    options = copy(options);
                }
                if (options.cleanupStyles) {
                    options.from = options.to = null;
                }
                if (options.from) {
                    element.css(options.from);
                    options.from = null;
                }
                var closed, runner = new $$AnimateRunner();
                return {
                    start: run,
                    end: run
                };
                function run() {
                    $$rAF(function() {
                        applyAnimationContents();
                        if (!closed) {
                            runner.complete();
                        }
                        closed = true;
                    });
                    return runner;
                }
                function applyAnimationContents() {
                    if (options.addClass) {
                        element.addClass(options.addClass);
                        options.addClass = null;
                    }
                    if (options.removeClass) {
                        element.removeClass(options.removeClass);
                        options.removeClass = null;
                    }
                    if (options.to) {
                        element.css(options.to);
                        options.to = null;
                    }
                }
            };
        } ];
    };
    function getHash(url) {
        var index = url.indexOf("#");
        return index === -1 ? "" : url.substr(index);
    }
    function trimEmptyHash(url) {
        return url.replace(/#$/, "");
    }
    function Browser(window, document, $log, $sniffer, $$taskTrackerFactory) {
        var self = this, location = window.location, history = window.history, setTimeout = window.setTimeout, clearTimeout = window.clearTimeout, pendingDeferIds = {}, taskTracker = $$taskTrackerFactory($log);
        self.isMock = false;
        self.$$completeOutstandingRequest = taskTracker.completeTask;
        self.$$incOutstandingRequestCount = taskTracker.incTaskCount;
        self.notifyWhenNoOutstandingRequests = taskTracker.notifyWhenNoPendingTasks;
        var cachedState, lastHistoryState, lastBrowserUrl = location.href, baseElement = document.find("base"), pendingLocation = null, getCurrentState = !$sniffer.history ? noop : function getCurrentState() {
            try {
                return history.state;
            } catch (e) {}
        };
        cacheState();
        self.url = function(url, replace, state) {
            if (isUndefined(state)) {
                state = null;
            }
            if (location !== window.location) location = window.location;
            if (history !== window.history) history = window.history;
            if (url) {
                var sameState = lastHistoryState === state;
                url = urlResolve(url).href;
                if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
                    return self;
                }
                var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
                lastBrowserUrl = url;
                lastHistoryState = state;
                if ($sniffer.history && (!sameBase || !sameState)) {
                    history[replace ? "replaceState" : "pushState"](state, "", url);
                    cacheState();
                } else {
                    if (!sameBase) {
                        pendingLocation = url;
                    }
                    if (replace) {
                        location.replace(url);
                    } else if (!sameBase) {
                        location.href = url;
                    } else {
                        location.hash = getHash(url);
                    }
                    if (location.href !== url) {
                        pendingLocation = url;
                    }
                }
                if (pendingLocation) {
                    pendingLocation = url;
                }
                return self;
            } else {
                return trimEmptyHash(pendingLocation || location.href);
            }
        };
        self.state = function() {
            return cachedState;
        };
        var urlChangeListeners = [], urlChangeInit = false;
        function cacheStateAndFireUrlChange() {
            pendingLocation = null;
            fireStateOrUrlChange();
        }
        var lastCachedState = null;
        function cacheState() {
            cachedState = getCurrentState();
            cachedState = isUndefined(cachedState) ? null : cachedState;
            if (equals(cachedState, lastCachedState)) {
                cachedState = lastCachedState;
            }
            lastCachedState = cachedState;
            lastHistoryState = cachedState;
        }
        function fireStateOrUrlChange() {
            var prevLastHistoryState = lastHistoryState;
            cacheState();
            if (lastBrowserUrl === self.url() && prevLastHistoryState === cachedState) {
                return;
            }
            lastBrowserUrl = self.url();
            lastHistoryState = cachedState;
            forEach(urlChangeListeners, function(listener) {
                listener(self.url(), cachedState);
            });
        }
        self.onUrlChange = function(callback) {
            if (!urlChangeInit) {
                if ($sniffer.history) jqLite(window).on("popstate", cacheStateAndFireUrlChange);
                jqLite(window).on("hashchange", cacheStateAndFireUrlChange);
                urlChangeInit = true;
            }
            urlChangeListeners.push(callback);
            return callback;
        };
        self.$$applicationDestroyed = function() {
            jqLite(window).off("hashchange popstate", cacheStateAndFireUrlChange);
        };
        self.$$checkUrlChange = fireStateOrUrlChange;
        self.baseHref = function() {
            var href = baseElement.attr("href");
            return href ? href.replace(/^(https?:)?\/\/[^/]*/, "") : "";
        };
        self.defer = function(fn, delay, taskType) {
            var timeoutId;
            delay = delay || 0;
            taskType = taskType || taskTracker.DEFAULT_TASK_TYPE;
            taskTracker.incTaskCount(taskType);
            timeoutId = setTimeout(function() {
                delete pendingDeferIds[timeoutId];
                taskTracker.completeTask(fn, taskType);
            }, delay);
            pendingDeferIds[timeoutId] = taskType;
            return timeoutId;
        };
        self.defer.cancel = function(deferId) {
            if (pendingDeferIds.hasOwnProperty(deferId)) {
                var taskType = pendingDeferIds[deferId];
                delete pendingDeferIds[deferId];
                clearTimeout(deferId);
                taskTracker.completeTask(noop, taskType);
                return true;
            }
            return false;
        };
    }
    function $BrowserProvider() {
        this.$get = [ "$window", "$log", "$sniffer", "$document", "$$taskTrackerFactory", function($window, $log, $sniffer, $document, $$taskTrackerFactory) {
            return new Browser($window, $document, $log, $sniffer, $$taskTrackerFactory);
        } ];
    }
    function $CacheFactoryProvider() {
        this.$get = function() {
            var caches = {};
            function cacheFactory(cacheId, options) {
                if (cacheId in caches) {
                    throw minErr("$cacheFactory")("iid", "CacheId '{0}' is already taken!", cacheId);
                }
                var size = 0, stats = extend({}, options, {
                    id: cacheId
                }), data = createMap(), capacity = options && options.capacity || Number.MAX_VALUE, lruHash = createMap(), freshEnd = null, staleEnd = null;
                return caches[cacheId] = {
                    put: function(key, value) {
                        if (isUndefined(value)) return;
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key] || (lruHash[key] = {
                                key: key
                            });
                            refresh(lruEntry);
                        }
                        if (!(key in data)) size++;
                        data[key] = value;
                        if (size > capacity) {
                            this.remove(staleEnd.key);
                        }
                        return value;
                    },
                    get: function(key) {
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key];
                            if (!lruEntry) return;
                            refresh(lruEntry);
                        }
                        return data[key];
                    },
                    remove: function(key) {
                        if (capacity < Number.MAX_VALUE) {
                            var lruEntry = lruHash[key];
                            if (!lruEntry) return;
                            if (lruEntry === freshEnd) freshEnd = lruEntry.p;
                            if (lruEntry === staleEnd) staleEnd = lruEntry.n;
                            link(lruEntry.n, lruEntry.p);
                            delete lruHash[key];
                        }
                        if (!(key in data)) return;
                        delete data[key];
                        size--;
                    },
                    removeAll: function() {
                        data = createMap();
                        size = 0;
                        lruHash = createMap();
                        freshEnd = staleEnd = null;
                    },
                    destroy: function() {
                        data = null;
                        stats = null;
                        lruHash = null;
                        delete caches[cacheId];
                    },
                    info: function() {
                        return extend({}, stats, {
                            size: size
                        });
                    }
                };
                function refresh(entry) {
                    if (entry !== freshEnd) {
                        if (!staleEnd) {
                            staleEnd = entry;
                        } else if (staleEnd === entry) {
                            staleEnd = entry.n;
                        }
                        link(entry.n, entry.p);
                        link(entry, freshEnd);
                        freshEnd = entry;
                        freshEnd.n = null;
                    }
                }
                function link(nextEntry, prevEntry) {
                    if (nextEntry !== prevEntry) {
                        if (nextEntry) nextEntry.p = prevEntry;
                        if (prevEntry) prevEntry.n = nextEntry;
                    }
                }
            }
            cacheFactory.info = function() {
                var info = {};
                forEach(caches, function(cache, cacheId) {
                    info[cacheId] = cache.info();
                });
                return info;
            };
            cacheFactory.get = function(cacheId) {
                return caches[cacheId];
            };
            return cacheFactory;
        };
    }
    function $TemplateCacheProvider() {
        this.$get = [ "$cacheFactory", function($cacheFactory) {
            return $cacheFactory("templates");
        } ];
    }
    var $compileMinErr = minErr("$compile");
    function UNINITIALIZED_VALUE() {}
    var _UNINITIALIZED_VALUE = new UNINITIALIZED_VALUE();
    $CompileProvider.$inject = [ "$provide", "$$sanitizeUriProvider" ];
    function $CompileProvider($provide, $$sanitizeUriProvider) {
        var hasDirectives = {}, Suffix = "Directive", COMMENT_DIRECTIVE_REGEXP = /^\s*directive:\s*([\w-]+)\s+(.*)$/, CLASS_DIRECTIVE_REGEXP = /(([\w-]+)(?::([^;]+))?;?)/, ALL_OR_NOTHING_ATTRS = makeMap("ngSrc,ngSrcset,src,srcset"), REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;
        var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
        var bindingCache = createMap();
        function parseIsolateBindings(scope, directiveName, isController) {
            var LOCAL_REGEXP = /^([@&]|[=<](\*?))(\??)\s*([\w$]*)$/;
            var bindings = createMap();
            forEach(scope, function(definition, scopeName) {
                definition = definition.trim();
                if (definition in bindingCache) {
                    bindings[scopeName] = bindingCache[definition];
                    return;
                }
                var match = definition.match(LOCAL_REGEXP);
                if (!match) {
                    throw $compileMinErr("iscp", "Invalid {3} for directive '{0}'." + " Definition: {... {1}: '{2}' ...}", directiveName, scopeName, definition, isController ? "controller bindings definition" : "isolate scope definition");
                }
                bindings[scopeName] = {
                    mode: match[1][0],
                    collection: match[2] === "*",
                    optional: match[3] === "?",
                    attrName: match[4] || scopeName
                };
                if (match[4]) {
                    bindingCache[definition] = bindings[scopeName];
                }
            });
            return bindings;
        }
        function parseDirectiveBindings(directive, directiveName) {
            var bindings = {
                isolateScope: null,
                bindToController: null
            };
            if (isObject(directive.scope)) {
                if (directive.bindToController === true) {
                    bindings.bindToController = parseIsolateBindings(directive.scope, directiveName, true);
                    bindings.isolateScope = {};
                } else {
                    bindings.isolateScope = parseIsolateBindings(directive.scope, directiveName, false);
                }
            }
            if (isObject(directive.bindToController)) {
                bindings.bindToController = parseIsolateBindings(directive.bindToController, directiveName, true);
            }
            if (bindings.bindToController && !directive.controller) {
                throw $compileMinErr("noctrl", "Cannot bind to controller without directive '{0}'s controller.", directiveName);
            }
            return bindings;
        }
        function assertValidDirectiveName(name) {
            var letter = name.charAt(0);
            if (!letter || letter !== lowercase(letter)) {
                throw $compileMinErr("baddir", "Directive/Component name '{0}' is invalid. The first character must be a lowercase letter", name);
            }
            if (name !== name.trim()) {
                throw $compileMinErr("baddir", "Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces", name);
            }
        }
        function getDirectiveRequire(directive) {
            var require = directive.require || directive.controller && directive.name;
            if (!isArray(require) && isObject(require)) {
                forEach(require, function(value, key) {
                    var match = value.match(REQUIRE_PREFIX_REGEXP);
                    var name = value.substring(match[0].length);
                    if (!name) require[key] = match[0] + key;
                });
            }
            return require;
        }
        function getDirectiveRestrict(restrict, name) {
            if (restrict && !(isString(restrict) && /[EACM]/.test(restrict))) {
                throw $compileMinErr("badrestrict", "Restrict property '{0}' of directive '{1}' is invalid", restrict, name);
            }
            return restrict || "EA";
        }
        this.directive = function registerDirective(name, directiveFactory) {
            assertArg(name, "name");
            assertNotHasOwnProperty(name, "directive");
            if (isString(name)) {
                assertValidDirectiveName(name);
                assertArg(directiveFactory, "directiveFactory");
                if (!hasDirectives.hasOwnProperty(name)) {
                    hasDirectives[name] = [];
                    $provide.factory(name + Suffix, [ "$injector", "$exceptionHandler", function($injector, $exceptionHandler) {
                        var directives = [];
                        forEach(hasDirectives[name], function(directiveFactory, index) {
                            try {
                                var directive = $injector.invoke(directiveFactory);
                                if (isFunction(directive)) {
                                    directive = {
                                        compile: valueFn(directive)
                                    };
                                } else if (!directive.compile && directive.link) {
                                    directive.compile = valueFn(directive.link);
                                }
                                directive.priority = directive.priority || 0;
                                directive.index = index;
                                directive.name = directive.name || name;
                                directive.require = getDirectiveRequire(directive);
                                directive.restrict = getDirectiveRestrict(directive.restrict, name);
                                directive.$$moduleName = directiveFactory.$$moduleName;
                                directives.push(directive);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                        });
                        return directives;
                    } ]);
                }
                hasDirectives[name].push(directiveFactory);
            } else {
                forEach(name, reverseParams(registerDirective));
            }
            return this;
        };
        this.component = function registerComponent(name, options) {
            if (!isString(name)) {
                forEach(name, reverseParams(bind(this, registerComponent)));
                return this;
            }
            var controller = options.controller || function() {};
            function factory($injector) {
                function makeInjectable(fn) {
                    if (isFunction(fn) || isArray(fn)) {
                        return function(tElement, tAttrs) {
                            return $injector.invoke(fn, this, {
                                $element: tElement,
                                $attrs: tAttrs
                            });
                        };
                    } else {
                        return fn;
                    }
                }
                var template = !options.template && !options.templateUrl ? "" : options.template;
                var ddo = {
                    controller: controller,
                    controllerAs: identifierForController(options.controller) || options.controllerAs || "$ctrl",
                    template: makeInjectable(template),
                    templateUrl: makeInjectable(options.templateUrl),
                    transclude: options.transclude,
                    scope: {},
                    bindToController: options.bindings || {},
                    restrict: "E",
                    require: options.require
                };
                forEach(options, function(val, key) {
                    if (key.charAt(0) === "$") ddo[key] = val;
                });
                return ddo;
            }
            forEach(options, function(val, key) {
                if (key.charAt(0) === "$") {
                    factory[key] = val;
                    if (isFunction(controller)) controller[key] = val;
                }
            });
            factory.$inject = [ "$injector" ];
            return this.directive(name, factory);
        };
        this.aHrefSanitizationTrustedUrlList = function(regexp) {
            if (isDefined(regexp)) {
                $$sanitizeUriProvider.aHrefSanitizationTrustedUrlList(regexp);
                return this;
            } else {
                return $$sanitizeUriProvider.aHrefSanitizationTrustedUrlList();
            }
        };
        Object.defineProperty(this, "aHrefSanitizationWhitelist", {
            get: function() {
                return this.aHrefSanitizationTrustedUrlList;
            },
            set: function(value) {
                this.aHrefSanitizationTrustedUrlList = value;
            }
        });
        this.imgSrcSanitizationTrustedUrlList = function(regexp) {
            if (isDefined(regexp)) {
                $$sanitizeUriProvider.imgSrcSanitizationTrustedUrlList(regexp);
                return this;
            } else {
                return $$sanitizeUriProvider.imgSrcSanitizationTrustedUrlList();
            }
        };
        Object.defineProperty(this, "imgSrcSanitizationWhitelist", {
            get: function() {
                return this.imgSrcSanitizationTrustedUrlList;
            },
            set: function(value) {
                this.imgSrcSanitizationTrustedUrlList = value;
            }
        });
        var debugInfoEnabled = true;
        this.debugInfoEnabled = function(enabled) {
            if (isDefined(enabled)) {
                debugInfoEnabled = enabled;
                return this;
            }
            return debugInfoEnabled;
        };
        var strictComponentBindingsEnabled = false;
        this.strictComponentBindingsEnabled = function(enabled) {
            if (isDefined(enabled)) {
                strictComponentBindingsEnabled = enabled;
                return this;
            }
            return strictComponentBindingsEnabled;
        };
        var TTL = 10;
        this.onChangesTtl = function(value) {
            if (arguments.length) {
                TTL = value;
                return this;
            }
            return TTL;
        };
        var commentDirectivesEnabledConfig = true;
        this.commentDirectivesEnabled = function(value) {
            if (arguments.length) {
                commentDirectivesEnabledConfig = value;
                return this;
            }
            return commentDirectivesEnabledConfig;
        };
        var cssClassDirectivesEnabledConfig = true;
        this.cssClassDirectivesEnabled = function(value) {
            if (arguments.length) {
                cssClassDirectivesEnabledConfig = value;
                return this;
            }
            return cssClassDirectivesEnabledConfig;
        };
        var PROP_CONTEXTS = createMap();
        this.addPropertySecurityContext = function(elementName, propertyName, ctx) {
            var key = elementName.toLowerCase() + "|" + propertyName.toLowerCase();
            if (key in PROP_CONTEXTS && PROP_CONTEXTS[key] !== ctx) {
                throw $compileMinErr("ctxoverride", "Property context '{0}.{1}' already set to '{2}', cannot override to '{3}'.", elementName, propertyName, PROP_CONTEXTS[key], ctx);
            }
            PROP_CONTEXTS[key] = ctx;
            return this;
        };
        (function registerNativePropertyContexts() {
            function registerContext(ctx, values) {
                forEach(values, function(v) {
                    PROP_CONTEXTS[v.toLowerCase()] = ctx;
                });
            }
            registerContext(SCE_CONTEXTS.HTML, [ "iframe|srcdoc", "*|innerHTML", "*|outerHTML" ]);
            registerContext(SCE_CONTEXTS.CSS, [ "*|style" ]);
            registerContext(SCE_CONTEXTS.URL, [ "area|href", "area|ping", "a|href", "a|ping", "blockquote|cite", "body|background", "del|cite", "input|src", "ins|cite", "q|cite" ]);
            registerContext(SCE_CONTEXTS.MEDIA_URL, [ "audio|src", "img|src", "img|srcset", "source|src", "source|srcset", "track|src", "video|src", "video|poster" ]);
            registerContext(SCE_CONTEXTS.RESOURCE_URL, [ "*|formAction", "applet|code", "applet|codebase", "base|href", "embed|src", "frame|src", "form|action", "head|profile", "html|manifest", "iframe|src", "link|href", "media|src", "object|codebase", "object|data", "script|src" ]);
        })();
        this.$get = [ "$injector", "$interpolate", "$exceptionHandler", "$templateRequest", "$parse", "$controller", "$rootScope", "$sce", "$animate", function($injector, $interpolate, $exceptionHandler, $templateRequest, $parse, $controller, $rootScope, $sce, $animate) {
            var SIMPLE_ATTR_NAME = /^\w/;
            var specialAttrHolder = window.document.createElement("div");
            var commentDirectivesEnabled = commentDirectivesEnabledConfig;
            var cssClassDirectivesEnabled = cssClassDirectivesEnabledConfig;
            var onChangesTtl = TTL;
            var onChangesQueue;
            function flushOnChangesQueue() {
                try {
                    if (!--onChangesTtl) {
                        onChangesQueue = undefined;
                        throw $compileMinErr("infchng", "{0} $onChanges() iterations reached. Aborting!\n", TTL);
                    }
                    $rootScope.$apply(function() {
                        for (var i = 0, ii = onChangesQueue.length; i < ii; ++i) {
                            try {
                                onChangesQueue[i]();
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                        }
                        onChangesQueue = undefined;
                    });
                } finally {
                    onChangesTtl++;
                }
            }
            function sanitizeSrcset(value, invokeType) {
                if (!value) {
                    return value;
                }
                if (!isString(value)) {
                    throw $compileMinErr("srcset", 'Can\'t pass trusted values to `{0}`: "{1}"', invokeType, value.toString());
                }
                var result = "";
                var trimmedSrcset = trim(value);
                var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
                var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;
                var rawUris = trimmedSrcset.split(pattern);
                var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
                for (var i = 0; i < nbrUrisWith2parts; i++) {
                    var innerIdx = i * 2;
                    result += $sce.getTrustedMediaUrl(trim(rawUris[innerIdx]));
                    result += " " + trim(rawUris[innerIdx + 1]);
                }
                var lastTuple = trim(rawUris[i * 2]).split(/\s/);
                result += $sce.getTrustedMediaUrl(trim(lastTuple[0]));
                if (lastTuple.length === 2) {
                    result += " " + trim(lastTuple[1]);
                }
                return result;
            }
            function Attributes(element, attributesToCopy) {
                if (attributesToCopy) {
                    var keys = Object.keys(attributesToCopy);
                    var i, l, key;
                    for (i = 0, l = keys.length; i < l; i++) {
                        key = keys[i];
                        this[key] = attributesToCopy[key];
                    }
                } else {
                    this.$attr = {};
                }
                this.$$element = element;
            }
            Attributes.prototype = {
                $normalize: directiveNormalize,
                $addClass: function(classVal) {
                    if (classVal && classVal.length > 0) {
                        $animate.addClass(this.$$element, classVal);
                    }
                },
                $removeClass: function(classVal) {
                    if (classVal && classVal.length > 0) {
                        $animate.removeClass(this.$$element, classVal);
                    }
                },
                $updateClass: function(newClasses, oldClasses) {
                    var toAdd = tokenDifference(newClasses, oldClasses);
                    if (toAdd && toAdd.length) {
                        $animate.addClass(this.$$element, toAdd);
                    }
                    var toRemove = tokenDifference(oldClasses, newClasses);
                    if (toRemove && toRemove.length) {
                        $animate.removeClass(this.$$element, toRemove);
                    }
                },
                $set: function(key, value, writeAttr, attrName) {
                    var node = this.$$element[0], booleanKey = getBooleanAttrName(node, key), aliasedKey = getAliasedAttrName(key), observer = key, nodeName;
                    if (booleanKey) {
                        this.$$element.prop(key, value);
                        attrName = booleanKey;
                    } else if (aliasedKey) {
                        this[aliasedKey] = value;
                        observer = aliasedKey;
                    }
                    this[key] = value;
                    if (attrName) {
                        this.$attr[key] = attrName;
                    } else {
                        attrName = this.$attr[key];
                        if (!attrName) {
                            this.$attr[key] = attrName = snake_case(key, "-");
                        }
                    }
                    nodeName = nodeName_(this.$$element);
                    if (nodeName === "img" && key === "srcset") {
                        this[key] = value = sanitizeSrcset(value, "$set('srcset', value)");
                    }
                    if (writeAttr !== false) {
                        if (value === null || isUndefined(value)) {
                            this.$$element.removeAttr(attrName);
                        } else {
                            if (SIMPLE_ATTR_NAME.test(attrName)) {
                                if (booleanKey && value === false) {
                                    this.$$element.removeAttr(attrName);
                                } else {
                                    this.$$element.attr(attrName, value);
                                }
                            } else {
                                setSpecialAttr(this.$$element[0], attrName, value);
                            }
                        }
                    }
                    var $$observers = this.$$observers;
                    if ($$observers) {
                        forEach($$observers[observer], function(fn) {
                            try {
                                fn(value);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                        });
                    }
                },
                $observe: function(key, fn) {
                    var attrs = this, $$observers = attrs.$$observers || (attrs.$$observers = createMap()), listeners = $$observers[key] || ($$observers[key] = []);
                    listeners.push(fn);
                    $rootScope.$evalAsync(function() {
                        if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {
                            fn(attrs[key]);
                        }
                    });
                    return function() {
                        arrayRemove(listeners, fn);
                    };
                }
            };
            function setSpecialAttr(element, attrName, value) {
                specialAttrHolder.innerHTML = "<span " + attrName + ">";
                var attributes = specialAttrHolder.firstChild.attributes;
                var attribute = attributes[0];
                attributes.removeNamedItem(attribute.name);
                attribute.value = value;
                element.attributes.setNamedItem(attribute);
            }
            function safeAddClass($element, className) {
                try {
                    $element.addClass(className);
                } catch (e) {}
            }
            var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), denormalizeTemplate = startSymbol === "{{" && endSymbol === "}}" ? identity : function denormalizeTemplate(template) {
                return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
            }, NG_PREFIX_BINDING = /^ng(Attr|Prop|On)([A-Z].*)$/;
            var MULTI_ELEMENT_DIR_RE = /^(.+)Start$/;
            compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
                var bindings = $element.data("$binding") || [];
                if (isArray(binding)) {
                    bindings = bindings.concat(binding);
                } else {
                    bindings.push(binding);
                }
                $element.data("$binding", bindings);
            } : noop;
            compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
                safeAddClass($element, "ng-binding");
            } : noop;
            compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
                var dataName = isolated ? noTemplate ? "$isolateScopeNoTemplate" : "$isolateScope" : "$scope";
                $element.data(dataName, scope);
            } : noop;
            compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
                safeAddClass($element, isolated ? "ng-isolate-scope" : "ng-scope");
            } : noop;
            compile.$$createComment = function(directiveName, comment) {
                var content = "";
                if (debugInfoEnabled) {
                    content = " " + (directiveName || "") + ": ";
                    if (comment) content += comment + " ";
                }
                return window.document.createComment(content);
            };
            return compile;
            function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
                if (!($compileNodes instanceof jqLite)) {
                    $compileNodes = jqLite($compileNodes);
                }
                var compositeLinkFn = compileNodes($compileNodes, transcludeFn, $compileNodes, maxPriority, ignoreDirective, previousCompileContext);
                compile.$$addScopeClass($compileNodes);
                var namespace = null;
                return function publicLinkFn(scope, cloneConnectFn, options) {
                    if (!$compileNodes) {
                        throw $compileMinErr("multilink", "This element has already been linked.");
                    }
                    assertArg(scope, "scope");
                    if (previousCompileContext && previousCompileContext.needsNewScope) {
                        scope = scope.$parent.$new();
                    }
                    options = options || {};
                    var parentBoundTranscludeFn = options.parentBoundTranscludeFn, transcludeControllers = options.transcludeControllers, futureParentElement = options.futureParentElement;
                    if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
                        parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
                    }
                    if (!namespace) {
                        namespace = detectNamespaceForChildElements(futureParentElement);
                    }
                    var $linkNode;
                    if (namespace !== "html") {
                        $linkNode = jqLite(wrapTemplate(namespace, jqLite("<div></div>").append($compileNodes).html()));
                    } else if (cloneConnectFn) {
                        $linkNode = JQLitePrototype.clone.call($compileNodes);
                    } else {
                        $linkNode = $compileNodes;
                    }
                    if (transcludeControllers) {
                        for (var controllerName in transcludeControllers) {
                            $linkNode.data("$" + controllerName + "Controller", transcludeControllers[controllerName].instance);
                        }
                    }
                    compile.$$addScopeInfo($linkNode, scope);
                    if (cloneConnectFn) cloneConnectFn($linkNode, scope);
                    if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
                    if (!cloneConnectFn) {
                        $compileNodes = compositeLinkFn = null;
                    }
                    return $linkNode;
                };
            }
            function detectNamespaceForChildElements(parentElement) {
                var node = parentElement && parentElement[0];
                if (!node) {
                    return "html";
                } else {
                    return nodeName_(node) !== "foreignobject" && toString.call(node).match(/SVG/) ? "svg" : "html";
                }
            }
            function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective, previousCompileContext) {
                var linkFns = [], notLiveList = isArray(nodeList) || nodeList instanceof jqLite, attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;
                for (var i = 0; i < nodeList.length; i++) {
                    attrs = new Attributes();
                    if (msie === 11) {
                        mergeConsecutiveTextNodes(nodeList, i, notLiveList);
                    }
                    directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined, ignoreDirective);
                    nodeLinkFn = directives.length ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement, null, [], [], previousCompileContext) : null;
                    if (nodeLinkFn && nodeLinkFn.scope) {
                        compile.$$addScopeClass(attrs.$$element);
                    }
                    childLinkFn = nodeLinkFn && nodeLinkFn.terminal || !(childNodes = nodeList[i].childNodes) || !childNodes.length ? null : compileNodes(childNodes, nodeLinkFn ? (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement) && nodeLinkFn.transclude : transcludeFn);
                    if (nodeLinkFn || childLinkFn) {
                        linkFns.push(i, nodeLinkFn, childLinkFn);
                        linkFnFound = true;
                        nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
                    }
                    previousCompileContext = null;
                }
                return linkFnFound ? compositeLinkFn : null;
                function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
                    var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
                    var stableNodeList;
                    if (nodeLinkFnFound) {
                        var nodeListLength = nodeList.length;
                        stableNodeList = new Array(nodeListLength);
                        for (i = 0; i < linkFns.length; i += 3) {
                            idx = linkFns[i];
                            stableNodeList[idx] = nodeList[idx];
                        }
                    } else {
                        stableNodeList = nodeList;
                    }
                    for (i = 0, ii = linkFns.length; i < ii; ) {
                        node = stableNodeList[linkFns[i++]];
                        nodeLinkFn = linkFns[i++];
                        childLinkFn = linkFns[i++];
                        if (nodeLinkFn) {
                            if (nodeLinkFn.scope) {
                                childScope = scope.$new();
                                compile.$$addScopeInfo(jqLite(node), childScope);
                            } else {
                                childScope = scope;
                            }
                            if (nodeLinkFn.transcludeOnThisElement) {
                                childBoundTranscludeFn = createBoundTranscludeFn(scope, nodeLinkFn.transclude, parentBoundTranscludeFn);
                            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
                                childBoundTranscludeFn = parentBoundTranscludeFn;
                            } else if (!parentBoundTranscludeFn && transcludeFn) {
                                childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);
                            } else {
                                childBoundTranscludeFn = null;
                            }
                            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);
                        } else if (childLinkFn) {
                            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
                        }
                    }
                }
            }
            function mergeConsecutiveTextNodes(nodeList, idx, notLiveList) {
                var node = nodeList[idx];
                var parent = node.parentNode;
                var sibling;
                if (node.nodeType !== NODE_TYPE_TEXT) {
                    return;
                }
                while (true) {
                    sibling = parent ? node.nextSibling : nodeList[idx + 1];
                    if (!sibling || sibling.nodeType !== NODE_TYPE_TEXT) {
                        break;
                    }
                    node.nodeValue = node.nodeValue + sibling.nodeValue;
                    if (sibling.parentNode) {
                        sibling.parentNode.removeChild(sibling);
                    }
                    if (notLiveList && sibling === nodeList[idx + 1]) {
                        nodeList.splice(idx + 1, 1);
                    }
                }
            }
            function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
                function boundTranscludeFn(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {
                    if (!transcludedScope) {
                        transcludedScope = scope.$new(false, containingScope);
                        transcludedScope.$$transcluded = true;
                    }
                    return transcludeFn(transcludedScope, cloneFn, {
                        parentBoundTranscludeFn: previousBoundTranscludeFn,
                        transcludeControllers: controllers,
                        futureParentElement: futureParentElement
                    });
                }
                var boundSlots = boundTranscludeFn.$$slots = createMap();
                for (var slotName in transcludeFn.$$slots) {
                    if (transcludeFn.$$slots[slotName]) {
                        boundSlots[slotName] = createBoundTranscludeFn(scope, transcludeFn.$$slots[slotName], previousBoundTranscludeFn);
                    } else {
                        boundSlots[slotName] = null;
                    }
                }
                return boundTranscludeFn;
            }
            function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
                var nodeType = node.nodeType, attrsMap = attrs.$attr, match, nodeName, className;
                switch (nodeType) {
                  case NODE_TYPE_ELEMENT:
                    nodeName = nodeName_(node);
                    addDirective(directives, directiveNormalize(nodeName), "E", maxPriority, ignoreDirective);
                    for (var attr, name, nName, value, ngPrefixMatch, nAttrs = node.attributes, j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
                        var attrStartName = false;
                        var attrEndName = false;
                        var isNgAttr = false, isNgProp = false, isNgEvent = false;
                        var multiElementMatch;
                        attr = nAttrs[j];
                        name = attr.name;
                        value = attr.value;
                        nName = directiveNormalize(name.toLowerCase());
                        if (ngPrefixMatch = nName.match(NG_PREFIX_BINDING)) {
                            isNgAttr = ngPrefixMatch[1] === "Attr";
                            isNgProp = ngPrefixMatch[1] === "Prop";
                            isNgEvent = ngPrefixMatch[1] === "On";
                            name = name.replace(PREFIX_REGEXP, "").toLowerCase().substr(4 + ngPrefixMatch[1].length).replace(/_(.)/g, function(match, letter) {
                                return letter.toUpperCase();
                            });
                        } else if ((multiElementMatch = nName.match(MULTI_ELEMENT_DIR_RE)) && directiveIsMultiElement(multiElementMatch[1])) {
                            attrStartName = name;
                            attrEndName = name.substr(0, name.length - 5) + "end";
                            name = name.substr(0, name.length - 6);
                        }
                        if (isNgProp || isNgEvent) {
                            attrs[nName] = value;
                            attrsMap[nName] = attr.name;
                            if (isNgProp) {
                                addPropertyDirective(node, directives, nName, name);
                            } else {
                                addEventDirective(directives, nName, name);
                            }
                        } else {
                            nName = directiveNormalize(name.toLowerCase());
                            attrsMap[nName] = name;
                            if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                                attrs[nName] = value;
                                if (getBooleanAttrName(node, nName)) {
                                    attrs[nName] = true;
                                }
                            }
                            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
                            addDirective(directives, nName, "A", maxPriority, ignoreDirective, attrStartName, attrEndName);
                        }
                    }
                    if (nodeName === "input" && node.getAttribute("type") === "hidden") {
                        node.setAttribute("autocomplete", "off");
                    }
                    if (!cssClassDirectivesEnabled) break;
                    className = node.className;
                    if (isObject(className)) {
                        className = className.animVal;
                    }
                    if (isString(className) && className !== "") {
                        while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
                            nName = directiveNormalize(match[2]);
                            if (addDirective(directives, nName, "C", maxPriority, ignoreDirective)) {
                                attrs[nName] = trim(match[3]);
                            }
                            className = className.substr(match.index + match[0].length);
                        }
                    }
                    break;

                  case NODE_TYPE_TEXT:
                    addTextInterpolateDirective(directives, node.nodeValue);
                    break;

                  case NODE_TYPE_COMMENT:
                    if (!commentDirectivesEnabled) break;
                    collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective);
                    break;
                }
                directives.sort(byPriority);
                return directives;
            }
            function collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
                try {
                    var match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
                    if (match) {
                        var nName = directiveNormalize(match[1]);
                        if (addDirective(directives, nName, "M", maxPriority, ignoreDirective)) {
                            attrs[nName] = trim(match[2]);
                        }
                    }
                } catch (e) {}
            }
            function groupScan(node, attrStart, attrEnd) {
                var nodes = [];
                var depth = 0;
                if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
                    do {
                        if (!node) {
                            throw $compileMinErr("uterdir", "Unterminated attribute, found '{0}' but no matching '{1}' found.", attrStart, attrEnd);
                        }
                        if (node.nodeType === NODE_TYPE_ELEMENT) {
                            if (node.hasAttribute(attrStart)) depth++;
                            if (node.hasAttribute(attrEnd)) depth--;
                        }
                        nodes.push(node);
                        node = node.nextSibling;
                    } while (depth > 0);
                } else {
                    nodes.push(node);
                }
                return jqLite(nodes);
            }
            function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
                return function groupedElementsLink(scope, element, attrs, controllers, transcludeFn) {
                    element = groupScan(element[0], attrStart, attrEnd);
                    return linkFn(scope, element, attrs, controllers, transcludeFn);
                };
            }
            function compilationGenerator(eager, $compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
                var compiled;
                if (eager) {
                    return compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
                }
                return function lazyCompilation() {
                    if (!compiled) {
                        compiled = compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
                        $compileNodes = transcludeFn = previousCompileContext = null;
                    }
                    return compiled.apply(this, arguments);
                };
            }
            function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn, jqCollection, originalReplaceDirective, preLinkFns, postLinkFns, previousCompileContext) {
                previousCompileContext = previousCompileContext || {};
                var terminalPriority = -Number.MAX_VALUE, newScopeDirective = previousCompileContext.newScopeDirective, controllerDirectives = previousCompileContext.controllerDirectives, newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective, templateDirective = previousCompileContext.templateDirective, nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective, hasTranscludeDirective = false, hasTemplate = false, hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective, $compileNode = templateAttrs.$$element = jqLite(compileNode), directive, directiveName, $template, replaceDirective = originalReplaceDirective, childTranscludeFn = transcludeFn, linkFn, didScanForMultipleTransclusion = false, mightHaveMultipleTransclusionError = false, directiveValue;
                for (var i = 0, ii = directives.length; i < ii; i++) {
                    directive = directives[i];
                    var attrStart = directive.$$start;
                    var attrEnd = directive.$$end;
                    if (attrStart) {
                        $compileNode = groupScan(compileNode, attrStart, attrEnd);
                    }
                    $template = undefined;
                    if (terminalPriority > directive.priority) {
                        break;
                    }
                    directiveValue = directive.scope;
                    if (directiveValue) {
                        if (!directive.templateUrl) {
                            if (isObject(directiveValue)) {
                                assertNoDuplicate("new/isolated scope", newIsolateScopeDirective || newScopeDirective, directive, $compileNode);
                                newIsolateScopeDirective = directive;
                            } else {
                                assertNoDuplicate("new/isolated scope", newIsolateScopeDirective, directive, $compileNode);
                            }
                        }
                        newScopeDirective = newScopeDirective || directive;
                    }
                    directiveName = directive.name;
                    if (!didScanForMultipleTransclusion && (directive.replace && (directive.templateUrl || directive.template) || directive.transclude && !directive.$$tlb)) {
                        var candidateDirective;
                        for (var scanningIndex = i + 1; candidateDirective = directives[scanningIndex++]; ) {
                            if (candidateDirective.transclude && !candidateDirective.$$tlb || candidateDirective.replace && (candidateDirective.templateUrl || candidateDirective.template)) {
                                mightHaveMultipleTransclusionError = true;
                                break;
                            }
                        }
                        didScanForMultipleTransclusion = true;
                    }
                    if (!directive.templateUrl && directive.controller) {
                        controllerDirectives = controllerDirectives || createMap();
                        assertNoDuplicate("'" + directiveName + "' controller", controllerDirectives[directiveName], directive, $compileNode);
                        controllerDirectives[directiveName] = directive;
                    }
                    directiveValue = directive.transclude;
                    if (directiveValue) {
                        hasTranscludeDirective = true;
                        if (!directive.$$tlb) {
                            assertNoDuplicate("transclusion", nonTlbTranscludeDirective, directive, $compileNode);
                            nonTlbTranscludeDirective = directive;
                        }
                        if (directiveValue === "element") {
                            hasElementTranscludeDirective = true;
                            terminalPriority = directive.priority;
                            $template = $compileNode;
                            $compileNode = templateAttrs.$$element = jqLite(compile.$$createComment(directiveName, templateAttrs[directiveName]));
                            compileNode = $compileNode[0];
                            replaceWith(jqCollection, sliceArgs($template), compileNode);
                            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, terminalPriority, replaceDirective && replaceDirective.name, {
                                nonTlbTranscludeDirective: nonTlbTranscludeDirective
                            });
                        } else {
                            var slots = createMap();
                            if (!isObject(directiveValue)) {
                                $template = jqLite(jqLiteClone(compileNode)).contents();
                            } else {
                                $template = window.document.createDocumentFragment();
                                var slotMap = createMap();
                                var filledSlots = createMap();
                                forEach(directiveValue, function(elementSelector, slotName) {
                                    var optional = elementSelector.charAt(0) === "?";
                                    elementSelector = optional ? elementSelector.substring(1) : elementSelector;
                                    slotMap[elementSelector] = slotName;
                                    slots[slotName] = null;
                                    filledSlots[slotName] = optional;
                                });
                                forEach($compileNode.contents(), function(node) {
                                    var slotName = slotMap[directiveNormalize(nodeName_(node))];
                                    if (slotName) {
                                        filledSlots[slotName] = true;
                                        slots[slotName] = slots[slotName] || window.document.createDocumentFragment();
                                        slots[slotName].appendChild(node);
                                    } else {
                                        $template.appendChild(node);
                                    }
                                });
                                forEach(filledSlots, function(filled, slotName) {
                                    if (!filled) {
                                        throw $compileMinErr("reqslot", "Required transclusion slot `{0}` was not filled.", slotName);
                                    }
                                });
                                for (var slotName in slots) {
                                    if (slots[slotName]) {
                                        var slotCompileNodes = jqLite(slots[slotName].childNodes);
                                        slots[slotName] = compilationGenerator(mightHaveMultipleTransclusionError, slotCompileNodes, transcludeFn);
                                    }
                                }
                                $template = jqLite($template.childNodes);
                            }
                            $compileNode.empty();
                            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, undefined, undefined, {
                                needsNewScope: directive.$$isolateScope || directive.$$newScope
                            });
                            childTranscludeFn.$$slots = slots;
                        }
                    }
                    if (directive.template) {
                        hasTemplate = true;
                        assertNoDuplicate("template", templateDirective, directive, $compileNode);
                        templateDirective = directive;
                        directiveValue = isFunction(directive.template) ? directive.template($compileNode, templateAttrs) : directive.template;
                        directiveValue = denormalizeTemplate(directiveValue);
                        if (directive.replace) {
                            replaceDirective = directive;
                            if (jqLiteIsTextNode(directiveValue)) {
                                $template = [];
                            } else {
                                $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
                            }
                            compileNode = $template[0];
                            if ($template.length !== 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
                                throw $compileMinErr("tplrt", "Template for directive '{0}' must have exactly one root element. {1}", directiveName, "");
                            }
                            replaceWith(jqCollection, $compileNode, compileNode);
                            var newTemplateAttrs = {
                                $attr: {}
                            };
                            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
                            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));
                            if (newIsolateScopeDirective || newScopeDirective) {
                                markDirectiveScope(templateDirectives, newIsolateScopeDirective, newScopeDirective);
                            }
                            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
                            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);
                            ii = directives.length;
                        } else {
                            $compileNode.html(directiveValue);
                        }
                    }
                    if (directive.templateUrl) {
                        hasTemplate = true;
                        assertNoDuplicate("template", templateDirective, directive, $compileNode);
                        templateDirective = directive;
                        if (directive.replace) {
                            replaceDirective = directive;
                        }
                        nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode, templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                            controllerDirectives: controllerDirectives,
                            newScopeDirective: newScopeDirective !== directive && newScopeDirective,
                            newIsolateScopeDirective: newIsolateScopeDirective,
                            templateDirective: templateDirective,
                            nonTlbTranscludeDirective: nonTlbTranscludeDirective
                        });
                        ii = directives.length;
                    } else if (directive.compile) {
                        try {
                            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
                            var context = directive.$$originalDirective || directive;
                            if (isFunction(linkFn)) {
                                addLinkFns(null, bind(context, linkFn), attrStart, attrEnd);
                            } else if (linkFn) {
                                addLinkFns(bind(context, linkFn.pre), bind(context, linkFn.post), attrStart, attrEnd);
                            }
                        } catch (e) {
                            $exceptionHandler(e, startingTag($compileNode));
                        }
                    }
                    if (directive.terminal) {
                        nodeLinkFn.terminal = true;
                        terminalPriority = Math.max(terminalPriority, directive.priority);
                    }
                }
                nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
                nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
                nodeLinkFn.templateOnThisElement = hasTemplate;
                nodeLinkFn.transclude = childTranscludeFn;
                previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;
                return nodeLinkFn;
                function addLinkFns(pre, post, attrStart, attrEnd) {
                    if (pre) {
                        if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
                        pre.require = directive.require;
                        pre.directiveName = directiveName;
                        if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                            pre = cloneAndAnnotateFn(pre, {
                                isolateScope: true
                            });
                        }
                        preLinkFns.push(pre);
                    }
                    if (post) {
                        if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
                        post.require = directive.require;
                        post.directiveName = directiveName;
                        if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                            post = cloneAndAnnotateFn(post, {
                                isolateScope: true
                            });
                        }
                        postLinkFns.push(post);
                    }
                }
                function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
                    var i, ii, linkFn, isolateScope, controllerScope, elementControllers, transcludeFn, $element, attrs, scopeBindingInfo;
                    if (compileNode === linkNode) {
                        attrs = templateAttrs;
                        $element = templateAttrs.$$element;
                    } else {
                        $element = jqLite(linkNode);
                        attrs = new Attributes($element, templateAttrs);
                    }
                    controllerScope = scope;
                    if (newIsolateScopeDirective) {
                        isolateScope = scope.$new(true);
                    } else if (newScopeDirective) {
                        controllerScope = scope.$parent;
                    }
                    if (boundTranscludeFn) {
                        transcludeFn = controllersBoundTransclude;
                        transcludeFn.$$boundTransclude = boundTranscludeFn;
                        transcludeFn.isSlotFilled = function(slotName) {
                            return !!boundTranscludeFn.$$slots[slotName];
                        };
                    }
                    if (controllerDirectives) {
                        elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective);
                    }
                    if (newIsolateScopeDirective) {
                        compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective || templateDirective === newIsolateScopeDirective.$$originalDirective)));
                        compile.$$addScopeClass($element, true);
                        isolateScope.$$isolateBindings = newIsolateScopeDirective.$$isolateBindings;
                        scopeBindingInfo = initializeDirectiveBindings(scope, attrs, isolateScope, isolateScope.$$isolateBindings, newIsolateScopeDirective);
                        if (scopeBindingInfo.removeWatches) {
                            isolateScope.$on("$destroy", scopeBindingInfo.removeWatches);
                        }
                    }
                    for (var name in elementControllers) {
                        var controllerDirective = controllerDirectives[name];
                        var controller = elementControllers[name];
                        var bindings = controllerDirective.$$bindings.bindToController;
                        controller.instance = controller();
                        $element.data("$" + controllerDirective.name + "Controller", controller.instance);
                        controller.bindingInfo = initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
                    }
                    forEach(controllerDirectives, function(controllerDirective, name) {
                        var require = controllerDirective.require;
                        if (controllerDirective.bindToController && !isArray(require) && isObject(require)) {
                            extend(elementControllers[name].instance, getControllers(name, require, $element, elementControllers));
                        }
                    });
                    forEach(elementControllers, function(controller) {
                        var controllerInstance = controller.instance;
                        if (isFunction(controllerInstance.$onChanges)) {
                            try {
                                controllerInstance.$onChanges(controller.bindingInfo.initialChanges);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                        }
                        if (isFunction(controllerInstance.$onInit)) {
                            try {
                                controllerInstance.$onInit();
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                        }
                        if (isFunction(controllerInstance.$doCheck)) {
                            controllerScope.$watch(function() {
                                controllerInstance.$doCheck();
                            });
                            controllerInstance.$doCheck();
                        }
                        if (isFunction(controllerInstance.$onDestroy)) {
                            controllerScope.$on("$destroy", function callOnDestroyHook() {
                                controllerInstance.$onDestroy();
                            });
                        }
                    });
                    for (i = 0, ii = preLinkFns.length; i < ii; i++) {
                        linkFn = preLinkFns[i];
                        invokeLinkFn(linkFn, linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
                    }
                    var scopeToChild = scope;
                    if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
                        scopeToChild = isolateScope;
                    }
                    if (childLinkFn) {
                        childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);
                    }
                    for (i = postLinkFns.length - 1; i >= 0; i--) {
                        linkFn = postLinkFns[i];
                        invokeLinkFn(linkFn, linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
                    }
                    forEach(elementControllers, function(controller) {
                        var controllerInstance = controller.instance;
                        if (isFunction(controllerInstance.$postLink)) {
                            controllerInstance.$postLink();
                        }
                    });
                    function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement, slotName) {
                        var transcludeControllers;
                        if (!isScope(scope)) {
                            slotName = futureParentElement;
                            futureParentElement = cloneAttachFn;
                            cloneAttachFn = scope;
                            scope = undefined;
                        }
                        if (hasElementTranscludeDirective) {
                            transcludeControllers = elementControllers;
                        }
                        if (!futureParentElement) {
                            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
                        }
                        if (slotName) {
                            var slotTranscludeFn = boundTranscludeFn.$$slots[slotName];
                            if (slotTranscludeFn) {
                                return slotTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
                            } else if (isUndefined(slotTranscludeFn)) {
                                throw $compileMinErr("noslot", 'No parent directive that requires a transclusion with slot name "{0}". ' + "Element: {1}", slotName, startingTag($element));
                            }
                        } else {
                            return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
                        }
                    }
                }
            }
            function getControllers(directiveName, require, $element, elementControllers) {
                var value;
                if (isString(require)) {
                    var match = require.match(REQUIRE_PREFIX_REGEXP);
                    var name = require.substring(match[0].length);
                    var inheritType = match[1] || match[3];
                    var optional = match[2] === "?";
                    if (inheritType === "^^") {
                        $element = $element.parent();
                    } else {
                        value = elementControllers && elementControllers[name];
                        value = value && value.instance;
                    }
                    if (!value) {
                        var dataName = "$" + name + "Controller";
                        if (inheritType === "^^" && $element[0] && $element[0].nodeType === NODE_TYPE_DOCUMENT) {
                            value = null;
                        } else {
                            value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
                        }
                    }
                    if (!value && !optional) {
                        throw $compileMinErr("ctreq", "Controller '{0}', required by directive '{1}', can't be found!", name, directiveName);
                    }
                } else if (isArray(require)) {
                    value = [];
                    for (var i = 0, ii = require.length; i < ii; i++) {
                        value[i] = getControllers(directiveName, require[i], $element, elementControllers);
                    }
                } else if (isObject(require)) {
                    value = {};
                    forEach(require, function(controller, property) {
                        value[property] = getControllers(directiveName, controller, $element, elementControllers);
                    });
                }
                return value || null;
            }
            function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective) {
                var elementControllers = createMap();
                for (var controllerKey in controllerDirectives) {
                    var directive = controllerDirectives[controllerKey];
                    var locals = {
                        $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
                        $element: $element,
                        $attrs: attrs,
                        $transclude: transcludeFn
                    };
                    var controller = directive.controller;
                    if (controller === "@") {
                        controller = attrs[directive.name];
                    }
                    var controllerInstance = $controller(controller, locals, true, directive.controllerAs);
                    elementControllers[directive.name] = controllerInstance;
                    $element.data("$" + directive.name + "Controller", controllerInstance.instance);
                }
                return elementControllers;
            }
            function markDirectiveScope(directives, isolateScope, newScope) {
                for (var j = 0, jj = directives.length; j < jj; j++) {
                    directives[j] = inherit(directives[j], {
                        $$isolateScope: isolateScope,
                        $$newScope: newScope
                    });
                }
            }
            function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName, endAttrName) {
                if (name === ignoreDirective) return null;
                var match = null;
                if (hasDirectives.hasOwnProperty(name)) {
                    for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
                        directive = directives[i];
                        if ((isUndefined(maxPriority) || maxPriority > directive.priority) && directive.restrict.indexOf(location) !== -1) {
                            if (startAttrName) {
                                directive = inherit(directive, {
                                    $$start: startAttrName,
                                    $$end: endAttrName
                                });
                            }
                            if (!directive.$$bindings) {
                                var bindings = directive.$$bindings = parseDirectiveBindings(directive, directive.name);
                                if (isObject(bindings.isolateScope)) {
                                    directive.$$isolateBindings = bindings.isolateScope;
                                }
                            }
                            tDirectives.push(directive);
                            match = directive;
                        }
                    }
                }
                return match;
            }
            function directiveIsMultiElement(name) {
                if (hasDirectives.hasOwnProperty(name)) {
                    for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
                        directive = directives[i];
                        if (directive.multiElement) {
                            return true;
                        }
                    }
                }
                return false;
            }
            function mergeTemplateAttributes(dst, src) {
                var srcAttr = src.$attr, dstAttr = dst.$attr;
                forEach(dst, function(value, key) {
                    if (key.charAt(0) !== "$") {
                        if (src[key] && src[key] !== value) {
                            if (value.length) {
                                value += (key === "style" ? ";" : " ") + src[key];
                            } else {
                                value = src[key];
                            }
                        }
                        dst.$set(key, value, true, srcAttr[key]);
                    }
                });
                forEach(src, function(value, key) {
                    if (!dst.hasOwnProperty(key) && key.charAt(0) !== "$") {
                        dst[key] = value;
                        if (key !== "class" && key !== "style") {
                            dstAttr[key] = srcAttr[key];
                        }
                    }
                });
            }
            function compileTemplateUrl(directives, $compileNode, tAttrs, $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
                var linkQueue = [], afterTemplateNodeLinkFn, afterTemplateChildLinkFn, beforeTemplateCompileNode = $compileNode[0], origAsyncDirective = directives.shift(), derivedSyncDirective = inherit(origAsyncDirective, {
                    templateUrl: null,
                    transclude: null,
                    replace: null,
                    $$originalDirective: origAsyncDirective
                }), templateUrl = isFunction(origAsyncDirective.templateUrl) ? origAsyncDirective.templateUrl($compileNode, tAttrs) : origAsyncDirective.templateUrl, templateNamespace = origAsyncDirective.templateNamespace;
                $compileNode.empty();
                $templateRequest(templateUrl).then(function(content) {
                    var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;
                    content = denormalizeTemplate(content);
                    if (origAsyncDirective.replace) {
                        if (jqLiteIsTextNode(content)) {
                            $template = [];
                        } else {
                            $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
                        }
                        compileNode = $template[0];
                        if ($template.length !== 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
                            throw $compileMinErr("tplrt", "Template for directive '{0}' must have exactly one root element. {1}", origAsyncDirective.name, templateUrl);
                        }
                        tempTemplateAttrs = {
                            $attr: {}
                        };
                        replaceWith($rootElement, $compileNode, compileNode);
                        var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);
                        if (isObject(origAsyncDirective.scope)) {
                            markDirectiveScope(templateDirectives, true);
                        }
                        directives = templateDirectives.concat(directives);
                        mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
                    } else {
                        compileNode = beforeTemplateCompileNode;
                        $compileNode.html(content);
                    }
                    directives.unshift(derivedSyncDirective);
                    afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs, childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns, previousCompileContext);
                    forEach($rootElement, function(node, i) {
                        if (node === compileNode) {
                            $rootElement[i] = $compileNode[0];
                        }
                    });
                    afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);
                    while (linkQueue.length) {
                        var scope = linkQueue.shift(), beforeTemplateLinkNode = linkQueue.shift(), linkRootElement = linkQueue.shift(), boundTranscludeFn = linkQueue.shift(), linkNode = $compileNode[0];
                        if (scope.$$destroyed) continue;
                        if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
                            var oldClasses = beforeTemplateLinkNode.className;
                            if (!(previousCompileContext.hasElementTranscludeDirective && origAsyncDirective.replace)) {
                                linkNode = jqLiteClone(compileNode);
                            }
                            replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);
                            safeAddClass(jqLite(linkNode), oldClasses);
                        }
                        if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
                        } else {
                            childBoundTranscludeFn = boundTranscludeFn;
                        }
                        afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, childBoundTranscludeFn);
                    }
                    linkQueue = null;
                }).catch(function(error) {
                    if (isError(error)) {
                        $exceptionHandler(error);
                    }
                });
                return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
                    var childBoundTranscludeFn = boundTranscludeFn;
                    if (scope.$$destroyed) return;
                    if (linkQueue) {
                        linkQueue.push(scope, node, rootElement, childBoundTranscludeFn);
                    } else {
                        if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
                        }
                        afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
                    }
                };
            }
            function byPriority(a, b) {
                var diff = b.priority - a.priority;
                if (diff !== 0) return diff;
                if (a.name !== b.name) return a.name < b.name ? -1 : 1;
                return a.index - b.index;
            }
            function assertNoDuplicate(what, previousDirective, directive, element) {
                function wrapModuleNameIfDefined(moduleName) {
                    return moduleName ? " (module: " + moduleName + ")" : "";
                }
                if (previousDirective) {
                    throw $compileMinErr("multidir", "Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}", previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName), directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
                }
            }
            function addTextInterpolateDirective(directives, text) {
                var interpolateFn = $interpolate(text, true);
                if (interpolateFn) {
                    directives.push({
                        priority: 0,
                        compile: function textInterpolateCompileFn(templateNode) {
                            var templateNodeParent = templateNode.parent(), hasCompileParent = !!templateNodeParent.length;
                            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);
                            return function textInterpolateLinkFn(scope, node) {
                                var parent = node.parent();
                                if (!hasCompileParent) compile.$$addBindingClass(parent);
                                compile.$$addBindingInfo(parent, interpolateFn.expressions);
                                scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                                    node[0].nodeValue = value;
                                });
                            };
                        }
                    });
                }
            }
            function wrapTemplate(type, template) {
                type = lowercase(type || "html");
                switch (type) {
                  case "svg":
                  case "math":
                    var wrapper = window.document.createElement("div");
                    wrapper.innerHTML = "<" + type + ">" + template + "</" + type + ">";
                    return wrapper.childNodes[0].childNodes;

                  default:
                    return template;
                }
            }
            function getTrustedAttrContext(nodeName, attrNormalizedName) {
                if (attrNormalizedName === "srcdoc") {
                    return $sce.HTML;
                }
                if (attrNormalizedName === "src" || attrNormalizedName === "ngSrc") {
                    if ([ "img", "video", "audio", "source", "track" ].indexOf(nodeName) === -1) {
                        return $sce.RESOURCE_URL;
                    }
                    return $sce.MEDIA_URL;
                } else if (attrNormalizedName === "xlinkHref") {
                    if (nodeName === "image") return $sce.MEDIA_URL;
                    if (nodeName === "a") return $sce.URL;
                    return $sce.RESOURCE_URL;
                } else if (nodeName === "form" && attrNormalizedName === "action" || nodeName === "base" && attrNormalizedName === "href" || nodeName === "link" && attrNormalizedName === "href") {
                    return $sce.RESOURCE_URL;
                } else if (nodeName === "a" && (attrNormalizedName === "href" || attrNormalizedName === "ngHref")) {
                    return $sce.URL;
                }
            }
            function getTrustedPropContext(nodeName, propNormalizedName) {
                var prop = propNormalizedName.toLowerCase();
                return PROP_CONTEXTS[nodeName + "|" + prop] || PROP_CONTEXTS["*|" + prop];
            }
            function sanitizeSrcsetPropertyValue(value) {
                return sanitizeSrcset($sce.valueOf(value), "ng-prop-srcset");
            }
            function addPropertyDirective(node, directives, attrName, propName) {
                if (EVENT_HANDLER_ATTR_REGEXP.test(propName)) {
                    throw $compileMinErr("nodomevents", "Property bindings for HTML DOM event properties are disallowed");
                }
                var nodeName = nodeName_(node);
                var trustedContext = getTrustedPropContext(nodeName, propName);
                var sanitizer = identity;
                if (propName === "srcset" && (nodeName === "img" || nodeName === "source")) {
                    sanitizer = sanitizeSrcsetPropertyValue;
                } else if (trustedContext) {
                    sanitizer = $sce.getTrusted.bind($sce, trustedContext);
                }
                directives.push({
                    priority: 100,
                    compile: function ngPropCompileFn(_, attr) {
                        var ngPropGetter = $parse(attr[attrName]);
                        var ngPropWatch = $parse(attr[attrName], function sceValueOf(val) {
                            return $sce.valueOf(val);
                        });
                        return {
                            pre: function ngPropPreLinkFn(scope, $element) {
                                function applyPropValue() {
                                    var propValue = ngPropGetter(scope);
                                    $element[0][propName] = sanitizer(propValue);
                                }
                                applyPropValue();
                                scope.$watch(ngPropWatch, applyPropValue);
                            }
                        };
                    }
                });
            }
            function addEventDirective(directives, attrName, eventName) {
                directives.push(createEventDirective($parse, $rootScope, $exceptionHandler, attrName, eventName, false));
            }
            function addAttrInterpolateDirective(node, directives, value, name, isNgAttr) {
                var nodeName = nodeName_(node);
                var trustedContext = getTrustedAttrContext(nodeName, name);
                var mustHaveExpression = !isNgAttr;
                var allOrNothing = ALL_OR_NOTHING_ATTRS[name] || isNgAttr;
                var interpolateFn = $interpolate(value, mustHaveExpression, trustedContext, allOrNothing);
                if (!interpolateFn) return;
                if (name === "multiple" && nodeName === "select") {
                    throw $compileMinErr("selmulti", "Binding to the 'multiple' attribute is not supported. Element: {0}", startingTag(node));
                }
                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                    throw $compileMinErr("nodomevents", "Interpolations for HTML DOM event attributes are disallowed");
                }
                directives.push({
                    priority: 100,
                    compile: function() {
                        return {
                            pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                                var $$observers = attr.$$observers || (attr.$$observers = createMap());
                                var newValue = attr[name];
                                if (newValue !== value) {
                                    interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
                                    value = newValue;
                                }
                                if (!interpolateFn) return;
                                attr[name] = interpolateFn(scope);
                                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                                (attr.$$observers && attr.$$observers[name].$$scope || scope).$watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                                    if (name === "class" && newValue !== oldValue) {
                                        attr.$updateClass(newValue, oldValue);
                                    } else {
                                        attr.$set(name, newValue);
                                    }
                                });
                            }
                        };
                    }
                });
            }
            function replaceWith($rootElement, elementsToRemove, newNode) {
                var firstElementToRemove = elementsToRemove[0], removeCount = elementsToRemove.length, parent = firstElementToRemove.parentNode, i, ii;
                if ($rootElement) {
                    for (i = 0, ii = $rootElement.length; i < ii; i++) {
                        if ($rootElement[i] === firstElementToRemove) {
                            $rootElement[i++] = newNode;
                            for (var j = i, j2 = j + removeCount - 1, jj = $rootElement.length; j < jj; j++, 
                            j2++) {
                                if (j2 < jj) {
                                    $rootElement[j] = $rootElement[j2];
                                } else {
                                    delete $rootElement[j];
                                }
                            }
                            $rootElement.length -= removeCount - 1;
                            if ($rootElement.context === firstElementToRemove) {
                                $rootElement.context = newNode;
                            }
                            break;
                        }
                    }
                }
                if (parent) {
                    parent.replaceChild(newNode, firstElementToRemove);
                }
                var fragment = window.document.createDocumentFragment();
                for (i = 0; i < removeCount; i++) {
                    fragment.appendChild(elementsToRemove[i]);
                }
                if (jqLite.hasData(firstElementToRemove)) {
                    jqLite.data(newNode, jqLite.data(firstElementToRemove));
                    jqLite(firstElementToRemove).off("$destroy");
                }
                jqLite.cleanData(fragment.querySelectorAll("*"));
                for (i = 1; i < removeCount; i++) {
                    delete elementsToRemove[i];
                }
                elementsToRemove[0] = newNode;
                elementsToRemove.length = 1;
            }
            function cloneAndAnnotateFn(fn, annotation) {
                return extend(function() {
                    return fn.apply(null, arguments);
                }, fn, annotation);
            }
            function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
                try {
                    linkFn(scope, $element, attrs, controllers, transcludeFn);
                } catch (e) {
                    $exceptionHandler(e, startingTag($element));
                }
            }
            function strictBindingsCheck(attrName, directiveName) {
                if (strictComponentBindingsEnabled) {
                    throw $compileMinErr("missingattr", "Attribute '{0}' of '{1}' is non-optional and must be set!", attrName, directiveName);
                }
            }
            function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {
                var removeWatchCollection = [];
                var initialChanges = {};
                var changes;
                forEach(bindings, function initializeBinding(definition, scopeName) {
                    var attrName = definition.attrName, optional = definition.optional, mode = definition.mode, lastValue, parentGet, parentSet, compare, removeWatch;
                    switch (mode) {
                      case "@":
                        if (!optional && !hasOwnProperty.call(attrs, attrName)) {
                            strictBindingsCheck(attrName, directive.name);
                            destination[scopeName] = attrs[attrName] = undefined;
                        }
                        removeWatch = attrs.$observe(attrName, function(value) {
                            if (isString(value) || isBoolean(value)) {
                                var oldValue = destination[scopeName];
                                recordChanges(scopeName, value, oldValue);
                                destination[scopeName] = value;
                            }
                        });
                        attrs.$$observers[attrName].$$scope = scope;
                        lastValue = attrs[attrName];
                        if (isString(lastValue)) {
                            destination[scopeName] = $interpolate(lastValue)(scope);
                        } else if (isBoolean(lastValue)) {
                            destination[scopeName] = lastValue;
                        }
                        initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
                        removeWatchCollection.push(removeWatch);
                        break;

                      case "=":
                        if (!hasOwnProperty.call(attrs, attrName)) {
                            if (optional) break;
                            strictBindingsCheck(attrName, directive.name);
                            attrs[attrName] = undefined;
                        }
                        if (optional && !attrs[attrName]) break;
                        parentGet = $parse(attrs[attrName]);
                        if (parentGet.literal) {
                            compare = equals;
                        } else {
                            compare = simpleCompare;
                        }
                        parentSet = parentGet.assign || function() {
                            lastValue = destination[scopeName] = parentGet(scope);
                            throw $compileMinErr("nonassign", "Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!", attrs[attrName], attrName, directive.name);
                        };
                        lastValue = destination[scopeName] = parentGet(scope);
                        var parentValueWatch = function parentValueWatch(parentValue) {
                            if (!compare(parentValue, destination[scopeName])) {
                                if (!compare(parentValue, lastValue)) {
                                    destination[scopeName] = parentValue;
                                } else {
                                    parentSet(scope, parentValue = destination[scopeName]);
                                }
                            }
                            lastValue = parentValue;
                            return lastValue;
                        };
                        parentValueWatch.$stateful = true;
                        if (definition.collection) {
                            removeWatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
                        } else {
                            removeWatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
                        }
                        removeWatchCollection.push(removeWatch);
                        break;

                      case "<":
                        if (!hasOwnProperty.call(attrs, attrName)) {
                            if (optional) break;
                            strictBindingsCheck(attrName, directive.name);
                            attrs[attrName] = undefined;
                        }
                        if (optional && !attrs[attrName]) break;
                        parentGet = $parse(attrs[attrName]);
                        var isLiteral = parentGet.literal;
                        var initialValue = destination[scopeName] = parentGet(scope);
                        initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
                        removeWatch = scope[definition.collection ? "$watchCollection" : "$watch"](parentGet, function parentValueWatchAction(newValue, oldValue) {
                            if (oldValue === newValue) {
                                if (oldValue === initialValue || isLiteral && equals(oldValue, initialValue)) {
                                    return;
                                }
                                oldValue = initialValue;
                            }
                            recordChanges(scopeName, newValue, oldValue);
                            destination[scopeName] = newValue;
                        });
                        removeWatchCollection.push(removeWatch);
                        break;

                      case "&":
                        if (!optional && !hasOwnProperty.call(attrs, attrName)) {
                            strictBindingsCheck(attrName, directive.name);
                        }
                        parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;
                        if (parentGet === noop && optional) break;
                        destination[scopeName] = function(locals) {
                            return parentGet(scope, locals);
                        };
                        break;
                    }
                });
                function recordChanges(key, currentValue, previousValue) {
                    if (isFunction(destination.$onChanges) && !simpleCompare(currentValue, previousValue)) {
                        if (!onChangesQueue) {
                            scope.$$postDigest(flushOnChangesQueue);
                            onChangesQueue = [];
                        }
                        if (!changes) {
                            changes = {};
                            onChangesQueue.push(triggerOnChangesHook);
                        }
                        if (changes[key]) {
                            previousValue = changes[key].previousValue;
                        }
                        changes[key] = new SimpleChange(previousValue, currentValue);
                    }
                }
                function triggerOnChangesHook() {
                    destination.$onChanges(changes);
                    changes = undefined;
                }
                return {
                    initialChanges: initialChanges,
                    removeWatches: removeWatchCollection.length && function removeWatches() {
                        for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) {
                            removeWatchCollection[i]();
                        }
                    }
                };
            }
        } ];
    }
    function SimpleChange(previous, current) {
        this.previousValue = previous;
        this.currentValue = current;
    }
    SimpleChange.prototype.isFirstChange = function() {
        return this.previousValue === _UNINITIALIZED_VALUE;
    };
    var PREFIX_REGEXP = /^((?:x|data)[:\-_])/i;
    var SPECIAL_CHARS_REGEXP = /[:\-_]+(.)/g;
    function directiveNormalize(name) {
        return name.replace(PREFIX_REGEXP, "").replace(SPECIAL_CHARS_REGEXP, function(_, letter, offset) {
            return offset ? letter.toUpperCase() : letter;
        });
    }
    function nodesetLinkingFn(scope, nodeList, rootElement, boundTranscludeFn) {}
    function directiveLinkingFn(nodesetLinkingFn, scope, node, rootElement, boundTranscludeFn) {}
    function tokenDifference(str1, str2) {
        var values = "", tokens1 = str1.split(/\s+/), tokens2 = str2.split(/\s+/);
        outer: for (var i = 0; i < tokens1.length; i++) {
            var token = tokens1[i];
            for (var j = 0; j < tokens2.length; j++) {
                if (token === tokens2[j]) continue outer;
            }
            values += (values.length > 0 ? " " : "") + token;
        }
        return values;
    }
    function removeComments(jqNodes) {
        jqNodes = jqLite(jqNodes);
        var i = jqNodes.length;
        if (i <= 1) {
            return jqNodes;
        }
        while (i--) {
            var node = jqNodes[i];
            if (node.nodeType === NODE_TYPE_COMMENT || node.nodeType === NODE_TYPE_TEXT && node.nodeValue.trim() === "") {
                splice.call(jqNodes, i, 1);
            }
        }
        return jqNodes;
    }
    var $controllerMinErr = minErr("$controller");
    var CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/;
    function identifierForController(controller, ident) {
        if (ident && isString(ident)) return ident;
        if (isString(controller)) {
            var match = CNTRL_REG.exec(controller);
            if (match) return match[3];
        }
    }
    function $ControllerProvider() {
        var controllers = {};
        this.has = function(name) {
            return controllers.hasOwnProperty(name);
        };
        this.register = function(name, constructor) {
            assertNotHasOwnProperty(name, "controller");
            if (isObject(name)) {
                extend(controllers, name);
            } else {
                controllers[name] = constructor;
            }
        };
        this.$get = [ "$injector", function($injector) {
            return function $controller(expression, locals, later, ident) {
                var instance, match, constructor, identifier;
                later = later === true;
                if (ident && isString(ident)) {
                    identifier = ident;
                }
                if (isString(expression)) {
                    match = expression.match(CNTRL_REG);
                    if (!match) {
                        throw $controllerMinErr("ctrlfmt", "Badly formed controller string '{0}'. " + "Must match `__name__ as __id__` or `__name__`.", expression);
                    }
                    constructor = match[1];
                    identifier = identifier || match[3];
                    expression = controllers.hasOwnProperty(constructor) ? controllers[constructor] : getter(locals.$scope, constructor, true);
                    if (!expression) {
                        throw $controllerMinErr("ctrlreg", "The controller with the name '{0}' is not registered.", constructor);
                    }
                    assertArgFn(expression, constructor, true);
                }
                if (later) {
                    var controllerPrototype = (isArray(expression) ? expression[expression.length - 1] : expression).prototype;
                    instance = Object.create(controllerPrototype || null);
                    if (identifier) {
                        addIdentifier(locals, identifier, instance, constructor || expression.name);
                    }
                    return extend(function $controllerInit() {
                        var result = $injector.invoke(expression, instance, locals, constructor);
                        if (result !== instance && (isObject(result) || isFunction(result))) {
                            instance = result;
                            if (identifier) {
                                addIdentifier(locals, identifier, instance, constructor || expression.name);
                            }
                        }
                        return instance;
                    }, {
                        instance: instance,
                        identifier: identifier
                    });
                }
                instance = $injector.instantiate(expression, locals, constructor);
                if (identifier) {
                    addIdentifier(locals, identifier, instance, constructor || expression.name);
                }
                return instance;
            };
            function addIdentifier(locals, identifier, instance, name) {
                if (!(locals && isObject(locals.$scope))) {
                    throw minErr("$controller")("noscp", "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.", name, identifier);
                }
                locals.$scope[identifier] = instance;
            }
        } ];
    }
    function $DocumentProvider() {
        this.$get = [ "$window", function(window) {
            return jqLite(window.document);
        } ];
    }
    function $$IsDocumentHiddenProvider() {
        this.$get = [ "$document", "$rootScope", function($document, $rootScope) {
            var doc = $document[0];
            var hidden = doc && doc.hidden;
            $document.on("visibilitychange", changeListener);
            $rootScope.$on("$destroy", function() {
                $document.off("visibilitychange", changeListener);
            });
            function changeListener() {
                hidden = doc.hidden;
            }
            return function() {
                return hidden;
            };
        } ];
    }
    function $ExceptionHandlerProvider() {
        this.$get = [ "$log", function($log) {
            return function(exception, cause) {
                $log.error.apply($log, arguments);
            };
        } ];
    }
    var $$ForceReflowProvider = function() {
        this.$get = [ "$document", function($document) {
            return function(domNode) {
                if (domNode) {
                    if (!domNode.nodeType && domNode instanceof jqLite) {
                        domNode = domNode[0];
                    }
                } else {
                    domNode = $document[0].body;
                }
                return domNode.offsetWidth + 1;
            };
        } ];
    };
    var APPLICATION_JSON = "application/json";
    var CONTENT_TYPE_APPLICATION_JSON = {
        "Content-Type": APPLICATION_JSON + ";charset=utf-8"
    };
    var JSON_START = /^\[|^\{(?!\{)/;
    var JSON_ENDS = {
        "[": /]$/,
        "{": /}$/
    };
    var JSON_PROTECTION_PREFIX = /^\)]\}',?\n/;
    var $httpMinErr = minErr("$http");
    function serializeValue(v) {
        if (isObject(v)) {
            return isDate(v) ? v.toISOString() : toJson(v);
        }
        return v;
    }
    function $HttpParamSerializerProvider() {
        this.$get = function() {
            return function ngParamSerializer(params) {
                if (!params) return "";
                var parts = [];
                forEachSorted(params, function(value, key) {
                    if (value === null || isUndefined(value) || isFunction(value)) return;
                    if (isArray(value)) {
                        forEach(value, function(v) {
                            parts.push(encodeUriQuery(key) + "=" + encodeUriQuery(serializeValue(v)));
                        });
                    } else {
                        parts.push(encodeUriQuery(key) + "=" + encodeUriQuery(serializeValue(value)));
                    }
                });
                return parts.join("&");
            };
        };
    }
    function $HttpParamSerializerJQLikeProvider() {
        this.$get = function() {
            return function jQueryLikeParamSerializer(params) {
                if (!params) return "";
                var parts = [];
                serialize(params, "", true);
                return parts.join("&");
                function serialize(toSerialize, prefix, topLevel) {
                    if (isArray(toSerialize)) {
                        forEach(toSerialize, function(value, index) {
                            serialize(value, prefix + "[" + (isObject(value) ? index : "") + "]");
                        });
                    } else if (isObject(toSerialize) && !isDate(toSerialize)) {
                        forEachSorted(toSerialize, function(value, key) {
                            serialize(value, prefix + (topLevel ? "" : "[") + key + (topLevel ? "" : "]"));
                        });
                    } else {
                        if (isFunction(toSerialize)) {
                            toSerialize = toSerialize();
                        }
                        parts.push(encodeUriQuery(prefix) + "=" + (toSerialize == null ? "" : encodeUriQuery(serializeValue(toSerialize))));
                    }
                }
            };
        };
    }
    function defaultHttpResponseTransform(data, headers) {
        if (isString(data)) {
            var tempData = data.replace(JSON_PROTECTION_PREFIX, "").trim();
            if (tempData) {
                var contentType = headers("Content-Type");
                var hasJsonContentType = contentType && contentType.indexOf(APPLICATION_JSON) === 0;
                if (hasJsonContentType || isJsonLike(tempData)) {
                    try {
                        data = fromJson(tempData);
                    } catch (e) {
                        if (!hasJsonContentType) {
                            return data;
                        }
                        throw $httpMinErr("baddata", 'Data must be a valid JSON object. Received: "{0}". ' + 'Parse error: "{1}"', data, e);
                    }
                }
            }
        }
        return data;
    }
    function isJsonLike(str) {
        var jsonStart = str.match(JSON_START);
        return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
    }
    function parseHeaders(headers) {
        var parsed = createMap(), i;
        function fillInParsed(key, val) {
            if (key) {
                parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
            }
        }
        if (isString(headers)) {
            forEach(headers.split("\n"), function(line) {
                i = line.indexOf(":");
                fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
            });
        } else if (isObject(headers)) {
            forEach(headers, function(headerVal, headerKey) {
                fillInParsed(lowercase(headerKey), trim(headerVal));
            });
        }
        return parsed;
    }
    function headersGetter(headers) {
        var headersObj;
        return function(name) {
            if (!headersObj) headersObj = parseHeaders(headers);
            if (name) {
                var value = headersObj[lowercase(name)];
                if (value === undefined) {
                    value = null;
                }
                return value;
            }
            return headersObj;
        };
    }
    function transformData(data, headers, status, fns) {
        if (isFunction(fns)) {
            return fns(data, headers, status);
        }
        forEach(fns, function(fn) {
            data = fn(data, headers, status);
        });
        return data;
    }
    function isSuccess(status) {
        return 200 <= status && status < 300;
    }
    function $HttpProvider() {
        var defaults = this.defaults = {
            transformResponse: [ defaultHttpResponseTransform ],
            transformRequest: [ function(d) {
                return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
            } ],
            headers: {
                common: {
                    Accept: "application/json, text/plain, */*"
                },
                post: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
                put: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
                patch: shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
            },
            xsrfCookieName: "XSRF-TOKEN",
            xsrfHeaderName: "X-XSRF-TOKEN",
            paramSerializer: "$httpParamSerializer",
            jsonpCallbackParam: "callback"
        };
        var useApplyAsync = false;
        this.useApplyAsync = function(value) {
            if (isDefined(value)) {
                useApplyAsync = !!value;
                return this;
            }
            return useApplyAsync;
        };
        var interceptorFactories = this.interceptors = [];
        var xsrfTrustedOrigins = this.xsrfTrustedOrigins = [];
        Object.defineProperty(this, "xsrfWhitelistedOrigins", {
            get: function() {
                return this.xsrfTrustedOrigins;
            },
            set: function(origins) {
                this.xsrfTrustedOrigins = origins;
            }
        });
        this.$get = [ "$browser", "$httpBackend", "$$cookieReader", "$cacheFactory", "$rootScope", "$q", "$injector", "$sce", function($browser, $httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector, $sce) {
            var defaultCache = $cacheFactory("$http");
            defaults.paramSerializer = isString(defaults.paramSerializer) ? $injector.get(defaults.paramSerializer) : defaults.paramSerializer;
            var reversedInterceptors = [];
            forEach(interceptorFactories, function(interceptorFactory) {
                reversedInterceptors.unshift(isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
            });
            var urlIsAllowedOrigin = urlIsAllowedOriginFactory(xsrfTrustedOrigins);
            function $http(requestConfig) {
                if (!isObject(requestConfig)) {
                    throw minErr("$http")("badreq", "Http request configuration must be an object.  Received: {0}", requestConfig);
                }
                if (!isString($sce.valueOf(requestConfig.url))) {
                    throw minErr("$http")("badreq", "Http request configuration url must be a string or a $sce trusted object.  Received: {0}", requestConfig.url);
                }
                var config = extend({
                    method: "get",
                    transformRequest: defaults.transformRequest,
                    transformResponse: defaults.transformResponse,
                    paramSerializer: defaults.paramSerializer,
                    jsonpCallbackParam: defaults.jsonpCallbackParam
                }, requestConfig);
                config.headers = mergeHeaders(requestConfig);
                config.method = uppercase(config.method);
                config.paramSerializer = isString(config.paramSerializer) ? $injector.get(config.paramSerializer) : config.paramSerializer;
                $browser.$$incOutstandingRequestCount("$http");
                var requestInterceptors = [];
                var responseInterceptors = [];
                var promise = $q.resolve(config);
                forEach(reversedInterceptors, function(interceptor) {
                    if (interceptor.request || interceptor.requestError) {
                        requestInterceptors.unshift(interceptor.request, interceptor.requestError);
                    }
                    if (interceptor.response || interceptor.responseError) {
                        responseInterceptors.push(interceptor.response, interceptor.responseError);
                    }
                });
                promise = chainInterceptors(promise, requestInterceptors);
                promise = promise.then(serverRequest);
                promise = chainInterceptors(promise, responseInterceptors);
                promise = promise.finally(completeOutstandingRequest);
                return promise;
                function chainInterceptors(promise, interceptors) {
                    for (var i = 0, ii = interceptors.length; i < ii; ) {
                        var thenFn = interceptors[i++];
                        var rejectFn = interceptors[i++];
                        promise = promise.then(thenFn, rejectFn);
                    }
                    interceptors.length = 0;
                    return promise;
                }
                function completeOutstandingRequest() {
                    $browser.$$completeOutstandingRequest(noop, "$http");
                }
                function executeHeaderFns(headers, config) {
                    var headerContent, processedHeaders = {};
                    forEach(headers, function(headerFn, header) {
                        if (isFunction(headerFn)) {
                            headerContent = headerFn(config);
                            if (headerContent != null) {
                                processedHeaders[header] = headerContent;
                            }
                        } else {
                            processedHeaders[header] = headerFn;
                        }
                    });
                    return processedHeaders;
                }
                function mergeHeaders(config) {
                    var defHeaders = defaults.headers, reqHeaders = extend({}, config.headers), defHeaderName, lowercaseDefHeaderName, reqHeaderName;
                    defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);
                    defaultHeadersIteration: for (defHeaderName in defHeaders) {
                        lowercaseDefHeaderName = lowercase(defHeaderName);
                        for (reqHeaderName in reqHeaders) {
                            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
                                continue defaultHeadersIteration;
                            }
                        }
                        reqHeaders[defHeaderName] = defHeaders[defHeaderName];
                    }
                    return executeHeaderFns(reqHeaders, shallowCopy(config));
                }
                function serverRequest(config) {
                    var headers = config.headers;
                    var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);
                    if (isUndefined(reqData)) {
                        forEach(headers, function(value, header) {
                            if (lowercase(header) === "content-type") {
                                delete headers[header];
                            }
                        });
                    }
                    if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
                        config.withCredentials = defaults.withCredentials;
                    }
                    return sendReq(config, reqData).then(transformResponse, transformResponse);
                }
                function transformResponse(response) {
                    var resp = extend({}, response);
                    resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);
                    return isSuccess(response.status) ? resp : $q.reject(resp);
                }
            }
            $http.pendingRequests = [];
            createShortMethods("get", "delete", "head", "jsonp");
            createShortMethodsWithData("post", "put", "patch");
            $http.defaults = defaults;
            return $http;
            function createShortMethods(names) {
                forEach(arguments, function(name) {
                    $http[name] = function(url, config) {
                        return $http(extend({}, config || {}, {
                            method: name,
                            url: url
                        }));
                    };
                });
            }
            function createShortMethodsWithData(name) {
                forEach(arguments, function(name) {
                    $http[name] = function(url, data, config) {
                        return $http(extend({}, config || {}, {
                            method: name,
                            url: url,
                            data: data
                        }));
                    };
                });
            }
            function sendReq(config, reqData) {
                var deferred = $q.defer(), promise = deferred.promise, cache, cachedResp, reqHeaders = config.headers, isJsonp = lowercase(config.method) === "jsonp", url = config.url;
                if (isJsonp) {
                    url = $sce.getTrustedResourceUrl(url);
                } else if (!isString(url)) {
                    url = $sce.valueOf(url);
                }
                url = buildUrl(url, config.paramSerializer(config.params));
                if (isJsonp) {
                    url = sanitizeJsonpCallbackParam(url, config.jsonpCallbackParam);
                }
                $http.pendingRequests.push(config);
                promise.then(removePendingReq, removePendingReq);
                if ((config.cache || defaults.cache) && config.cache !== false && (config.method === "GET" || config.method === "JSONP")) {
                    cache = isObject(config.cache) ? config.cache : isObject(defaults.cache) ? defaults.cache : defaultCache;
                }
                if (cache) {
                    cachedResp = cache.get(url);
                    if (isDefined(cachedResp)) {
                        if (isPromiseLike(cachedResp)) {
                            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
                        } else {
                            if (isArray(cachedResp)) {
                                resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3], cachedResp[4]);
                            } else {
                                resolvePromise(cachedResp, 200, {}, "OK", "complete");
                            }
                        }
                    } else {
                        cache.put(url, promise);
                    }
                }
                if (isUndefined(cachedResp)) {
                    var xsrfValue = urlIsAllowedOrigin(config.url) ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName] : undefined;
                    if (xsrfValue) {
                        reqHeaders[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue;
                    }
                    $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout, config.withCredentials, config.responseType, createApplyHandlers(config.eventHandlers), createApplyHandlers(config.uploadEventHandlers));
                }
                return promise;
                function createApplyHandlers(eventHandlers) {
                    if (eventHandlers) {
                        var applyHandlers = {};
                        forEach(eventHandlers, function(eventHandler, key) {
                            applyHandlers[key] = function(event) {
                                if (useApplyAsync) {
                                    $rootScope.$applyAsync(callEventHandler);
                                } else if ($rootScope.$$phase) {
                                    callEventHandler();
                                } else {
                                    $rootScope.$apply(callEventHandler);
                                }
                                function callEventHandler() {
                                    eventHandler(event);
                                }
                            };
                        });
                        return applyHandlers;
                    }
                }
                function done(status, response, headersString, statusText, xhrStatus) {
                    if (cache) {
                        if (isSuccess(status)) {
                            cache.put(url, [ status, response, parseHeaders(headersString), statusText, xhrStatus ]);
                        } else {
                            cache.remove(url);
                        }
                    }
                    function resolveHttpPromise() {
                        resolvePromise(response, status, headersString, statusText, xhrStatus);
                    }
                    if (useApplyAsync) {
                        $rootScope.$applyAsync(resolveHttpPromise);
                    } else {
                        resolveHttpPromise();
                        if (!$rootScope.$$phase) $rootScope.$apply();
                    }
                }
                function resolvePromise(response, status, headers, statusText, xhrStatus) {
                    status = status >= -1 ? status : 0;
                    (isSuccess(status) ? deferred.resolve : deferred.reject)({
                        data: response,
                        status: status,
                        headers: headersGetter(headers),
                        config: config,
                        statusText: statusText,
                        xhrStatus: xhrStatus
                    });
                }
                function resolvePromiseWithResult(result) {
                    resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText, result.xhrStatus);
                }
                function removePendingReq() {
                    var idx = $http.pendingRequests.indexOf(config);
                    if (idx !== -1) $http.pendingRequests.splice(idx, 1);
                }
            }
            function buildUrl(url, serializedParams) {
                if (serializedParams.length > 0) {
                    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
                }
                return url;
            }
            function sanitizeJsonpCallbackParam(url, cbKey) {
                var parts = url.split("?");
                if (parts.length > 2) {
                    throw $httpMinErr("badjsonp", 'Illegal use more than one "?", in url, "{1}"', url);
                }
                var params = parseKeyValue(parts[1]);
                forEach(params, function(value, key) {
                    if (value === "JSON_CALLBACK") {
                        throw $httpMinErr("badjsonp", 'Illegal use of JSON_CALLBACK in url, "{0}"', url);
                    }
                    if (key === cbKey) {
                        throw $httpMinErr("badjsonp", 'Illegal use of callback param, "{0}", in url, "{1}"', cbKey, url);
                    }
                });
                url += (url.indexOf("?") === -1 ? "?" : "&") + cbKey + "=JSON_CALLBACK";
                return url;
            }
        } ];
    }
    function $xhrFactoryProvider() {
        this.$get = function() {
            return function createXhr() {
                return new window.XMLHttpRequest();
            };
        };
    }
    function $HttpBackendProvider() {
        this.$get = [ "$browser", "$jsonpCallbacks", "$document", "$xhrFactory", function($browser, $jsonpCallbacks, $document, $xhrFactory) {
            return createHttpBackend($browser, $xhrFactory, $browser.defer, $jsonpCallbacks, $document[0]);
        } ];
    }
    function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
        return function(method, url, post, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers) {
            url = url || $browser.url();
            if (lowercase(method) === "jsonp") {
                var callbackPath = callbacks.createCallback(url);
                var jsonpDone = jsonpReq(url, callbackPath, function(status, text) {
                    var response = status === 200 && callbacks.getResponse(callbackPath);
                    completeRequest(callback, status, response, "", text, "complete");
                    callbacks.removeCallback(callbackPath);
                });
            } else {
                var xhr = createXhr(method, url);
                var abortedByTimeout = false;
                xhr.open(method, url, true);
                forEach(headers, function(value, key) {
                    if (isDefined(value)) {
                        xhr.setRequestHeader(key, value);
                    }
                });
                xhr.onload = function requestLoaded() {
                    var statusText = xhr.statusText || "";
                    var response = "response" in xhr ? xhr.response : xhr.responseText;
                    var status = xhr.status === 1223 ? 204 : xhr.status;
                    if (status === 0) {
                        status = response ? 200 : urlResolve(url).protocol === "file" ? 404 : 0;
                    }
                    completeRequest(callback, status, response, xhr.getAllResponseHeaders(), statusText, "complete");
                };
                var requestError = function() {
                    completeRequest(callback, -1, null, null, "", "error");
                };
                var requestAborted = function() {
                    completeRequest(callback, -1, null, null, "", abortedByTimeout ? "timeout" : "abort");
                };
                var requestTimeout = function() {
                    completeRequest(callback, -1, null, null, "", "timeout");
                };
                xhr.onerror = requestError;
                xhr.ontimeout = requestTimeout;
                xhr.onabort = requestAborted;
                forEach(eventHandlers, function(value, key) {
                    xhr.addEventListener(key, value);
                });
                forEach(uploadEventHandlers, function(value, key) {
                    xhr.upload.addEventListener(key, value);
                });
                if (withCredentials) {
                    xhr.withCredentials = true;
                }
                if (responseType) {
                    try {
                        xhr.responseType = responseType;
                    } catch (e) {
                        if (responseType !== "json") {
                            throw e;
                        }
                    }
                }
                xhr.send(isUndefined(post) ? null : post);
            }
            if (timeout > 0) {
                var timeoutId = $browserDefer(function() {
                    timeoutRequest("timeout");
                }, timeout);
            } else if (isPromiseLike(timeout)) {
                timeout.then(function() {
                    timeoutRequest(isDefined(timeout.$$timeoutId) ? "timeout" : "abort");
                });
            }
            function timeoutRequest(reason) {
                abortedByTimeout = reason === "timeout";
                if (jsonpDone) {
                    jsonpDone();
                }
                if (xhr) {
                    xhr.abort();
                }
            }
            function completeRequest(callback, status, response, headersString, statusText, xhrStatus) {
                if (isDefined(timeoutId)) {
                    $browserDefer.cancel(timeoutId);
                }
                jsonpDone = xhr = null;
                callback(status, response, headersString, statusText, xhrStatus);
            }
        };
        function jsonpReq(url, callbackPath, done) {
            url = url.replace("JSON_CALLBACK", callbackPath);
            var script = rawDocument.createElement("script"), callback = null;
            script.type = "text/javascript";
            script.src = url;
            script.async = true;
            callback = function(event) {
                script.removeEventListener("load", callback);
                script.removeEventListener("error", callback);
                rawDocument.body.removeChild(script);
                script = null;
                var status = -1;
                var text = "unknown";
                if (event) {
                    if (event.type === "load" && !callbacks.wasCalled(callbackPath)) {
                        event = {
                            type: "error"
                        };
                    }
                    text = event.type;
                    status = event.type === "error" ? 404 : 200;
                }
                if (done) {
                    done(status, text);
                }
            };
            script.addEventListener("load", callback);
            script.addEventListener("error", callback);
            rawDocument.body.appendChild(script);
            return callback;
        }
    }
    var $interpolateMinErr = angular.$interpolateMinErr = minErr("$interpolate");
    $interpolateMinErr.throwNoconcat = function(text) {
        throw $interpolateMinErr("noconcat", "Error while interpolating: {0}\nStrict Contextual Escaping disallows " + "interpolations that concatenate multiple expressions when a trusted value is " + "required.  See http://docs.angularjs.org/api/ng.$sce", text);
    };
    $interpolateMinErr.interr = function(text, err) {
        return $interpolateMinErr("interr", "Can't interpolate: {0}\n{1}", text, err.toString());
    };
    function $InterpolateProvider() {
        var startSymbol = "{{";
        var endSymbol = "}}";
        this.startSymbol = function(value) {
            if (value) {
                startSymbol = value;
                return this;
            }
            return startSymbol;
        };
        this.endSymbol = function(value) {
            if (value) {
                endSymbol = value;
                return this;
            }
            return endSymbol;
        };
        this.$get = [ "$parse", "$exceptionHandler", "$sce", function($parse, $exceptionHandler, $sce) {
            var startSymbolLength = startSymbol.length, endSymbolLength = endSymbol.length, escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), "g"), escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), "g");
            function escape(ch) {
                return "\\\\\\" + ch;
            }
            function unescapeText(text) {
                return text.replace(escapedStartRegexp, startSymbol).replace(escapedEndRegexp, endSymbol);
            }
            function constantWatchDelegate(scope, listener, objectEquality, constantInterp) {
                var unwatch = scope.$watch(function constantInterpolateWatch(scope) {
                    unwatch();
                    return constantInterp(scope);
                }, listener, objectEquality);
                return unwatch;
            }
            function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
                var contextAllowsConcatenation = trustedContext === $sce.URL || trustedContext === $sce.MEDIA_URL;
                if (!text.length || text.indexOf(startSymbol) === -1) {
                    if (mustHaveExpression) return;
                    var unescapedText = unescapeText(text);
                    if (contextAllowsConcatenation) {
                        unescapedText = $sce.getTrusted(trustedContext, unescapedText);
                    }
                    var constantInterp = valueFn(unescapedText);
                    constantInterp.exp = text;
                    constantInterp.expressions = [];
                    constantInterp.$$watchDelegate = constantWatchDelegate;
                    return constantInterp;
                }
                allOrNothing = !!allOrNothing;
                var startIndex, endIndex, index = 0, expressions = [], parseFns, textLength = text.length, exp, concat = [], expressionPositions = [], singleExpression;
                while (index < textLength) {
                    if ((startIndex = text.indexOf(startSymbol, index)) !== -1 && (endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) !== -1) {
                        if (index !== startIndex) {
                            concat.push(unescapeText(text.substring(index, startIndex)));
                        }
                        exp = text.substring(startIndex + startSymbolLength, endIndex);
                        expressions.push(exp);
                        index = endIndex + endSymbolLength;
                        expressionPositions.push(concat.length);
                        concat.push("");
                    } else {
                        if (index !== textLength) {
                            concat.push(unescapeText(text.substring(index)));
                        }
                        break;
                    }
                }
                singleExpression = concat.length === 1 && expressionPositions.length === 1;
                var interceptor = contextAllowsConcatenation && singleExpression ? undefined : parseStringifyInterceptor;
                parseFns = expressions.map(function(exp) {
                    return $parse(exp, interceptor);
                });
                if (!mustHaveExpression || expressions.length) {
                    var compute = function(values) {
                        for (var i = 0, ii = expressions.length; i < ii; i++) {
                            if (allOrNothing && isUndefined(values[i])) return;
                            concat[expressionPositions[i]] = values[i];
                        }
                        if (contextAllowsConcatenation) {
                            return $sce.getTrusted(trustedContext, singleExpression ? concat[0] : concat.join(""));
                        } else if (trustedContext && concat.length > 1) {
                            $interpolateMinErr.throwNoconcat(text);
                        }
                        return concat.join("");
                    };
                    return extend(function interpolationFn(context) {
                        var i = 0;
                        var ii = expressions.length;
                        var values = new Array(ii);
                        try {
                            for (;i < ii; i++) {
                                values[i] = parseFns[i](context);
                            }
                            return compute(values);
                        } catch (err) {
                            $exceptionHandler($interpolateMinErr.interr(text, err));
                        }
                    }, {
                        exp: text,
                        expressions: expressions,
                        $$watchDelegate: function(scope, listener) {
                            var lastValue;
                            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
                                var currValue = compute(values);
                                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
                                lastValue = currValue;
                            });
                        }
                    });
                }
                function parseStringifyInterceptor(value) {
                    try {
                        value = trustedContext && !contextAllowsConcatenation ? $sce.getTrusted(trustedContext, value) : $sce.valueOf(value);
                        return allOrNothing && !isDefined(value) ? value : stringify(value);
                    } catch (err) {
                        $exceptionHandler($interpolateMinErr.interr(text, err));
                    }
                }
            }
            $interpolate.startSymbol = function() {
                return startSymbol;
            };
            $interpolate.endSymbol = function() {
                return endSymbol;
            };
            return $interpolate;
        } ];
    }
    var $intervalMinErr = minErr("$interval");
    function $IntervalProvider() {
        this.$get = [ "$$intervalFactory", "$window", function($$intervalFactory, $window) {
            var intervals = {};
            var setIntervalFn = function(tick, delay, deferred) {
                var id = $window.setInterval(tick, delay);
                intervals[id] = deferred;
                return id;
            };
            var clearIntervalFn = function(id) {
                $window.clearInterval(id);
                delete intervals[id];
            };
            var interval = $$intervalFactory(setIntervalFn, clearIntervalFn);
            interval.cancel = function(promise) {
                if (!promise) return false;
                if (!promise.hasOwnProperty("$$intervalId")) {
                    throw $intervalMinErr("badprom", "`$interval.cancel()` called with a promise that was not generated by `$interval()`.");
                }
                if (!intervals.hasOwnProperty(promise.$$intervalId)) return false;
                var id = promise.$$intervalId;
                var deferred = intervals[id];
                markQExceptionHandled(deferred.promise);
                deferred.reject("canceled");
                clearIntervalFn(id);
                return true;
            };
            return interval;
        } ];
    }
    function $$IntervalFactoryProvider() {
        this.$get = [ "$browser", "$q", "$$q", "$rootScope", function($browser, $q, $$q, $rootScope) {
            return function intervalFactory(setIntervalFn, clearIntervalFn) {
                return function intervalFn(fn, delay, count, invokeApply) {
                    var hasParams = arguments.length > 4, args = hasParams ? sliceArgs(arguments, 4) : [], iteration = 0, skipApply = isDefined(invokeApply) && !invokeApply, deferred = (skipApply ? $$q : $q).defer(), promise = deferred.promise;
                    count = isDefined(count) ? count : 0;
                    function callback() {
                        if (!hasParams) {
                            fn(iteration);
                        } else {
                            fn.apply(null, args);
                        }
                    }
                    function tick() {
                        if (skipApply) {
                            $browser.defer(callback);
                        } else {
                            $rootScope.$evalAsync(callback);
                        }
                        deferred.notify(iteration++);
                        if (count > 0 && iteration >= count) {
                            deferred.resolve(iteration);
                            clearIntervalFn(promise.$$intervalId);
                        }
                        if (!skipApply) $rootScope.$apply();
                    }
                    promise.$$intervalId = setIntervalFn(tick, delay, deferred, skipApply);
                    return promise;
                };
            };
        } ];
    }
    var $jsonpCallbacksProvider = function() {
        this.$get = function() {
            var callbacks = angular.callbacks;
            var callbackMap = {};
            function createCallback(callbackId) {
                var callback = function(data) {
                    callback.data = data;
                    callback.called = true;
                };
                callback.id = callbackId;
                return callback;
            }
            return {
                createCallback: function(url) {
                    var callbackId = "_" + (callbacks.$$counter++).toString(36);
                    var callbackPath = "angular.callbacks." + callbackId;
                    var callback = createCallback(callbackId);
                    callbackMap[callbackPath] = callbacks[callbackId] = callback;
                    return callbackPath;
                },
                wasCalled: function(callbackPath) {
                    return callbackMap[callbackPath].called;
                },
                getResponse: function(callbackPath) {
                    return callbackMap[callbackPath].data;
                },
                removeCallback: function(callbackPath) {
                    var callback = callbackMap[callbackPath];
                    delete callbacks[callback.id];
                    delete callbackMap[callbackPath];
                }
            };
        };
    };
    var PATH_MATCH = /^([^?#]*)(\?([^#]*))?(#(.*))?$/, DEFAULT_PORTS = {
        http: 80,
        https: 443,
        ftp: 21
    };
    var $locationMinErr = minErr("$location");
    function encodePath(path) {
        var segments = path.split("/"), i = segments.length;
        while (i--) {
            segments[i] = encodeUriSegment(segments[i].replace(/%2F/g, "/"));
        }
        return segments.join("/");
    }
    function decodePath(path, html5Mode) {
        var segments = path.split("/"), i = segments.length;
        while (i--) {
            segments[i] = decodeURIComponent(segments[i]);
            if (html5Mode) {
                segments[i] = segments[i].replace(/\//g, "%2F");
            }
        }
        return segments.join("/");
    }
    function normalizePath(pathValue, searchValue, hashValue) {
        var search = toKeyValue(searchValue), hash = hashValue ? "#" + encodeUriSegment(hashValue) : "", path = encodePath(pathValue);
        return path + (search ? "?" + search : "") + hash;
    }
    function parseAbsoluteUrl(absoluteUrl, locationObj) {
        var parsedUrl = urlResolve(absoluteUrl);
        locationObj.$$protocol = parsedUrl.protocol;
        locationObj.$$host = parsedUrl.hostname;
        locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
    }
    var DOUBLE_SLASH_REGEX = /^\s*[\\/]{2,}/;
    function parseAppUrl(url, locationObj, html5Mode) {
        if (DOUBLE_SLASH_REGEX.test(url)) {
            throw $locationMinErr("badpath", 'Invalid url "{0}".', url);
        }
        var prefixed = url.charAt(0) !== "/";
        if (prefixed) {
            url = "/" + url;
        }
        var match = urlResolve(url);
        var path = prefixed && match.pathname.charAt(0) === "/" ? match.pathname.substring(1) : match.pathname;
        locationObj.$$path = decodePath(path, html5Mode);
        locationObj.$$search = parseKeyValue(match.search);
        locationObj.$$hash = decodeURIComponent(match.hash);
        if (locationObj.$$path && locationObj.$$path.charAt(0) !== "/") {
            locationObj.$$path = "/" + locationObj.$$path;
        }
    }
    function startsWith(str, search) {
        return str.slice(0, search.length) === search;
    }
    function stripBaseUrl(base, url) {
        if (startsWith(url, base)) {
            return url.substr(base.length);
        }
    }
    function stripHash(url) {
        var index = url.indexOf("#");
        return index === -1 ? url : url.substr(0, index);
    }
    function stripFile(url) {
        return url.substr(0, stripHash(url).lastIndexOf("/") + 1);
    }
    function serverBase(url) {
        return url.substring(0, url.indexOf("/", url.indexOf("//") + 2));
    }
    function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
        this.$$html5 = true;
        basePrefix = basePrefix || "";
        parseAbsoluteUrl(appBase, this);
        this.$$parse = function(url) {
            var pathUrl = stripBaseUrl(appBaseNoFile, url);
            if (!isString(pathUrl)) {
                throw $locationMinErr("ipthprfx", 'Invalid url "{0}", missing path prefix "{1}".', url, appBaseNoFile);
            }
            parseAppUrl(pathUrl, this, true);
            if (!this.$$path) {
                this.$$path = "/";
            }
            this.$$compose();
        };
        this.$$normalizeUrl = function(url) {
            return appBaseNoFile + url.substr(1);
        };
        this.$$parseLinkUrl = function(url, relHref) {
            if (relHref && relHref[0] === "#") {
                this.hash(relHref.slice(1));
                return true;
            }
            var appUrl, prevAppUrl;
            var rewrittenUrl;
            if (isDefined(appUrl = stripBaseUrl(appBase, url))) {
                prevAppUrl = appUrl;
                if (basePrefix && isDefined(appUrl = stripBaseUrl(basePrefix, appUrl))) {
                    rewrittenUrl = appBaseNoFile + (stripBaseUrl("/", appUrl) || appUrl);
                } else {
                    rewrittenUrl = appBase + prevAppUrl;
                }
            } else if (isDefined(appUrl = stripBaseUrl(appBaseNoFile, url))) {
                rewrittenUrl = appBaseNoFile + appUrl;
            } else if (appBaseNoFile === url + "/") {
                rewrittenUrl = appBaseNoFile;
            }
            if (rewrittenUrl) {
                this.$$parse(rewrittenUrl);
            }
            return !!rewrittenUrl;
        };
    }
    function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {
        parseAbsoluteUrl(appBase, this);
        this.$$parse = function(url) {
            var withoutBaseUrl = stripBaseUrl(appBase, url) || stripBaseUrl(appBaseNoFile, url);
            var withoutHashUrl;
            if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === "#") {
                withoutHashUrl = stripBaseUrl(hashPrefix, withoutBaseUrl);
                if (isUndefined(withoutHashUrl)) {
                    withoutHashUrl = withoutBaseUrl;
                }
            } else {
                if (this.$$html5) {
                    withoutHashUrl = withoutBaseUrl;
                } else {
                    withoutHashUrl = "";
                    if (isUndefined(withoutBaseUrl)) {
                        appBase = url;
                        this.replace();
                    }
                }
            }
            parseAppUrl(withoutHashUrl, this, false);
            this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);
            this.$$compose();
            function removeWindowsDriveName(path, url, base) {
                var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;
                var firstPathSegmentMatch;
                if (startsWith(url, base)) {
                    url = url.replace(base, "");
                }
                if (windowsFilePathExp.exec(url)) {
                    return path;
                }
                firstPathSegmentMatch = windowsFilePathExp.exec(path);
                return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
            }
        };
        this.$$normalizeUrl = function(url) {
            return appBase + (url ? hashPrefix + url : "");
        };
        this.$$parseLinkUrl = function(url, relHref) {
            if (stripHash(appBase) === stripHash(url)) {
                this.$$parse(url);
                return true;
            }
            return false;
        };
    }
    function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
        this.$$html5 = true;
        LocationHashbangUrl.apply(this, arguments);
        this.$$parseLinkUrl = function(url, relHref) {
            if (relHref && relHref[0] === "#") {
                this.hash(relHref.slice(1));
                return true;
            }
            var rewrittenUrl;
            var appUrl;
            if (appBase === stripHash(url)) {
                rewrittenUrl = url;
            } else if (appUrl = stripBaseUrl(appBaseNoFile, url)) {
                rewrittenUrl = appBase + hashPrefix + appUrl;
            } else if (appBaseNoFile === url + "/") {
                rewrittenUrl = appBaseNoFile;
            }
            if (rewrittenUrl) {
                this.$$parse(rewrittenUrl);
            }
            return !!rewrittenUrl;
        };
        this.$$normalizeUrl = function(url) {
            return appBase + hashPrefix + url;
        };
    }
    var locationPrototype = {
        $$absUrl: "",
        $$html5: false,
        $$replace: false,
        $$compose: function() {
            this.$$url = normalizePath(this.$$path, this.$$search, this.$$hash);
            this.$$absUrl = this.$$normalizeUrl(this.$$url);
            this.$$urlUpdatedByLocation = true;
        },
        absUrl: locationGetter("$$absUrl"),
        url: function(url) {
            if (isUndefined(url)) {
                return this.$$url;
            }
            var match = PATH_MATCH.exec(url);
            if (match[1] || url === "") this.path(decodeURIComponent(match[1]));
            if (match[2] || match[1] || url === "") this.search(match[3] || "");
            this.hash(match[5] || "");
            return this;
        },
        protocol: locationGetter("$$protocol"),
        host: locationGetter("$$host"),
        port: locationGetter("$$port"),
        path: locationGetterSetter("$$path", function(path) {
            path = path !== null ? path.toString() : "";
            return path.charAt(0) === "/" ? path : "/" + path;
        }),
        search: function(search, paramValue) {
            switch (arguments.length) {
              case 0:
                return this.$$search;

              case 1:
                if (isString(search) || isNumber(search)) {
                    search = search.toString();
                    this.$$search = parseKeyValue(search);
                } else if (isObject(search)) {
                    search = copy(search, {});
                    forEach(search, function(value, key) {
                        if (value == null) delete search[key];
                    });
                    this.$$search = search;
                } else {
                    throw $locationMinErr("isrcharg", "The first argument of the `$location#search()` call must be a string or an object.");
                }
                break;

              default:
                if (isUndefined(paramValue) || paramValue === null) {
                    delete this.$$search[search];
                } else {
                    this.$$search[search] = paramValue;
                }
            }
            this.$$compose();
            return this;
        },
        hash: locationGetterSetter("$$hash", function(hash) {
            return hash !== null ? hash.toString() : "";
        }),
        replace: function() {
            this.$$replace = true;
            return this;
        }
    };
    forEach([ LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url ], function(Location) {
        Location.prototype = Object.create(locationPrototype);
        Location.prototype.state = function(state) {
            if (!arguments.length) {
                return this.$$state;
            }
            if (Location !== LocationHtml5Url || !this.$$html5) {
                throw $locationMinErr("nostate", "History API state support is available only " + "in HTML5 mode and only in browsers supporting HTML5 History API");
            }
            this.$$state = isUndefined(state) ? null : state;
            this.$$urlUpdatedByLocation = true;
            return this;
        };
    });
    function locationGetter(property) {
        return function() {
            return this[property];
        };
    }
    function locationGetterSetter(property, preprocess) {
        return function(value) {
            if (isUndefined(value)) {
                return this[property];
            }
            this[property] = preprocess(value);
            this.$$compose();
            return this;
        };
    }
    function $LocationProvider() {
        var hashPrefix = "!", html5Mode = {
            enabled: false,
            requireBase: true,
            rewriteLinks: true
        };
        this.hashPrefix = function(prefix) {
            if (isDefined(prefix)) {
                hashPrefix = prefix;
                return this;
            } else {
                return hashPrefix;
            }
        };
        this.html5Mode = function(mode) {
            if (isBoolean(mode)) {
                html5Mode.enabled = mode;
                return this;
            } else if (isObject(mode)) {
                if (isBoolean(mode.enabled)) {
                    html5Mode.enabled = mode.enabled;
                }
                if (isBoolean(mode.requireBase)) {
                    html5Mode.requireBase = mode.requireBase;
                }
                if (isBoolean(mode.rewriteLinks) || isString(mode.rewriteLinks)) {
                    html5Mode.rewriteLinks = mode.rewriteLinks;
                }
                return this;
            } else {
                return html5Mode;
            }
        };
        this.$get = [ "$rootScope", "$browser", "$sniffer", "$rootElement", "$window", function($rootScope, $browser, $sniffer, $rootElement, $window) {
            var $location, LocationMode, baseHref = $browser.baseHref(), initialUrl = $browser.url(), appBase;
            if (html5Mode.enabled) {
                if (!baseHref && html5Mode.requireBase) {
                    throw $locationMinErr("nobase", "$location in HTML5 mode requires a <base> tag to be present!");
                }
                appBase = serverBase(initialUrl) + (baseHref || "/");
                LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
            } else {
                appBase = stripHash(initialUrl);
                LocationMode = LocationHashbangUrl;
            }
            var appBaseNoFile = stripFile(appBase);
            $location = new LocationMode(appBase, appBaseNoFile, "#" + hashPrefix);
            $location.$$parseLinkUrl(initialUrl, initialUrl);
            $location.$$state = $browser.state();
            var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;
            function urlsEqual(a, b) {
                return a === b || urlResolve(a).href === urlResolve(b).href;
            }
            function setBrowserUrlWithFallback(url, replace, state) {
                var oldUrl = $location.url();
                var oldState = $location.$$state;
                try {
                    $browser.url(url, replace, state);
                    $location.$$state = $browser.state();
                } catch (e) {
                    $location.url(oldUrl);
                    $location.$$state = oldState;
                    throw e;
                }
            }
            $rootElement.on("click", function(event) {
                var rewriteLinks = html5Mode.rewriteLinks;
                if (!rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which === 2 || event.button === 2) return;
                var elm = jqLite(event.target);
                while (nodeName_(elm[0]) !== "a") {
                    if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
                }
                if (isString(rewriteLinks) && isUndefined(elm.attr(rewriteLinks))) return;
                var absHref = elm.prop("href");
                var relHref = elm.attr("href") || elm.attr("xlink:href");
                if (isObject(absHref) && absHref.toString() === "[object SVGAnimatedString]") {
                    absHref = urlResolve(absHref.animVal).href;
                }
                if (IGNORE_URI_REGEXP.test(absHref)) return;
                if (absHref && !elm.attr("target") && !event.isDefaultPrevented()) {
                    if ($location.$$parseLinkUrl(absHref, relHref)) {
                        event.preventDefault();
                        if ($location.absUrl() !== $browser.url()) {
                            $rootScope.$apply();
                        }
                    }
                }
            });
            if ($location.absUrl() !== initialUrl) {
                $browser.url($location.absUrl(), true);
            }
            var initializing = true;
            $browser.onUrlChange(function(newUrl, newState) {
                if (!startsWith(newUrl, appBaseNoFile)) {
                    $window.location.href = newUrl;
                    return;
                }
                $rootScope.$evalAsync(function() {
                    var oldUrl = $location.absUrl();
                    var oldState = $location.$$state;
                    var defaultPrevented;
                    $location.$$parse(newUrl);
                    $location.$$state = newState;
                    defaultPrevented = $rootScope.$broadcast("$locationChangeStart", newUrl, oldUrl, newState, oldState).defaultPrevented;
                    if ($location.absUrl() !== newUrl) return;
                    if (defaultPrevented) {
                        $location.$$parse(oldUrl);
                        $location.$$state = oldState;
                        setBrowserUrlWithFallback(oldUrl, false, oldState);
                    } else {
                        initializing = false;
                        afterLocationChange(oldUrl, oldState);
                    }
                });
                if (!$rootScope.$$phase) $rootScope.$digest();
            });
            $rootScope.$watch(function $locationWatch() {
                if (initializing || $location.$$urlUpdatedByLocation) {
                    $location.$$urlUpdatedByLocation = false;
                    var oldUrl = $browser.url();
                    var newUrl = $location.absUrl();
                    var oldState = $browser.state();
                    var currentReplace = $location.$$replace;
                    var urlOrStateChanged = !urlsEqual(oldUrl, newUrl) || $location.$$html5 && $sniffer.history && oldState !== $location.$$state;
                    if (initializing || urlOrStateChanged) {
                        initializing = false;
                        $rootScope.$evalAsync(function() {
                            var newUrl = $location.absUrl();
                            var defaultPrevented = $rootScope.$broadcast("$locationChangeStart", newUrl, oldUrl, $location.$$state, oldState).defaultPrevented;
                            if ($location.absUrl() !== newUrl) return;
                            if (defaultPrevented) {
                                $location.$$parse(oldUrl);
                                $location.$$state = oldState;
                            } else {
                                if (urlOrStateChanged) {
                                    setBrowserUrlWithFallback(newUrl, currentReplace, oldState === $location.$$state ? null : $location.$$state);
                                }
                                afterLocationChange(oldUrl, oldState);
                            }
                        });
                    }
                }
                $location.$$replace = false;
            });
            return $location;
            function afterLocationChange(oldUrl, oldState) {
                $rootScope.$broadcast("$locationChangeSuccess", $location.absUrl(), oldUrl, $location.$$state, oldState);
            }
        } ];
    }
    function $LogProvider() {
        var debug = true, self = this;
        this.debugEnabled = function(flag) {
            if (isDefined(flag)) {
                debug = flag;
                return this;
            } else {
                return debug;
            }
        };
        this.$get = [ "$window", function($window) {
            var formatStackTrace = msie || /\bEdge\//.test($window.navigator && $window.navigator.userAgent);
            return {
                log: consoleLog("log"),
                info: consoleLog("info"),
                warn: consoleLog("warn"),
                error: consoleLog("error"),
                debug: function() {
                    var fn = consoleLog("debug");
                    return function() {
                        if (debug) {
                            fn.apply(self, arguments);
                        }
                    };
                }()
            };
            function formatError(arg) {
                if (isError(arg)) {
                    if (arg.stack && formatStackTrace) {
                        arg = arg.message && arg.stack.indexOf(arg.message) === -1 ? "Error: " + arg.message + "\n" + arg.stack : arg.stack;
                    } else if (arg.sourceURL) {
                        arg = arg.message + "\n" + arg.sourceURL + ":" + arg.line;
                    }
                }
                return arg;
            }
            function consoleLog(type) {
                var console = $window.console || {}, logFn = console[type] || console.log || noop;
                return function() {
                    var args = [];
                    forEach(arguments, function(arg) {
                        args.push(formatError(arg));
                    });
                    return Function.prototype.apply.call(logFn, console, args);
                };
            }
        } ];
    }
    var $parseMinErr = minErr("$parse");
    var objectValueOf = {}.constructor.prototype.valueOf;
    function getStringValue(name) {
        return name + "";
    }
    var OPERATORS = createMap();
    forEach("+ - * / % === !== == != < > <= >= && || ! = |".split(" "), function(operator) {
        OPERATORS[operator] = true;
    });
    var ESCAPE = {
        n: "\n",
        f: "\f",
        r: "\r",
        t: "\t",
        v: "\v",
        "'": "'",
        '"': '"'
    };
    var Lexer = function Lexer(options) {
        this.options = options;
    };
    Lexer.prototype = {
        constructor: Lexer,
        lex: function(text) {
            this.text = text;
            this.index = 0;
            this.tokens = [];
            while (this.index < this.text.length) {
                var ch = this.text.charAt(this.index);
                if (ch === '"' || ch === "'") {
                    this.readString(ch);
                } else if (this.isNumber(ch) || ch === "." && this.isNumber(this.peek())) {
                    this.readNumber();
                } else if (this.isIdentifierStart(this.peekMultichar())) {
                    this.readIdent();
                } else if (this.is(ch, "(){}[].,;:?")) {
                    this.tokens.push({
                        index: this.index,
                        text: ch
                    });
                    this.index++;
                } else if (this.isWhitespace(ch)) {
                    this.index++;
                } else {
                    var ch2 = ch + this.peek();
                    var ch3 = ch2 + this.peek(2);
                    var op1 = OPERATORS[ch];
                    var op2 = OPERATORS[ch2];
                    var op3 = OPERATORS[ch3];
                    if (op1 || op2 || op3) {
                        var token = op3 ? ch3 : op2 ? ch2 : ch;
                        this.tokens.push({
                            index: this.index,
                            text: token,
                            operator: true
                        });
                        this.index += token.length;
                    } else {
                        this.throwError("Unexpected next character ", this.index, this.index + 1);
                    }
                }
            }
            return this.tokens;
        },
        is: function(ch, chars) {
            return chars.indexOf(ch) !== -1;
        },
        peek: function(i) {
            var num = i || 1;
            return this.index + num < this.text.length ? this.text.charAt(this.index + num) : false;
        },
        isNumber: function(ch) {
            return "0" <= ch && ch <= "9" && typeof ch === "string";
        },
        isWhitespace: function(ch) {
            return ch === " " || ch === "\r" || ch === "\t" || ch === "\n" || ch === "\v" || ch === "Â ";
        },
        isIdentifierStart: function(ch) {
            return this.options.isIdentifierStart ? this.options.isIdentifierStart(ch, this.codePointAt(ch)) : this.isValidIdentifierStart(ch);
        },
        isValidIdentifierStart: function(ch) {
            return "a" <= ch && ch <= "z" || "A" <= ch && ch <= "Z" || "_" === ch || ch === "$";
        },
        isIdentifierContinue: function(ch) {
            return this.options.isIdentifierContinue ? this.options.isIdentifierContinue(ch, this.codePointAt(ch)) : this.isValidIdentifierContinue(ch);
        },
        isValidIdentifierContinue: function(ch, cp) {
            return this.isValidIdentifierStart(ch, cp) || this.isNumber(ch);
        },
        codePointAt: function(ch) {
            if (ch.length === 1) return ch.charCodeAt(0);
            return (ch.charCodeAt(0) << 10) + ch.charCodeAt(1) - 56613888;
        },
        peekMultichar: function() {
            var ch = this.text.charAt(this.index);
            var peek = this.peek();
            if (!peek) {
                return ch;
            }
            var cp1 = ch.charCodeAt(0);
            var cp2 = peek.charCodeAt(0);
            if (cp1 >= 55296 && cp1 <= 56319 && cp2 >= 56320 && cp2 <= 57343) {
                return ch + peek;
            }
            return ch;
        },
        isExpOperator: function(ch) {
            return ch === "-" || ch === "+" || this.isNumber(ch);
        },
        throwError: function(error, start, end) {
            end = end || this.index;
            var colStr = isDefined(start) ? "s " + start + "-" + this.index + " [" + this.text.substring(start, end) + "]" : " " + end;
            throw $parseMinErr("lexerr", "Lexer Error: {0} at column{1} in expression [{2}].", error, colStr, this.text);
        },
        readNumber: function() {
            var number = "";
            var start = this.index;
            while (this.index < this.text.length) {
                var ch = lowercase(this.text.charAt(this.index));
                if (ch === "." || this.isNumber(ch)) {
                    number += ch;
                } else {
                    var peekCh = this.peek();
                    if (ch === "e" && this.isExpOperator(peekCh)) {
                        number += ch;
                    } else if (this.isExpOperator(ch) && peekCh && this.isNumber(peekCh) && number.charAt(number.length - 1) === "e") {
                        number += ch;
                    } else if (this.isExpOperator(ch) && (!peekCh || !this.isNumber(peekCh)) && number.charAt(number.length - 1) === "e") {
                        this.throwError("Invalid exponent");
                    } else {
                        break;
                    }
                }
                this.index++;
            }
            this.tokens.push({
                index: start,
                text: number,
                constant: true,
                value: Number(number)
            });
        },
        readIdent: function() {
            var start = this.index;
            this.index += this.peekMultichar().length;
            while (this.index < this.text.length) {
                var ch = this.peekMultichar();
                if (!this.isIdentifierContinue(ch)) {
                    break;
                }
                this.index += ch.length;
            }
            this.tokens.push({
                index: start,
                text: this.text.slice(start, this.index),
                identifier: true
            });
        },
        readString: function(quote) {
            var start = this.index;
            this.index++;
            var string = "";
            var rawString = quote;
            var escape = false;
            while (this.index < this.text.length) {
                var ch = this.text.charAt(this.index);
                rawString += ch;
                if (escape) {
                    if (ch === "u") {
                        var hex = this.text.substring(this.index + 1, this.index + 5);
                        if (!hex.match(/[\da-f]{4}/i)) {
                            this.throwError("Invalid unicode escape [\\u" + hex + "]");
                        }
                        this.index += 4;
                        string += String.fromCharCode(parseInt(hex, 16));
                    } else {
                        var rep = ESCAPE[ch];
                        string = string + (rep || ch);
                    }
                    escape = false;
                } else if (ch === "\\") {
                    escape = true;
                } else if (ch === quote) {
                    this.index++;
                    this.tokens.push({
                        index: start,
                        text: rawString,
                        constant: true,
                        value: string
                    });
                    return;
                } else {
                    string += ch;
                }
                this.index++;
            }
            this.throwError("Unterminated quote", start);
        }
    };
    var AST = function AST(lexer, options) {
        this.lexer = lexer;
        this.options = options;
    };
    AST.Program = "Program";
    AST.ExpressionStatement = "ExpressionStatement";
    AST.AssignmentExpression = "AssignmentExpression";
    AST.ConditionalExpression = "ConditionalExpression";
    AST.LogicalExpression = "LogicalExpression";
    AST.BinaryExpression = "BinaryExpression";
    AST.UnaryExpression = "UnaryExpression";
    AST.CallExpression = "CallExpression";
    AST.MemberExpression = "MemberExpression";
    AST.Identifier = "Identifier";
    AST.Literal = "Literal";
    AST.ArrayExpression = "ArrayExpression";
    AST.Property = "Property";
    AST.ObjectExpression = "ObjectExpression";
    AST.ThisExpression = "ThisExpression";
    AST.LocalsExpression = "LocalsExpression";
    AST.NGValueParameter = "NGValueParameter";
    AST.prototype = {
        ast: function(text) {
            this.text = text;
            this.tokens = this.lexer.lex(text);
            var value = this.program();
            if (this.tokens.length !== 0) {
                this.throwError("is an unexpected token", this.tokens[0]);
            }
            return value;
        },
        program: function() {
            var body = [];
            while (true) {
                if (this.tokens.length > 0 && !this.peek("}", ")", ";", "]")) body.push(this.expressionStatement());
                if (!this.expect(";")) {
                    return {
                        type: AST.Program,
                        body: body
                    };
                }
            }
        },
        expressionStatement: function() {
            return {
                type: AST.ExpressionStatement,
                expression: this.filterChain()
            };
        },
        filterChain: function() {
            var left = this.expression();
            while (this.expect("|")) {
                left = this.filter(left);
            }
            return left;
        },
        expression: function() {
            return this.assignment();
        },
        assignment: function() {
            var result = this.ternary();
            if (this.expect("=")) {
                if (!isAssignable(result)) {
                    throw $parseMinErr("lval", "Trying to assign a value to a non l-value");
                }
                result = {
                    type: AST.AssignmentExpression,
                    left: result,
                    right: this.assignment(),
                    operator: "="
                };
            }
            return result;
        },
        ternary: function() {
            var test = this.logicalOR();
            var alternate;
            var consequent;
            if (this.expect("?")) {
                alternate = this.expression();
                if (this.consume(":")) {
                    consequent = this.expression();
                    return {
                        type: AST.ConditionalExpression,
                        test: test,
                        alternate: alternate,
                        consequent: consequent
                    };
                }
            }
            return test;
        },
        logicalOR: function() {
            var left = this.logicalAND();
            while (this.expect("||")) {
                left = {
                    type: AST.LogicalExpression,
                    operator: "||",
                    left: left,
                    right: this.logicalAND()
                };
            }
            return left;
        },
        logicalAND: function() {
            var left = this.equality();
            while (this.expect("&&")) {
                left = {
                    type: AST.LogicalExpression,
                    operator: "&&",
                    left: left,
                    right: this.equality()
                };
            }
            return left;
        },
        equality: function() {
            var left = this.relational();
            var token;
            while (token = this.expect("==", "!=", "===", "!==")) {
                left = {
                    type: AST.BinaryExpression,
                    operator: token.text,
                    left: left,
                    right: this.relational()
                };
            }
            return left;
        },
        relational: function() {
            var left = this.additive();
            var token;
            while (token = this.expect("<", ">", "<=", ">=")) {
                left = {
                    type: AST.BinaryExpression,
                    operator: token.text,
                    left: left,
                    right: this.additive()
                };
            }
            return left;
        },
        additive: function() {
            var left = this.multiplicative();
            var token;
            while (token = this.expect("+", "-")) {
                left = {
                    type: AST.BinaryExpression,
                    operator: token.text,
                    left: left,
                    right: this.multiplicative()
                };
            }
            return left;
        },
        multiplicative: function() {
            var left = this.unary();
            var token;
            while (token = this.expect("*", "/", "%")) {
                left = {
                    type: AST.BinaryExpression,
                    operator: token.text,
                    left: left,
                    right: this.unary()
                };
            }
            return left;
        },
        unary: function() {
            var token;
            if (token = this.expect("+", "-", "!")) {
                return {
                    type: AST.UnaryExpression,
                    operator: token.text,
                    prefix: true,
                    argument: this.unary()
                };
            } else {
                return this.primary();
            }
        },
        primary: function() {
            var primary;
            if (this.expect("(")) {
                primary = this.filterChain();
                this.consume(")");
            } else if (this.expect("[")) {
                primary = this.arrayDeclaration();
            } else if (this.expect("{")) {
                primary = this.object();
            } else if (this.selfReferential.hasOwnProperty(this.peek().text)) {
                primary = copy(this.selfReferential[this.consume().text]);
            } else if (this.options.literals.hasOwnProperty(this.peek().text)) {
                primary = {
                    type: AST.Literal,
                    value: this.options.literals[this.consume().text]
                };
            } else if (this.peek().identifier) {
                primary = this.identifier();
            } else if (this.peek().constant) {
                primary = this.constant();
            } else {
                this.throwError("not a primary expression", this.peek());
            }
            var next;
            while (next = this.expect("(", "[", ".")) {
                if (next.text === "(") {
                    primary = {
                        type: AST.CallExpression,
                        callee: primary,
                        arguments: this.parseArguments()
                    };
                    this.consume(")");
                } else if (next.text === "[") {
                    primary = {
                        type: AST.MemberExpression,
                        object: primary,
                        property: this.expression(),
                        computed: true
                    };
                    this.consume("]");
                } else if (next.text === ".") {
                    primary = {
                        type: AST.MemberExpression,
                        object: primary,
                        property: this.identifier(),
                        computed: false
                    };
                } else {
                    this.throwError("IMPOSSIBLE");
                }
            }
            return primary;
        },
        filter: function(baseExpression) {
            var args = [ baseExpression ];
            var result = {
                type: AST.CallExpression,
                callee: this.identifier(),
                arguments: args,
                filter: true
            };
            while (this.expect(":")) {
                args.push(this.expression());
            }
            return result;
        },
        parseArguments: function() {
            var args = [];
            if (this.peekToken().text !== ")") {
                do {
                    args.push(this.filterChain());
                } while (this.expect(","));
            }
            return args;
        },
        identifier: function() {
            var token = this.consume();
            if (!token.identifier) {
                this.throwError("is not a valid identifier", token);
            }
            return {
                type: AST.Identifier,
                name: token.text
            };
        },
        constant: function() {
            return {
                type: AST.Literal,
                value: this.consume().value
            };
        },
        arrayDeclaration: function() {
            var elements = [];
            if (this.peekToken().text !== "]") {
                do {
                    if (this.peek("]")) {
                        break;
                    }
                    elements.push(this.expression());
                } while (this.expect(","));
            }
            this.consume("]");
            return {
                type: AST.ArrayExpression,
                elements: elements
            };
        },
        object: function() {
            var properties = [], property;
            if (this.peekToken().text !== "}") {
                do {
                    if (this.peek("}")) {
                        break;
                    }
                    property = {
                        type: AST.Property,
                        kind: "init"
                    };
                    if (this.peek().constant) {
                        property.key = this.constant();
                        property.computed = false;
                        this.consume(":");
                        property.value = this.expression();
                    } else if (this.peek().identifier) {
                        property.key = this.identifier();
                        property.computed = false;
                        if (this.peek(":")) {
                            this.consume(":");
                            property.value = this.expression();
                        } else {
                            property.value = property.key;
                        }
                    } else if (this.peek("[")) {
                        this.consume("[");
                        property.key = this.expression();
                        this.consume("]");
                        property.computed = true;
                        this.consume(":");
                        property.value = this.expression();
                    } else {
                        this.throwError("invalid key", this.peek());
                    }
                    properties.push(property);
                } while (this.expect(","));
            }
            this.consume("}");
            return {
                type: AST.ObjectExpression,
                properties: properties
            };
        },
        throwError: function(msg, token) {
            throw $parseMinErr("syntax", "Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].", token.text, msg, token.index + 1, this.text, this.text.substring(token.index));
        },
        consume: function(e1) {
            if (this.tokens.length === 0) {
                throw $parseMinErr("ueoe", "Unexpected end of expression: {0}", this.text);
            }
            var token = this.expect(e1);
            if (!token) {
                this.throwError("is unexpected, expecting [" + e1 + "]", this.peek());
            }
            return token;
        },
        peekToken: function() {
            if (this.tokens.length === 0) {
                throw $parseMinErr("ueoe", "Unexpected end of expression: {0}", this.text);
            }
            return this.tokens[0];
        },
        peek: function(e1, e2, e3, e4) {
            return this.peekAhead(0, e1, e2, e3, e4);
        },
        peekAhead: function(i, e1, e2, e3, e4) {
            if (this.tokens.length > i) {
                var token = this.tokens[i];
                var t = token.text;
                if (t === e1 || t === e2 || t === e3 || t === e4 || !e1 && !e2 && !e3 && !e4) {
                    return token;
                }
            }
            return false;
        },
        expect: function(e1, e2, e3, e4) {
            var token = this.peek(e1, e2, e3, e4);
            if (token) {
                this.tokens.shift();
                return token;
            }
            return false;
        },
        selfReferential: {
            this: {
                type: AST.ThisExpression
            },
            $locals: {
                type: AST.LocalsExpression
            }
        }
    };
    function ifDefined(v, d) {
        return typeof v !== "undefined" ? v : d;
    }
    function plusFn(l, r) {
        if (typeof l === "undefined") return r;
        if (typeof r === "undefined") return l;
        return l + r;
    }
    function isStateless($filter, filterName) {
        var fn = $filter(filterName);
        return !fn.$stateful;
    }
    var PURITY_ABSOLUTE = 1;
    var PURITY_RELATIVE = 2;
    function isPure(node, parentIsPure) {
        switch (node.type) {
          case AST.MemberExpression:
            if (node.computed) {
                return false;
            }
            break;

          case AST.UnaryExpression:
            return PURITY_ABSOLUTE;

          case AST.BinaryExpression:
            return node.operator !== "+" ? PURITY_ABSOLUTE : false;

          case AST.CallExpression:
            return false;
        }
        return undefined === parentIsPure ? PURITY_RELATIVE : parentIsPure;
    }
    function findConstantAndWatchExpressions(ast, $filter, parentIsPure) {
        var allConstants;
        var argsToWatch;
        var isStatelessFilter;
        var astIsPure = ast.isPure = isPure(ast, parentIsPure);
        switch (ast.type) {
          case AST.Program:
            allConstants = true;
            forEach(ast.body, function(expr) {
                findConstantAndWatchExpressions(expr.expression, $filter, astIsPure);
                allConstants = allConstants && expr.expression.constant;
            });
            ast.constant = allConstants;
            break;

          case AST.Literal:
            ast.constant = true;
            ast.toWatch = [];
            break;

          case AST.UnaryExpression:
            findConstantAndWatchExpressions(ast.argument, $filter, astIsPure);
            ast.constant = ast.argument.constant;
            ast.toWatch = ast.argument.toWatch;
            break;

          case AST.BinaryExpression:
            findConstantAndWatchExpressions(ast.left, $filter, astIsPure);
            findConstantAndWatchExpressions(ast.right, $filter, astIsPure);
            ast.constant = ast.left.constant && ast.right.constant;
            ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
            break;

          case AST.LogicalExpression:
            findConstantAndWatchExpressions(ast.left, $filter, astIsPure);
            findConstantAndWatchExpressions(ast.right, $filter, astIsPure);
            ast.constant = ast.left.constant && ast.right.constant;
            ast.toWatch = ast.constant ? [] : [ ast ];
            break;

          case AST.ConditionalExpression:
            findConstantAndWatchExpressions(ast.test, $filter, astIsPure);
            findConstantAndWatchExpressions(ast.alternate, $filter, astIsPure);
            findConstantAndWatchExpressions(ast.consequent, $filter, astIsPure);
            ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
            ast.toWatch = ast.constant ? [] : [ ast ];
            break;

          case AST.Identifier:
            ast.constant = false;
            ast.toWatch = [ ast ];
            break;

          case AST.MemberExpression:
            findConstantAndWatchExpressions(ast.object, $filter, astIsPure);
            if (ast.computed) {
                findConstantAndWatchExpressions(ast.property, $filter, astIsPure);
            }
            ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
            ast.toWatch = ast.constant ? [] : [ ast ];
            break;

          case AST.CallExpression:
            isStatelessFilter = ast.filter ? isStateless($filter, ast.callee.name) : false;
            allConstants = isStatelessFilter;
            argsToWatch = [];
            forEach(ast.arguments, function(expr) {
                findConstantAndWatchExpressions(expr, $filter, astIsPure);
                allConstants = allConstants && expr.constant;
                argsToWatch.push.apply(argsToWatch, expr.toWatch);
            });
            ast.constant = allConstants;
            ast.toWatch = isStatelessFilter ? argsToWatch : [ ast ];
            break;

          case AST.AssignmentExpression:
            findConstantAndWatchExpressions(ast.left, $filter, astIsPure);
            findConstantAndWatchExpressions(ast.right, $filter, astIsPure);
            ast.constant = ast.left.constant && ast.right.constant;
            ast.toWatch = [ ast ];
            break;

          case AST.ArrayExpression:
            allConstants = true;
            argsToWatch = [];
            forEach(ast.elements, function(expr) {
                findConstantAndWatchExpressions(expr, $filter, astIsPure);
                allConstants = allConstants && expr.constant;
                argsToWatch.push.apply(argsToWatch, expr.toWatch);
            });
            ast.constant = allConstants;
            ast.toWatch = argsToWatch;
            break;

          case AST.ObjectExpression:
            allConstants = true;
            argsToWatch = [];
            forEach(ast.properties, function(property) {
                findConstantAndWatchExpressions(property.value, $filter, astIsPure);
                allConstants = allConstants && property.value.constant;
                argsToWatch.push.apply(argsToWatch, property.value.toWatch);
                if (property.computed) {
                    findConstantAndWatchExpressions(property.key, $filter, false);
                    allConstants = allConstants && property.key.constant;
                    argsToWatch.push.apply(argsToWatch, property.key.toWatch);
                }
            });
            ast.constant = allConstants;
            ast.toWatch = argsToWatch;
            break;

          case AST.ThisExpression:
            ast.constant = false;
            ast.toWatch = [];
            break;

          case AST.LocalsExpression:
            ast.constant = false;
            ast.toWatch = [];
            break;
        }
    }
    function getInputs(body) {
        if (body.length !== 1) return;
        var lastExpression = body[0].expression;
        var candidate = lastExpression.toWatch;
        if (candidate.length !== 1) return candidate;
        return candidate[0] !== lastExpression ? candidate : undefined;
    }
    function isAssignable(ast) {
        return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
    }
    function assignableAST(ast) {
        if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
            return {
                type: AST.AssignmentExpression,
                left: ast.body[0].expression,
                right: {
                    type: AST.NGValueParameter
                },
                operator: "="
            };
        }
    }
    function isLiteral(ast) {
        return ast.body.length === 0 || ast.body.length === 1 && (ast.body[0].expression.type === AST.Literal || ast.body[0].expression.type === AST.ArrayExpression || ast.body[0].expression.type === AST.ObjectExpression);
    }
    function isConstant(ast) {
        return ast.constant;
    }
    function ASTCompiler($filter) {
        this.$filter = $filter;
    }
    ASTCompiler.prototype = {
        compile: function(ast) {
            var self = this;
            this.state = {
                nextId: 0,
                filters: {},
                fn: {
                    vars: [],
                    body: [],
                    own: {}
                },
                assign: {
                    vars: [],
                    body: [],
                    own: {}
                },
                inputs: []
            };
            findConstantAndWatchExpressions(ast, self.$filter);
            var extra = "";
            var assignable;
            this.stage = "assign";
            if (assignable = assignableAST(ast)) {
                this.state.computing = "assign";
                var result = this.nextId();
                this.recurse(assignable, result);
                this.return_(result);
                extra = "fn.assign=" + this.generateFunction("assign", "s,v,l");
            }
            var toWatch = getInputs(ast.body);
            self.stage = "inputs";
            forEach(toWatch, function(watch, key) {
                var fnKey = "fn" + key;
                self.state[fnKey] = {
                    vars: [],
                    body: [],
                    own: {}
                };
                self.state.computing = fnKey;
                var intoId = self.nextId();
                self.recurse(watch, intoId);
                self.return_(intoId);
                self.state.inputs.push({
                    name: fnKey,
                    isPure: watch.isPure
                });
                watch.watchId = key;
            });
            this.state.computing = "fn";
            this.stage = "main";
            this.recurse(ast);
            var fnString = '"' + this.USE + " " + this.STRICT + '";\n' + this.filterPrefix() + "var fn=" + this.generateFunction("fn", "s,l,a,i") + extra + this.watchFns() + "return fn;";
            var fn = new Function("$filter", "getStringValue", "ifDefined", "plus", fnString)(this.$filter, getStringValue, ifDefined, plusFn);
            this.state = this.stage = undefined;
            return fn;
        },
        USE: "use",
        STRICT: "strict",
        watchFns: function() {
            var result = [];
            var inputs = this.state.inputs;
            var self = this;
            forEach(inputs, function(input) {
                result.push("var " + input.name + "=" + self.generateFunction(input.name, "s"));
                if (input.isPure) {
                    result.push(input.name, ".isPure=" + JSON.stringify(input.isPure) + ";");
                }
            });
            if (inputs.length) {
                result.push("fn.inputs=[" + inputs.map(function(i) {
                    return i.name;
                }).join(",") + "];");
            }
            return result.join("");
        },
        generateFunction: function(name, params) {
            return "function(" + params + "){" + this.varsPrefix(name) + this.body(name) + "};";
        },
        filterPrefix: function() {
            var parts = [];
            var self = this;
            forEach(this.state.filters, function(id, filter) {
                parts.push(id + "=$filter(" + self.escape(filter) + ")");
            });
            if (parts.length) return "var " + parts.join(",") + ";";
            return "";
        },
        varsPrefix: function(section) {
            return this.state[section].vars.length ? "var " + this.state[section].vars.join(",") + ";" : "";
        },
        body: function(section) {
            return this.state[section].body.join("");
        },
        recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
            var left, right, self = this, args, expression, computed;
            recursionFn = recursionFn || noop;
            if (!skipWatchIdCheck && isDefined(ast.watchId)) {
                intoId = intoId || this.nextId();
                this.if_("i", this.lazyAssign(intoId, this.computedMember("i", ast.watchId)), this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true));
                return;
            }
            switch (ast.type) {
              case AST.Program:
                forEach(ast.body, function(expression, pos) {
                    self.recurse(expression.expression, undefined, undefined, function(expr) {
                        right = expr;
                    });
                    if (pos !== ast.body.length - 1) {
                        self.current().body.push(right, ";");
                    } else {
                        self.return_(right);
                    }
                });
                break;

              case AST.Literal:
                expression = this.escape(ast.value);
                this.assign(intoId, expression);
                recursionFn(intoId || expression);
                break;

              case AST.UnaryExpression:
                this.recurse(ast.argument, undefined, undefined, function(expr) {
                    right = expr;
                });
                expression = ast.operator + "(" + this.ifDefined(right, 0) + ")";
                this.assign(intoId, expression);
                recursionFn(expression);
                break;

              case AST.BinaryExpression:
                this.recurse(ast.left, undefined, undefined, function(expr) {
                    left = expr;
                });
                this.recurse(ast.right, undefined, undefined, function(expr) {
                    right = expr;
                });
                if (ast.operator === "+") {
                    expression = this.plus(left, right);
                } else if (ast.operator === "-") {
                    expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
                } else {
                    expression = "(" + left + ")" + ast.operator + "(" + right + ")";
                }
                this.assign(intoId, expression);
                recursionFn(expression);
                break;

              case AST.LogicalExpression:
                intoId = intoId || this.nextId();
                self.recurse(ast.left, intoId);
                self.if_(ast.operator === "&&" ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
                recursionFn(intoId);
                break;

              case AST.ConditionalExpression:
                intoId = intoId || this.nextId();
                self.recurse(ast.test, intoId);
                self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
                recursionFn(intoId);
                break;

              case AST.Identifier:
                intoId = intoId || this.nextId();
                if (nameId) {
                    nameId.context = self.stage === "inputs" ? "s" : this.assign(this.nextId(), this.getHasOwnProperty("l", ast.name) + "?l:s");
                    nameId.computed = false;
                    nameId.name = ast.name;
                }
                self.if_(self.stage === "inputs" || self.not(self.getHasOwnProperty("l", ast.name)), function() {
                    self.if_(self.stage === "inputs" || "s", function() {
                        if (create && create !== 1) {
                            self.if_(self.isNull(self.nonComputedMember("s", ast.name)), self.lazyAssign(self.nonComputedMember("s", ast.name), "{}"));
                        }
                        self.assign(intoId, self.nonComputedMember("s", ast.name));
                    });
                }, intoId && self.lazyAssign(intoId, self.nonComputedMember("l", ast.name)));
                recursionFn(intoId);
                break;

              case AST.MemberExpression:
                left = nameId && (nameId.context = this.nextId()) || this.nextId();
                intoId = intoId || this.nextId();
                self.recurse(ast.object, left, undefined, function() {
                    self.if_(self.notNull(left), function() {
                        if (ast.computed) {
                            right = self.nextId();
                            self.recurse(ast.property, right);
                            self.getStringValue(right);
                            if (create && create !== 1) {
                                self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), "{}"));
                            }
                            expression = self.computedMember(left, right);
                            self.assign(intoId, expression);
                            if (nameId) {
                                nameId.computed = true;
                                nameId.name = right;
                            }
                        } else {
                            if (create && create !== 1) {
                                self.if_(self.isNull(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), "{}"));
                            }
                            expression = self.nonComputedMember(left, ast.property.name);
                            self.assign(intoId, expression);
                            if (nameId) {
                                nameId.computed = false;
                                nameId.name = ast.property.name;
                            }
                        }
                    }, function() {
                        self.assign(intoId, "undefined");
                    });
                    recursionFn(intoId);
                }, !!create);
                break;

              case AST.CallExpression:
                intoId = intoId || this.nextId();
                if (ast.filter) {
                    right = self.filter(ast.callee.name);
                    args = [];
                    forEach(ast.arguments, function(expr) {
                        var argument = self.nextId();
                        self.recurse(expr, argument);
                        args.push(argument);
                    });
                    expression = right + "(" + args.join(",") + ")";
                    self.assign(intoId, expression);
                    recursionFn(intoId);
                } else {
                    right = self.nextId();
                    left = {};
                    args = [];
                    self.recurse(ast.callee, right, left, function() {
                        self.if_(self.notNull(right), function() {
                            forEach(ast.arguments, function(expr) {
                                self.recurse(expr, ast.constant ? undefined : self.nextId(), undefined, function(argument) {
                                    args.push(argument);
                                });
                            });
                            if (left.name) {
                                expression = self.member(left.context, left.name, left.computed) + "(" + args.join(",") + ")";
                            } else {
                                expression = right + "(" + args.join(",") + ")";
                            }
                            self.assign(intoId, expression);
                        }, function() {
                            self.assign(intoId, "undefined");
                        });
                        recursionFn(intoId);
                    });
                }
                break;

              case AST.AssignmentExpression:
                right = this.nextId();
                left = {};
                this.recurse(ast.left, undefined, left, function() {
                    self.if_(self.notNull(left.context), function() {
                        self.recurse(ast.right, right);
                        expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
                        self.assign(intoId, expression);
                        recursionFn(intoId || expression);
                    });
                }, 1);
                break;

              case AST.ArrayExpression:
                args = [];
                forEach(ast.elements, function(expr) {
                    self.recurse(expr, ast.constant ? undefined : self.nextId(), undefined, function(argument) {
                        args.push(argument);
                    });
                });
                expression = "[" + args.join(",") + "]";
                this.assign(intoId, expression);
                recursionFn(intoId || expression);
                break;

              case AST.ObjectExpression:
                args = [];
                computed = false;
                forEach(ast.properties, function(property) {
                    if (property.computed) {
                        computed = true;
                    }
                });
                if (computed) {
                    intoId = intoId || this.nextId();
                    this.assign(intoId, "{}");
                    forEach(ast.properties, function(property) {
                        if (property.computed) {
                            left = self.nextId();
                            self.recurse(property.key, left);
                        } else {
                            left = property.key.type === AST.Identifier ? property.key.name : "" + property.key.value;
                        }
                        right = self.nextId();
                        self.recurse(property.value, right);
                        self.assign(self.member(intoId, left, property.computed), right);
                    });
                } else {
                    forEach(ast.properties, function(property) {
                        self.recurse(property.value, ast.constant ? undefined : self.nextId(), undefined, function(expr) {
                            args.push(self.escape(property.key.type === AST.Identifier ? property.key.name : "" + property.key.value) + ":" + expr);
                        });
                    });
                    expression = "{" + args.join(",") + "}";
                    this.assign(intoId, expression);
                }
                recursionFn(intoId || expression);
                break;

              case AST.ThisExpression:
                this.assign(intoId, "s");
                recursionFn(intoId || "s");
                break;

              case AST.LocalsExpression:
                this.assign(intoId, "l");
                recursionFn(intoId || "l");
                break;

              case AST.NGValueParameter:
                this.assign(intoId, "v");
                recursionFn(intoId || "v");
                break;
            }
        },
        getHasOwnProperty: function(element, property) {
            var key = element + "." + property;
            var own = this.current().own;
            if (!own.hasOwnProperty(key)) {
                own[key] = this.nextId(false, element + "&&(" + this.escape(property) + " in " + element + ")");
            }
            return own[key];
        },
        assign: function(id, value) {
            if (!id) return;
            this.current().body.push(id, "=", value, ";");
            return id;
        },
        filter: function(filterName) {
            if (!this.state.filters.hasOwnProperty(filterName)) {
                this.state.filters[filterName] = this.nextId(true);
            }
            return this.state.filters[filterName];
        },
        ifDefined: function(id, defaultValue) {
            return "ifDefined(" + id + "," + this.escape(defaultValue) + ")";
        },
        plus: function(left, right) {
            return "plus(" + left + "," + right + ")";
        },
        return_: function(id) {
            this.current().body.push("return ", id, ";");
        },
        if_: function(test, alternate, consequent) {
            if (test === true) {
                alternate();
            } else {
                var body = this.current().body;
                body.push("if(", test, "){");
                alternate();
                body.push("}");
                if (consequent) {
                    body.push("else{");
                    consequent();
                    body.push("}");
                }
            }
        },
        not: function(expression) {
            return "!(" + expression + ")";
        },
        isNull: function(expression) {
            return expression + "==null";
        },
        notNull: function(expression) {
            return expression + "!=null";
        },
        nonComputedMember: function(left, right) {
            var SAFE_IDENTIFIER = /^[$_a-zA-Z][$_a-zA-Z0-9]*$/;
            var UNSAFE_CHARACTERS = /[^$_a-zA-Z0-9]/g;
            if (SAFE_IDENTIFIER.test(right)) {
                return left + "." + right;
            } else {
                return left + '["' + right.replace(UNSAFE_CHARACTERS, this.stringEscapeFn) + '"]';
            }
        },
        computedMember: function(left, right) {
            return left + "[" + right + "]";
        },
        member: function(left, right, computed) {
            if (computed) return this.computedMember(left, right);
            return this.nonComputedMember(left, right);
        },
        getStringValue: function(item) {
            this.assign(item, "getStringValue(" + item + ")");
        },
        lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
            var self = this;
            return function() {
                self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
            };
        },
        lazyAssign: function(id, value) {
            var self = this;
            return function() {
                self.assign(id, value);
            };
        },
        stringEscapeRegex: /[^ a-zA-Z0-9]/g,
        stringEscapeFn: function(c) {
            return "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4);
        },
        escape: function(value) {
            if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
            if (isNumber(value)) return value.toString();
            if (value === true) return "true";
            if (value === false) return "false";
            if (value === null) return "null";
            if (typeof value === "undefined") return "undefined";
            throw $parseMinErr("esc", "IMPOSSIBLE");
        },
        nextId: function(skip, init) {
            var id = "v" + this.state.nextId++;
            if (!skip) {
                this.current().vars.push(id + (init ? "=" + init : ""));
            }
            return id;
        },
        current: function() {
            return this.state[this.state.computing];
        }
    };
    function ASTInterpreter($filter) {
        this.$filter = $filter;
    }
    ASTInterpreter.prototype = {
        compile: function(ast) {
            var self = this;
            findConstantAndWatchExpressions(ast, self.$filter);
            var assignable;
            var assign;
            if (assignable = assignableAST(ast)) {
                assign = this.recurse(assignable);
            }
            var toWatch = getInputs(ast.body);
            var inputs;
            if (toWatch) {
                inputs = [];
                forEach(toWatch, function(watch, key) {
                    var input = self.recurse(watch);
                    input.isPure = watch.isPure;
                    watch.input = input;
                    inputs.push(input);
                    watch.watchId = key;
                });
            }
            var expressions = [];
            forEach(ast.body, function(expression) {
                expressions.push(self.recurse(expression.expression));
            });
            var fn = ast.body.length === 0 ? noop : ast.body.length === 1 ? expressions[0] : function(scope, locals) {
                var lastValue;
                forEach(expressions, function(exp) {
                    lastValue = exp(scope, locals);
                });
                return lastValue;
            };
            if (assign) {
                fn.assign = function(scope, value, locals) {
                    return assign(scope, locals, value);
                };
            }
            if (inputs) {
                fn.inputs = inputs;
            }
            return fn;
        },
        recurse: function(ast, context, create) {
            var left, right, self = this, args;
            if (ast.input) {
                return this.inputs(ast.input, ast.watchId);
            }
            switch (ast.type) {
              case AST.Literal:
                return this.value(ast.value, context);

              case AST.UnaryExpression:
                right = this.recurse(ast.argument);
                return this["unary" + ast.operator](right, context);

              case AST.BinaryExpression:
                left = this.recurse(ast.left);
                right = this.recurse(ast.right);
                return this["binary" + ast.operator](left, right, context);

              case AST.LogicalExpression:
                left = this.recurse(ast.left);
                right = this.recurse(ast.right);
                return this["binary" + ast.operator](left, right, context);

              case AST.ConditionalExpression:
                return this["ternary?:"](this.recurse(ast.test), this.recurse(ast.alternate), this.recurse(ast.consequent), context);

              case AST.Identifier:
                return self.identifier(ast.name, context, create);

              case AST.MemberExpression:
                left = this.recurse(ast.object, false, !!create);
                if (!ast.computed) {
                    right = ast.property.name;
                }
                if (ast.computed) right = this.recurse(ast.property);
                return ast.computed ? this.computedMember(left, right, context, create) : this.nonComputedMember(left, right, context, create);

              case AST.CallExpression:
                args = [];
                forEach(ast.arguments, function(expr) {
                    args.push(self.recurse(expr));
                });
                if (ast.filter) right = this.$filter(ast.callee.name);
                if (!ast.filter) right = this.recurse(ast.callee, true);
                return ast.filter ? function(scope, locals, assign, inputs) {
                    var values = [];
                    for (var i = 0; i < args.length; ++i) {
                        values.push(args[i](scope, locals, assign, inputs));
                    }
                    var value = right.apply(undefined, values, inputs);
                    return context ? {
                        context: undefined,
                        name: undefined,
                        value: value
                    } : value;
                } : function(scope, locals, assign, inputs) {
                    var rhs = right(scope, locals, assign, inputs);
                    var value;
                    if (rhs.value != null) {
                        var values = [];
                        for (var i = 0; i < args.length; ++i) {
                            values.push(args[i](scope, locals, assign, inputs));
                        }
                        value = rhs.value.apply(rhs.context, values);
                    }
                    return context ? {
                        value: value
                    } : value;
                };

              case AST.AssignmentExpression:
                left = this.recurse(ast.left, true, 1);
                right = this.recurse(ast.right);
                return function(scope, locals, assign, inputs) {
                    var lhs = left(scope, locals, assign, inputs);
                    var rhs = right(scope, locals, assign, inputs);
                    lhs.context[lhs.name] = rhs;
                    return context ? {
                        value: rhs
                    } : rhs;
                };

              case AST.ArrayExpression:
                args = [];
                forEach(ast.elements, function(expr) {
                    args.push(self.recurse(expr));
                });
                return function(scope, locals, assign, inputs) {
                    var value = [];
                    for (var i = 0; i < args.length; ++i) {
                        value.push(args[i](scope, locals, assign, inputs));
                    }
                    return context ? {
                        value: value
                    } : value;
                };

              case AST.ObjectExpression:
                args = [];
                forEach(ast.properties, function(property) {
                    if (property.computed) {
                        args.push({
                            key: self.recurse(property.key),
                            computed: true,
                            value: self.recurse(property.value)
                        });
                    } else {
                        args.push({
                            key: property.key.type === AST.Identifier ? property.key.name : "" + property.key.value,
                            computed: false,
                            value: self.recurse(property.value)
                        });
                    }
                });
                return function(scope, locals, assign, inputs) {
                    var value = {};
                    for (var i = 0; i < args.length; ++i) {
                        if (args[i].computed) {
                            value[args[i].key(scope, locals, assign, inputs)] = args[i].value(scope, locals, assign, inputs);
                        } else {
                            value[args[i].key] = args[i].value(scope, locals, assign, inputs);
                        }
                    }
                    return context ? {
                        value: value
                    } : value;
                };

              case AST.ThisExpression:
                return function(scope) {
                    return context ? {
                        value: scope
                    } : scope;
                };

              case AST.LocalsExpression:
                return function(scope, locals) {
                    return context ? {
                        value: locals
                    } : locals;
                };

              case AST.NGValueParameter:
                return function(scope, locals, assign) {
                    return context ? {
                        value: assign
                    } : assign;
                };
            }
        },
        "unary+": function(argument, context) {
            return function(scope, locals, assign, inputs) {
                var arg = argument(scope, locals, assign, inputs);
                if (isDefined(arg)) {
                    arg = +arg;
                } else {
                    arg = 0;
                }
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "unary-": function(argument, context) {
            return function(scope, locals, assign, inputs) {
                var arg = argument(scope, locals, assign, inputs);
                if (isDefined(arg)) {
                    arg = -arg;
                } else {
                    arg = -0;
                }
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "unary!": function(argument, context) {
            return function(scope, locals, assign, inputs) {
                var arg = !argument(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary+": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var lhs = left(scope, locals, assign, inputs);
                var rhs = right(scope, locals, assign, inputs);
                var arg = plusFn(lhs, rhs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary-": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var lhs = left(scope, locals, assign, inputs);
                var rhs = right(scope, locals, assign, inputs);
                var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary*": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary/": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary%": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary===": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary!==": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary==": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary!=": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary<": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary>": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary<=": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary>=": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary&&": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "binary||": function(left, right, context) {
            return function(scope, locals, assign, inputs) {
                var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        "ternary?:": function(test, alternate, consequent, context) {
            return function(scope, locals, assign, inputs) {
                var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
                return context ? {
                    value: arg
                } : arg;
            };
        },
        value: function(value, context) {
            return function() {
                return context ? {
                    context: undefined,
                    name: undefined,
                    value: value
                } : value;
            };
        },
        identifier: function(name, context, create) {
            return function(scope, locals, assign, inputs) {
                var base = locals && name in locals ? locals : scope;
                if (create && create !== 1 && base && base[name] == null) {
                    base[name] = {};
                }
                var value = base ? base[name] : undefined;
                if (context) {
                    return {
                        context: base,
                        name: name,
                        value: value
                    };
                } else {
                    return value;
                }
            };
        },
        computedMember: function(left, right, context, create) {
            return function(scope, locals, assign, inputs) {
                var lhs = left(scope, locals, assign, inputs);
                var rhs;
                var value;
                if (lhs != null) {
                    rhs = right(scope, locals, assign, inputs);
                    rhs = getStringValue(rhs);
                    if (create && create !== 1) {
                        if (lhs && !lhs[rhs]) {
                            lhs[rhs] = {};
                        }
                    }
                    value = lhs[rhs];
                }
                if (context) {
                    return {
                        context: lhs,
                        name: rhs,
                        value: value
                    };
                } else {
                    return value;
                }
            };
        },
        nonComputedMember: function(left, right, context, create) {
            return function(scope, locals, assign, inputs) {
                var lhs = left(scope, locals, assign, inputs);
                if (create && create !== 1) {
                    if (lhs && lhs[right] == null) {
                        lhs[right] = {};
                    }
                }
                var value = lhs != null ? lhs[right] : undefined;
                if (context) {
                    return {
                        context: lhs,
                        name: right,
                        value: value
                    };
                } else {
                    return value;
                }
            };
        },
        inputs: function(input, watchId) {
            return function(scope, value, locals, inputs) {
                if (inputs) return inputs[watchId];
                return input(scope, value, locals);
            };
        }
    };
    function Parser(lexer, $filter, options) {
        this.ast = new AST(lexer, options);
        this.astCompiler = options.csp ? new ASTInterpreter($filter) : new ASTCompiler($filter);
    }
    Parser.prototype = {
        constructor: Parser,
        parse: function(text) {
            var ast = this.getAst(text);
            var fn = this.astCompiler.compile(ast.ast);
            fn.literal = isLiteral(ast.ast);
            fn.constant = isConstant(ast.ast);
            fn.oneTime = ast.oneTime;
            return fn;
        },
        getAst: function(exp) {
            var oneTime = false;
            exp = exp.trim();
            if (exp.charAt(0) === ":" && exp.charAt(1) === ":") {
                oneTime = true;
                exp = exp.substring(2);
            }
            return {
                ast: this.ast.ast(exp),
                oneTime: oneTime
            };
        }
    };
    function getValueOf(value) {
        return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
    }
    function $ParseProvider() {
        var cache = createMap();
        var literals = {
            true: true,
            false: false,
            null: null,
            undefined: undefined
        };
        var identStart, identContinue;
        this.addLiteral = function(literalName, literalValue) {
            literals[literalName] = literalValue;
        };
        this.setIdentifierFns = function(identifierStart, identifierContinue) {
            identStart = identifierStart;
            identContinue = identifierContinue;
            return this;
        };
        this.$get = [ "$filter", function($filter) {
            var noUnsafeEval = csp().noUnsafeEval;
            var $parseOptions = {
                csp: noUnsafeEval,
                literals: copy(literals),
                isIdentifierStart: isFunction(identStart) && identStart,
                isIdentifierContinue: isFunction(identContinue) && identContinue
            };
            $parse.$$getAst = $$getAst;
            return $parse;
            function $parse(exp, interceptorFn) {
                var parsedExpression, cacheKey;
                switch (typeof exp) {
                  case "string":
                    exp = exp.trim();
                    cacheKey = exp;
                    parsedExpression = cache[cacheKey];
                    if (!parsedExpression) {
                        var lexer = new Lexer($parseOptions);
                        var parser = new Parser(lexer, $filter, $parseOptions);
                        parsedExpression = parser.parse(exp);
                        cache[cacheKey] = addWatchDelegate(parsedExpression);
                    }
                    return addInterceptor(parsedExpression, interceptorFn);

                  case "function":
                    return addInterceptor(exp, interceptorFn);

                  default:
                    return addInterceptor(noop, interceptorFn);
                }
            }
            function $$getAst(exp) {
                var lexer = new Lexer($parseOptions);
                var parser = new Parser(lexer, $filter, $parseOptions);
                return parser.getAst(exp).ast;
            }
            function expressionInputDirtyCheck(newValue, oldValueOfValue, compareObjectIdentity) {
                if (newValue == null || oldValueOfValue == null) {
                    return newValue === oldValueOfValue;
                }
                if (typeof newValue === "object") {
                    newValue = getValueOf(newValue);
                    if (typeof newValue === "object" && !compareObjectIdentity) {
                        return false;
                    }
                }
                return newValue === oldValueOfValue || newValue !== newValue && oldValueOfValue !== oldValueOfValue;
            }
            function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
                var inputExpressions = parsedExpression.inputs;
                var lastResult;
                if (inputExpressions.length === 1) {
                    var oldInputValueOf = expressionInputDirtyCheck;
                    inputExpressions = inputExpressions[0];
                    return scope.$watch(function expressionInputWatch(scope) {
                        var newInputValue = inputExpressions(scope);
                        if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf, inputExpressions.isPure)) {
                            lastResult = parsedExpression(scope, undefined, undefined, [ newInputValue ]);
                            oldInputValueOf = newInputValue && getValueOf(newInputValue);
                        }
                        return lastResult;
                    }, listener, objectEquality, prettyPrintExpression);
                }
                var oldInputValueOfValues = [];
                var oldInputValues = [];
                for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
                    oldInputValueOfValues[i] = expressionInputDirtyCheck;
                    oldInputValues[i] = null;
                }
                return scope.$watch(function expressionInputsWatch(scope) {
                    var changed = false;
                    for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
                        var newInputValue = inputExpressions[i](scope);
                        if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i], inputExpressions[i].isPure))) {
                            oldInputValues[i] = newInputValue;
                            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
                        }
                    }
                    if (changed) {
                        lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
                    }
                    return lastResult;
                }, listener, objectEquality, prettyPrintExpression);
            }
            function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
                var isDone = parsedExpression.literal ? isAllDefined : isDefined;
                var unwatch, lastValue;
                var exp = parsedExpression.$$intercepted || parsedExpression;
                var post = parsedExpression.$$interceptor || identity;
                var useInputs = parsedExpression.inputs && !exp.inputs;
                oneTimeWatch.literal = parsedExpression.literal;
                oneTimeWatch.constant = parsedExpression.constant;
                oneTimeWatch.inputs = parsedExpression.inputs;
                addWatchDelegate(oneTimeWatch);
                unwatch = scope.$watch(oneTimeWatch, listener, objectEquality, prettyPrintExpression);
                return unwatch;
                function unwatchIfDone() {
                    if (isDone(lastValue)) {
                        unwatch();
                    }
                }
                function oneTimeWatch(scope, locals, assign, inputs) {
                    lastValue = useInputs && inputs ? inputs[0] : exp(scope, locals, assign, inputs);
                    if (isDone(lastValue)) {
                        scope.$$postDigest(unwatchIfDone);
                    }
                    return post(lastValue);
                }
            }
            function isAllDefined(value) {
                var allDefined = true;
                forEach(value, function(val) {
                    if (!isDefined(val)) allDefined = false;
                });
                return allDefined;
            }
            function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
                var unwatch = scope.$watch(function constantWatch(scope) {
                    unwatch();
                    return parsedExpression(scope);
                }, listener, objectEquality);
                return unwatch;
            }
            function addWatchDelegate(parsedExpression) {
                if (parsedExpression.constant) {
                    parsedExpression.$$watchDelegate = constantWatchDelegate;
                } else if (parsedExpression.oneTime) {
                    parsedExpression.$$watchDelegate = oneTimeWatchDelegate;
                } else if (parsedExpression.inputs) {
                    parsedExpression.$$watchDelegate = inputsWatchDelegate;
                }
                return parsedExpression;
            }
            function chainInterceptors(first, second) {
                function chainedInterceptor(value) {
                    return second(first(value));
                }
                chainedInterceptor.$stateful = first.$stateful || second.$stateful;
                chainedInterceptor.$$pure = first.$$pure && second.$$pure;
                return chainedInterceptor;
            }
            function addInterceptor(parsedExpression, interceptorFn) {
                if (!interceptorFn) return parsedExpression;
                if (parsedExpression.$$interceptor) {
                    interceptorFn = chainInterceptors(parsedExpression.$$interceptor, interceptorFn);
                    parsedExpression = parsedExpression.$$intercepted;
                }
                var useInputs = false;
                var fn = function interceptedExpression(scope, locals, assign, inputs) {
                    var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);
                    return interceptorFn(value);
                };
                fn.$$intercepted = parsedExpression;
                fn.$$interceptor = interceptorFn;
                fn.literal = parsedExpression.literal;
                fn.oneTime = parsedExpression.oneTime;
                fn.constant = parsedExpression.constant;
                if (!interceptorFn.$stateful) {
                    useInputs = !parsedExpression.inputs;
                    fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [ parsedExpression ];
                    if (!interceptorFn.$$pure) {
                        fn.inputs = fn.inputs.map(function(e) {
                            if (e.isPure === PURITY_RELATIVE) {
                                return function depurifier(s) {
                                    return e(s);
                                };
                            }
                            return e;
                        });
                    }
                }
                return addWatchDelegate(fn);
            }
        } ];
    }
    function $QProvider() {
        var errorOnUnhandledRejections = true;
        this.$get = [ "$rootScope", "$exceptionHandler", function($rootScope, $exceptionHandler) {
            return qFactory(function(callback) {
                $rootScope.$evalAsync(callback);
            }, $exceptionHandler, errorOnUnhandledRejections);
        } ];
        this.errorOnUnhandledRejections = function(value) {
            if (isDefined(value)) {
                errorOnUnhandledRejections = value;
                return this;
            } else {
                return errorOnUnhandledRejections;
            }
        };
    }
    function $$QProvider() {
        var errorOnUnhandledRejections = true;
        this.$get = [ "$browser", "$exceptionHandler", function($browser, $exceptionHandler) {
            return qFactory(function(callback) {
                $browser.defer(callback);
            }, $exceptionHandler, errorOnUnhandledRejections);
        } ];
        this.errorOnUnhandledRejections = function(value) {
            if (isDefined(value)) {
                errorOnUnhandledRejections = value;
                return this;
            } else {
                return errorOnUnhandledRejections;
            }
        };
    }
    function qFactory(nextTick, exceptionHandler, errorOnUnhandledRejections) {
        var $qMinErr = minErr("$q", TypeError);
        var queueSize = 0;
        var checkQueue = [];
        function defer() {
            return new Deferred();
        }
        function Deferred() {
            var promise = this.promise = new Promise();
            this.resolve = function(val) {
                resolvePromise(promise, val);
            };
            this.reject = function(reason) {
                rejectPromise(promise, reason);
            };
            this.notify = function(progress) {
                notifyPromise(promise, progress);
            };
        }
        function Promise() {
            this.$$state = {
                status: 0
            };
        }
        extend(Promise.prototype, {
            then: function(onFulfilled, onRejected, progressBack) {
                if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
                    return this;
                }
                var result = new Promise();
                this.$$state.pending = this.$$state.pending || [];
                this.$$state.pending.push([ result, onFulfilled, onRejected, progressBack ]);
                if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);
                return result;
            },
            catch: function(callback) {
                return this.then(null, callback);
            },
            finally: function(callback, progressBack) {
                return this.then(function(value) {
                    return handleCallback(value, resolve, callback);
                }, function(error) {
                    return handleCallback(error, reject, callback);
                }, progressBack);
            }
        });
        function processQueue(state) {
            var fn, promise, pending;
            pending = state.pending;
            state.processScheduled = false;
            state.pending = undefined;
            try {
                for (var i = 0, ii = pending.length; i < ii; ++i) {
                    markQStateExceptionHandled(state);
                    promise = pending[i][0];
                    fn = pending[i][state.status];
                    try {
                        if (isFunction(fn)) {
                            resolvePromise(promise, fn(state.value));
                        } else if (state.status === 1) {
                            resolvePromise(promise, state.value);
                        } else {
                            rejectPromise(promise, state.value);
                        }
                    } catch (e) {
                        rejectPromise(promise, e);
                        if (e && e.$$passToExceptionHandler === true) {
                            exceptionHandler(e);
                        }
                    }
                }
            } finally {
                --queueSize;
                if (errorOnUnhandledRejections && queueSize === 0) {
                    nextTick(processChecks);
                }
            }
        }
        function processChecks() {
            while (!queueSize && checkQueue.length) {
                var toCheck = checkQueue.shift();
                if (!isStateExceptionHandled(toCheck)) {
                    markQStateExceptionHandled(toCheck);
                    var errorMessage = "Possibly unhandled rejection: " + toDebugString(toCheck.value);
                    if (isError(toCheck.value)) {
                        exceptionHandler(toCheck.value, errorMessage);
                    } else {
                        exceptionHandler(errorMessage);
                    }
                }
            }
        }
        function scheduleProcessQueue(state) {
            if (errorOnUnhandledRejections && !state.pending && state.status === 2 && !isStateExceptionHandled(state)) {
                if (queueSize === 0 && checkQueue.length === 0) {
                    nextTick(processChecks);
                }
                checkQueue.push(state);
            }
            if (state.processScheduled || !state.pending) return;
            state.processScheduled = true;
            ++queueSize;
            nextTick(function() {
                processQueue(state);
            });
        }
        function resolvePromise(promise, val) {
            if (promise.$$state.status) return;
            if (val === promise) {
                $$reject(promise, $qMinErr("qcycle", "Expected promise to be resolved with value other than itself '{0}'", val));
            } else {
                $$resolve(promise, val);
            }
        }
        function $$resolve(promise, val) {
            var then;
            var done = false;
            try {
                if (isObject(val) || isFunction(val)) then = val.then;
                if (isFunction(then)) {
                    promise.$$state.status = -1;
                    then.call(val, doResolve, doReject, doNotify);
                } else {
                    promise.$$state.value = val;
                    promise.$$state.status = 1;
                    scheduleProcessQueue(promise.$$state);
                }
            } catch (e) {
                doReject(e);
            }
            function doResolve(val) {
                if (done) return;
                done = true;
                $$resolve(promise, val);
            }
            function doReject(val) {
                if (done) return;
                done = true;
                $$reject(promise, val);
            }
            function doNotify(progress) {
                notifyPromise(promise, progress);
            }
        }
        function rejectPromise(promise, reason) {
            if (promise.$$state.status) return;
            $$reject(promise, reason);
        }
        function $$reject(promise, reason) {
            promise.$$state.value = reason;
            promise.$$state.status = 2;
            scheduleProcessQueue(promise.$$state);
        }
        function notifyPromise(promise, progress) {
            var callbacks = promise.$$state.pending;
            if (promise.$$state.status <= 0 && callbacks && callbacks.length) {
                nextTick(function() {
                    var callback, result;
                    for (var i = 0, ii = callbacks.length; i < ii; i++) {
                        result = callbacks[i][0];
                        callback = callbacks[i][3];
                        try {
                            notifyPromise(result, isFunction(callback) ? callback(progress) : progress);
                        } catch (e) {
                            exceptionHandler(e);
                        }
                    }
                });
            }
        }
        function reject(reason) {
            var result = new Promise();
            rejectPromise(result, reason);
            return result;
        }
        function handleCallback(value, resolver, callback) {
            var callbackOutput = null;
            try {
                if (isFunction(callback)) callbackOutput = callback();
            } catch (e) {
                return reject(e);
            }
            if (isPromiseLike(callbackOutput)) {
                return callbackOutput.then(function() {
                    return resolver(value);
                }, reject);
            } else {
                return resolver(value);
            }
        }
        function when(value, callback, errback, progressBack) {
            var result = new Promise();
            resolvePromise(result, value);
            return result.then(callback, errback, progressBack);
        }
        var resolve = when;
        function all(promises) {
            var result = new Promise(), counter = 0, results = isArray(promises) ? [] : {};
            forEach(promises, function(promise, key) {
                counter++;
                when(promise).then(function(value) {
                    results[key] = value;
                    if (!--counter) resolvePromise(result, results);
                }, function(reason) {
                    rejectPromise(result, reason);
                });
            });
            if (counter === 0) {
                resolvePromise(result, results);
            }
            return result;
        }
        function race(promises) {
            var deferred = defer();
            forEach(promises, function(promise) {
                when(promise).then(deferred.resolve, deferred.reject);
            });
            return deferred.promise;
        }
        function $Q(resolver) {
            if (!isFunction(resolver)) {
                throw $qMinErr("norslvr", "Expected resolverFn, got '{0}'", resolver);
            }
            var promise = new Promise();
            function resolveFn(value) {
                resolvePromise(promise, value);
            }
            function rejectFn(reason) {
                rejectPromise(promise, reason);
            }
            resolver(resolveFn, rejectFn);
            return promise;
        }
        $Q.prototype = Promise.prototype;
        $Q.defer = defer;
        $Q.reject = reject;
        $Q.when = when;
        $Q.resolve = resolve;
        $Q.all = all;
        $Q.race = race;
        return $Q;
    }
    function isStateExceptionHandled(state) {
        return !!state.pur;
    }
    function markQStateExceptionHandled(state) {
        state.pur = true;
    }
    function markQExceptionHandled(q) {
        if (q.$$state) {
            markQStateExceptionHandled(q.$$state);
        }
    }
    function $$RAFProvider() {
        this.$get = [ "$window", "$timeout", function($window, $timeout) {
            var requestAnimationFrame = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame;
            var cancelAnimationFrame = $window.cancelAnimationFrame || $window.webkitCancelAnimationFrame || $window.webkitCancelRequestAnimationFrame;
            var rafSupported = !!requestAnimationFrame;
            var raf = rafSupported ? function(fn) {
                var id = requestAnimationFrame(fn);
                return function() {
                    cancelAnimationFrame(id);
                };
            } : function(fn) {
                var timer = $timeout(fn, 16.66, false);
                return function() {
                    $timeout.cancel(timer);
                };
            };
            raf.supported = rafSupported;
            return raf;
        } ];
    }
    function $RootScopeProvider() {
        var TTL = 10;
        var $rootScopeMinErr = minErr("$rootScope");
        var lastDirtyWatch = null;
        var applyAsyncId = null;
        this.digestTtl = function(value) {
            if (arguments.length) {
                TTL = value;
            }
            return TTL;
        };
        function createChildScopeClass(parent) {
            function ChildScope() {
                this.$$watchers = this.$$nextSibling = this.$$childHead = this.$$childTail = null;
                this.$$listeners = {};
                this.$$listenerCount = {};
                this.$$watchersCount = 0;
                this.$id = nextUid();
                this.$$ChildScope = null;
                this.$$suspended = false;
            }
            ChildScope.prototype = parent;
            return ChildScope;
        }
        this.$get = [ "$exceptionHandler", "$parse", "$browser", function($exceptionHandler, $parse, $browser) {
            function destroyChildScope($event) {
                $event.currentScope.$$destroyed = true;
            }
            function cleanUpScope($scope) {
                if (msie === 9) {
                    if ($scope.$$childHead) {
                        cleanUpScope($scope.$$childHead);
                    }
                    if ($scope.$$nextSibling) {
                        cleanUpScope($scope.$$nextSibling);
                    }
                }
                $scope.$parent = $scope.$$nextSibling = $scope.$$prevSibling = $scope.$$childHead = $scope.$$childTail = $scope.$root = $scope.$$watchers = null;
            }
            function Scope() {
                this.$id = nextUid();
                this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null;
                this.$root = this;
                this.$$destroyed = false;
                this.$$suspended = false;
                this.$$listeners = {};
                this.$$listenerCount = {};
                this.$$watchersCount = 0;
                this.$$isolateBindings = null;
            }
            Scope.prototype = {
                constructor: Scope,
                $new: function(isolate, parent) {
                    var child;
                    parent = parent || this;
                    if (isolate) {
                        child = new Scope();
                        child.$root = this.$root;
                    } else {
                        if (!this.$$ChildScope) {
                            this.$$ChildScope = createChildScopeClass(this);
                        }
                        child = new this.$$ChildScope();
                    }
                    child.$parent = parent;
                    child.$$prevSibling = parent.$$childTail;
                    if (parent.$$childHead) {
                        parent.$$childTail.$$nextSibling = child;
                        parent.$$childTail = child;
                    } else {
                        parent.$$childHead = parent.$$childTail = child;
                    }
                    if (isolate || parent !== this) child.$on("$destroy", destroyChildScope);
                    return child;
                },
                $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
                    var get = $parse(watchExp);
                    var fn = isFunction(listener) ? listener : noop;
                    if (get.$$watchDelegate) {
                        return get.$$watchDelegate(this, fn, objectEquality, get, watchExp);
                    }
                    var scope = this, array = scope.$$watchers, watcher = {
                        fn: fn,
                        last: initWatchVal,
                        get: get,
                        exp: prettyPrintExpression || watchExp,
                        eq: !!objectEquality
                    };
                    lastDirtyWatch = null;
                    if (!array) {
                        array = scope.$$watchers = [];
                        array.$$digestWatchIndex = -1;
                    }
                    array.unshift(watcher);
                    array.$$digestWatchIndex++;
                    incrementWatchersCount(this, 1);
                    return function deregisterWatch() {
                        var index = arrayRemove(array, watcher);
                        if (index >= 0) {
                            incrementWatchersCount(scope, -1);
                            if (index < array.$$digestWatchIndex) {
                                array.$$digestWatchIndex--;
                            }
                        }
                        lastDirtyWatch = null;
                    };
                },
                $watchGroup: function(watchExpressions, listener) {
                    var oldValues = new Array(watchExpressions.length);
                    var newValues = new Array(watchExpressions.length);
                    var deregisterFns = [];
                    var self = this;
                    var changeReactionScheduled = false;
                    var firstRun = true;
                    if (!watchExpressions.length) {
                        var shouldCall = true;
                        self.$evalAsync(function() {
                            if (shouldCall) listener(newValues, newValues, self);
                        });
                        return function deregisterWatchGroup() {
                            shouldCall = false;
                        };
                    }
                    if (watchExpressions.length === 1) {
                        return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
                            newValues[0] = value;
                            oldValues[0] = oldValue;
                            listener(newValues, value === oldValue ? newValues : oldValues, scope);
                        });
                    }
                    forEach(watchExpressions, function(expr, i) {
                        var unwatchFn = self.$watch(expr, function watchGroupSubAction(value) {
                            newValues[i] = value;
                            if (!changeReactionScheduled) {
                                changeReactionScheduled = true;
                                self.$evalAsync(watchGroupAction);
                            }
                        });
                        deregisterFns.push(unwatchFn);
                    });
                    function watchGroupAction() {
                        changeReactionScheduled = false;
                        try {
                            if (firstRun) {
                                firstRun = false;
                                listener(newValues, newValues, self);
                            } else {
                                listener(newValues, oldValues, self);
                            }
                        } finally {
                            for (var i = 0; i < watchExpressions.length; i++) {
                                oldValues[i] = newValues[i];
                            }
                        }
                    }
                    return function deregisterWatchGroup() {
                        while (deregisterFns.length) {
                            deregisterFns.shift()();
                        }
                    };
                },
                $watchCollection: function(obj, listener) {
                    $watchCollectionInterceptor.$$pure = $parse(obj).literal;
                    $watchCollectionInterceptor.$stateful = !$watchCollectionInterceptor.$$pure;
                    var self = this;
                    var newValue;
                    var oldValue;
                    var veryOldValue;
                    var trackVeryOldValue = listener.length > 1;
                    var changeDetected = 0;
                    var changeDetector = $parse(obj, $watchCollectionInterceptor);
                    var internalArray = [];
                    var internalObject = {};
                    var initRun = true;
                    var oldLength = 0;
                    function $watchCollectionInterceptor(_value) {
                        newValue = _value;
                        var newLength, key, bothNaN, newItem, oldItem;
                        if (isUndefined(newValue)) return;
                        if (!isObject(newValue)) {
                            if (oldValue !== newValue) {
                                oldValue = newValue;
                                changeDetected++;
                            }
                        } else if (isArrayLike(newValue)) {
                            if (oldValue !== internalArray) {
                                oldValue = internalArray;
                                oldLength = oldValue.length = 0;
                                changeDetected++;
                            }
                            newLength = newValue.length;
                            if (oldLength !== newLength) {
                                changeDetected++;
                                oldValue.length = oldLength = newLength;
                            }
                            for (var i = 0; i < newLength; i++) {
                                oldItem = oldValue[i];
                                newItem = newValue[i];
                                bothNaN = oldItem !== oldItem && newItem !== newItem;
                                if (!bothNaN && oldItem !== newItem) {
                                    changeDetected++;
                                    oldValue[i] = newItem;
                                }
                            }
                        } else {
                            if (oldValue !== internalObject) {
                                oldValue = internalObject = {};
                                oldLength = 0;
                                changeDetected++;
                            }
                            newLength = 0;
                            for (key in newValue) {
                                if (hasOwnProperty.call(newValue, key)) {
                                    newLength++;
                                    newItem = newValue[key];
                                    oldItem = oldValue[key];
                                    if (key in oldValue) {
                                        bothNaN = oldItem !== oldItem && newItem !== newItem;
                                        if (!bothNaN && oldItem !== newItem) {
                                            changeDetected++;
                                            oldValue[key] = newItem;
                                        }
                                    } else {
                                        oldLength++;
                                        oldValue[key] = newItem;
                                        changeDetected++;
                                    }
                                }
                            }
                            if (oldLength > newLength) {
                                changeDetected++;
                                for (key in oldValue) {
                                    if (!hasOwnProperty.call(newValue, key)) {
                                        oldLength--;
                                        delete oldValue[key];
                                    }
                                }
                            }
                        }
                        return changeDetected;
                    }
                    function $watchCollectionAction() {
                        if (initRun) {
                            initRun = false;
                            listener(newValue, newValue, self);
                        } else {
                            listener(newValue, veryOldValue, self);
                        }
                        if (trackVeryOldValue) {
                            if (!isObject(newValue)) {
                                veryOldValue = newValue;
                            } else if (isArrayLike(newValue)) {
                                veryOldValue = new Array(newValue.length);
                                for (var i = 0; i < newValue.length; i++) {
                                    veryOldValue[i] = newValue[i];
                                }
                            } else {
                                veryOldValue = {};
                                for (var key in newValue) {
                                    if (hasOwnProperty.call(newValue, key)) {
                                        veryOldValue[key] = newValue[key];
                                    }
                                }
                            }
                        }
                    }
                    return this.$watch(changeDetector, $watchCollectionAction);
                },
                $digest: function() {
                    var watch, value, last, fn, get, watchers, dirty, ttl = TTL, next, current, target = asyncQueue.length ? $rootScope : this, watchLog = [], logIdx, asyncTask;
                    beginPhase("$digest");
                    $browser.$$checkUrlChange();
                    if (this === $rootScope && applyAsyncId !== null) {
                        $browser.defer.cancel(applyAsyncId);
                        flushApplyAsync();
                    }
                    lastDirtyWatch = null;
                    do {
                        dirty = false;
                        current = target;
                        for (var asyncQueuePosition = 0; asyncQueuePosition < asyncQueue.length; asyncQueuePosition++) {
                            try {
                                asyncTask = asyncQueue[asyncQueuePosition];
                                fn = asyncTask.fn;
                                fn(asyncTask.scope, asyncTask.locals);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                            lastDirtyWatch = null;
                        }
                        asyncQueue.length = 0;
                        traverseScopesLoop: do {
                            if (watchers = !current.$$suspended && current.$$watchers) {
                                watchers.$$digestWatchIndex = watchers.length;
                                while (watchers.$$digestWatchIndex--) {
                                    try {
                                        watch = watchers[watchers.$$digestWatchIndex];
                                        if (watch) {
                                            get = watch.get;
                                            if ((value = get(current)) !== (last = watch.last) && !(watch.eq ? equals(value, last) : isNumberNaN(value) && isNumberNaN(last))) {
                                                dirty = true;
                                                lastDirtyWatch = watch;
                                                watch.last = watch.eq ? copy(value, null) : value;
                                                fn = watch.fn;
                                                fn(value, last === initWatchVal ? value : last, current);
                                                if (ttl < 5) {
                                                    logIdx = 4 - ttl;
                                                    if (!watchLog[logIdx]) watchLog[logIdx] = [];
                                                    watchLog[logIdx].push({
                                                        msg: isFunction(watch.exp) ? "fn: " + (watch.exp.name || watch.exp.toString()) : watch.exp,
                                                        newVal: value,
                                                        oldVal: last
                                                    });
                                                }
                                            } else if (watch === lastDirtyWatch) {
                                                dirty = false;
                                                break traverseScopesLoop;
                                            }
                                        }
                                    } catch (e) {
                                        $exceptionHandler(e);
                                    }
                                }
                            }
                            if (!(next = !current.$$suspended && current.$$watchersCount && current.$$childHead || current !== target && current.$$nextSibling)) {
                                while (current !== target && !(next = current.$$nextSibling)) {
                                    current = current.$parent;
                                }
                            }
                        } while (current = next);
                        if ((dirty || asyncQueue.length) && !ttl--) {
                            clearPhase();
                            throw $rootScopeMinErr("infdig", "{0} $digest() iterations reached. Aborting!\n" + "Watchers fired in the last 5 iterations: {1}", TTL, watchLog);
                        }
                    } while (dirty || asyncQueue.length);
                    clearPhase();
                    while (postDigestQueuePosition < postDigestQueue.length) {
                        try {
                            postDigestQueue[postDigestQueuePosition++]();
                        } catch (e) {
                            $exceptionHandler(e);
                        }
                    }
                    postDigestQueue.length = postDigestQueuePosition = 0;
                    $browser.$$checkUrlChange();
                },
                $suspend: function() {
                    this.$$suspended = true;
                },
                $isSuspended: function() {
                    return this.$$suspended;
                },
                $resume: function() {
                    this.$$suspended = false;
                },
                $destroy: function() {
                    if (this.$$destroyed) return;
                    var parent = this.$parent;
                    this.$broadcast("$destroy");
                    this.$$destroyed = true;
                    if (this === $rootScope) {
                        $browser.$$applicationDestroyed();
                    }
                    incrementWatchersCount(this, -this.$$watchersCount);
                    for (var eventName in this.$$listenerCount) {
                        decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
                    }
                    if (parent && parent.$$childHead === this) parent.$$childHead = this.$$nextSibling;
                    if (parent && parent.$$childTail === this) parent.$$childTail = this.$$prevSibling;
                    if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
                    if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;
                    this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
                    this.$on = this.$watch = this.$watchGroup = function() {
                        return noop;
                    };
                    this.$$listeners = {};
                    this.$$nextSibling = null;
                    cleanUpScope(this);
                },
                $eval: function(expr, locals) {
                    return $parse(expr)(this, locals);
                },
                $evalAsync: function(expr, locals) {
                    if (!$rootScope.$$phase && !asyncQueue.length) {
                        $browser.defer(function() {
                            if (asyncQueue.length) {
                                $rootScope.$digest();
                            }
                        }, null, "$evalAsync");
                    }
                    asyncQueue.push({
                        scope: this,
                        fn: $parse(expr),
                        locals: locals
                    });
                },
                $$postDigest: function(fn) {
                    postDigestQueue.push(fn);
                },
                $apply: function(expr) {
                    try {
                        beginPhase("$apply");
                        try {
                            return this.$eval(expr);
                        } finally {
                            clearPhase();
                        }
                    } catch (e) {
                        $exceptionHandler(e);
                    } finally {
                        try {
                            $rootScope.$digest();
                        } catch (e) {
                            $exceptionHandler(e);
                            throw e;
                        }
                    }
                },
                $applyAsync: function(expr) {
                    var scope = this;
                    if (expr) {
                        applyAsyncQueue.push($applyAsyncExpression);
                    }
                    expr = $parse(expr);
                    scheduleApplyAsync();
                    function $applyAsyncExpression() {
                        scope.$eval(expr);
                    }
                },
                $on: function(name, listener) {
                    var namedListeners = this.$$listeners[name];
                    if (!namedListeners) {
                        this.$$listeners[name] = namedListeners = [];
                    }
                    namedListeners.push(listener);
                    var current = this;
                    do {
                        if (!current.$$listenerCount[name]) {
                            current.$$listenerCount[name] = 0;
                        }
                        current.$$listenerCount[name]++;
                    } while (current = current.$parent);
                    var self = this;
                    return function() {
                        var indexOfListener = namedListeners.indexOf(listener);
                        if (indexOfListener !== -1) {
                            delete namedListeners[indexOfListener];
                            decrementListenerCount(self, 1, name);
                        }
                    };
                },
                $emit: function(name, args) {
                    var empty = [], namedListeners, scope = this, stopPropagation = false, event = {
                        name: name,
                        targetScope: scope,
                        stopPropagation: function() {
                            stopPropagation = true;
                        },
                        preventDefault: function() {
                            event.defaultPrevented = true;
                        },
                        defaultPrevented: false
                    }, listenerArgs = concat([ event ], arguments, 1), i, length;
                    do {
                        namedListeners = scope.$$listeners[name] || empty;
                        event.currentScope = scope;
                        for (i = 0, length = namedListeners.length; i < length; i++) {
                            if (!namedListeners[i]) {
                                namedListeners.splice(i, 1);
                                i--;
                                length--;
                                continue;
                            }
                            try {
                                namedListeners[i].apply(null, listenerArgs);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                        }
                        if (stopPropagation) {
                            break;
                        }
                        scope = scope.$parent;
                    } while (scope);
                    event.currentScope = null;
                    return event;
                },
                $broadcast: function(name, args) {
                    var target = this, current = target, next = target, event = {
                        name: name,
                        targetScope: target,
                        preventDefault: function() {
                            event.defaultPrevented = true;
                        },
                        defaultPrevented: false
                    };
                    if (!target.$$listenerCount[name]) return event;
                    var listenerArgs = concat([ event ], arguments, 1), listeners, i, length;
                    while (current = next) {
                        event.currentScope = current;
                        listeners = current.$$listeners[name] || [];
                        for (i = 0, length = listeners.length; i < length; i++) {
                            if (!listeners[i]) {
                                listeners.splice(i, 1);
                                i--;
                                length--;
                                continue;
                            }
                            try {
                                listeners[i].apply(null, listenerArgs);
                            } catch (e) {
                                $exceptionHandler(e);
                            }
                        }
                        if (!(next = current.$$listenerCount[name] && current.$$childHead || current !== target && current.$$nextSibling)) {
                            while (current !== target && !(next = current.$$nextSibling)) {
                                current = current.$parent;
                            }
                        }
                    }
                    event.currentScope = null;
                    return event;
                }
            };
            var $rootScope = new Scope();
            var asyncQueue = $rootScope.$$asyncQueue = [];
            var postDigestQueue = $rootScope.$$postDigestQueue = [];
            var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];
            var postDigestQueuePosition = 0;
            return $rootScope;
            function beginPhase(phase) {
                if ($rootScope.$$phase) {
                    throw $rootScopeMinErr("inprog", "{0} already in progress", $rootScope.$$phase);
                }
                $rootScope.$$phase = phase;
            }
            function clearPhase() {
                $rootScope.$$phase = null;
            }
            function incrementWatchersCount(current, count) {
                do {
                    current.$$watchersCount += count;
                } while (current = current.$parent);
            }
            function decrementListenerCount(current, count, name) {
                do {
                    current.$$listenerCount[name] -= count;
                    if (current.$$listenerCount[name] === 0) {
                        delete current.$$listenerCount[name];
                    }
                } while (current = current.$parent);
            }
            function initWatchVal() {}
            function flushApplyAsync() {
                while (applyAsyncQueue.length) {
                    try {
                        applyAsyncQueue.shift()();
                    } catch (e) {
                        $exceptionHandler(e);
                    }
                }
                applyAsyncId = null;
            }
            function scheduleApplyAsync() {
                if (applyAsyncId === null) {
                    applyAsyncId = $browser.defer(function() {
                        $rootScope.$apply(flushApplyAsync);
                    }, null, "$applyAsync");
                }
            }
        } ];
    }
    function $$SanitizeUriProvider() {
        var aHrefSanitizationTrustedUrlList = /^\s*(https?|s?ftp|mailto|tel|file):/, imgSrcSanitizationTrustedUrlList = /^\s*((https?|ftp|file|blob):|data:image\/)/;
        this.aHrefSanitizationTrustedUrlList = function(regexp) {
            if (isDefined(regexp)) {
                aHrefSanitizationTrustedUrlList = regexp;
                return this;
            }
            return aHrefSanitizationTrustedUrlList;
        };
        this.imgSrcSanitizationTrustedUrlList = function(regexp) {
            if (isDefined(regexp)) {
                imgSrcSanitizationTrustedUrlList = regexp;
                return this;
            }
            return imgSrcSanitizationTrustedUrlList;
        };
        this.$get = function() {
            return function sanitizeUri(uri, isMediaUrl) {
                var regex = isMediaUrl ? imgSrcSanitizationTrustedUrlList : aHrefSanitizationTrustedUrlList;
                var normalizedVal = urlResolve(uri && uri.trim()).href;
                if (normalizedVal !== "" && !normalizedVal.match(regex)) {
                    return "unsafe:" + normalizedVal;
                }
                return uri;
            };
        };
    }
    var $sceMinErr = minErr("$sce");
    var SCE_CONTEXTS = {
        HTML: "html",
        CSS: "css",
        MEDIA_URL: "mediaUrl",
        URL: "url",
        RESOURCE_URL: "resourceUrl",
        JS: "js"
    };
    var UNDERSCORE_LOWERCASE_REGEXP = /_([a-z])/g;
    function snakeToCamel(name) {
        return name.replace(UNDERSCORE_LOWERCASE_REGEXP, fnCamelCaseReplace);
    }
    function adjustMatcher(matcher) {
        if (matcher === "self") {
            return matcher;
        } else if (isString(matcher)) {
            if (matcher.indexOf("***") > -1) {
                throw $sceMinErr("iwcard", "Illegal sequence *** in string matcher.  String: {0}", matcher);
            }
            matcher = escapeForRegexp(matcher).replace(/\\\*\\\*/g, ".*").replace(/\\\*/g, "[^:/.?&;]*");
            return new RegExp("^" + matcher + "$");
        } else if (isRegExp(matcher)) {
            return new RegExp("^" + matcher.source + "$");
        } else {
            throw $sceMinErr("imatcher", 'Matchers may only be "self", string patterns or RegExp objects');
        }
    }
    function adjustMatchers(matchers) {
        var adjustedMatchers = [];
        if (isDefined(matchers)) {
            forEach(matchers, function(matcher) {
                adjustedMatchers.push(adjustMatcher(matcher));
            });
        }
        return adjustedMatchers;
    }
    function $SceDelegateProvider() {
        this.SCE_CONTEXTS = SCE_CONTEXTS;
        var trustedResourceUrlList = [ "self" ], bannedResourceUrlList = [];
        this.trustedResourceUrlList = function(value) {
            if (arguments.length) {
                trustedResourceUrlList = adjustMatchers(value);
            }
            return trustedResourceUrlList;
        };
        Object.defineProperty(this, "resourceUrlWhitelist", {
            get: function() {
                return this.trustedResourceUrlList;
            },
            set: function(value) {
                this.trustedResourceUrlList = value;
            }
        });
        this.bannedResourceUrlList = function(value) {
            if (arguments.length) {
                bannedResourceUrlList = adjustMatchers(value);
            }
            return bannedResourceUrlList;
        };
        Object.defineProperty(this, "resourceUrlBlacklist", {
            get: function() {
                return this.bannedResourceUrlList;
            },
            set: function(value) {
                this.bannedResourceUrlList = value;
            }
        });
        this.$get = [ "$injector", "$$sanitizeUri", function($injector, $$sanitizeUri) {
            var htmlSanitizer = function htmlSanitizer(html) {
                throw $sceMinErr("unsafe", "Attempting to use an unsafe value in a safe context.");
            };
            if ($injector.has("$sanitize")) {
                htmlSanitizer = $injector.get("$sanitize");
            }
            function matchUrl(matcher, parsedUrl) {
                if (matcher === "self") {
                    return urlIsSameOrigin(parsedUrl) || urlIsSameOriginAsBaseUrl(parsedUrl);
                } else {
                    return !!matcher.exec(parsedUrl.href);
                }
            }
            function isResourceUrlAllowedByPolicy(url) {
                var parsedUrl = urlResolve(url.toString());
                var i, n, allowed = false;
                for (i = 0, n = trustedResourceUrlList.length; i < n; i++) {
                    if (matchUrl(trustedResourceUrlList[i], parsedUrl)) {
                        allowed = true;
                        break;
                    }
                }
                if (allowed) {
                    for (i = 0, n = bannedResourceUrlList.length; i < n; i++) {
                        if (matchUrl(bannedResourceUrlList[i], parsedUrl)) {
                            allowed = false;
                            break;
                        }
                    }
                }
                return allowed;
            }
            function generateHolderType(Base) {
                var holderType = function TrustedValueHolderType(trustedValue) {
                    this.$$unwrapTrustedValue = function() {
                        return trustedValue;
                    };
                };
                if (Base) {
                    holderType.prototype = new Base();
                }
                holderType.prototype.valueOf = function sceValueOf() {
                    return this.$$unwrapTrustedValue();
                };
                holderType.prototype.toString = function sceToString() {
                    return this.$$unwrapTrustedValue().toString();
                };
                return holderType;
            }
            var trustedValueHolderBase = generateHolderType(), byType = {};
            byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.MEDIA_URL] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.URL] = generateHolderType(byType[SCE_CONTEXTS.MEDIA_URL]);
            byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
            byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);
            function trustAs(type, trustedValue) {
                var Constructor = byType.hasOwnProperty(type) ? byType[type] : null;
                if (!Constructor) {
                    throw $sceMinErr("icontext", "Attempted to trust a value in invalid context. Context: {0}; Value: {1}", type, trustedValue);
                }
                if (trustedValue === null || isUndefined(trustedValue) || trustedValue === "") {
                    return trustedValue;
                }
                if (typeof trustedValue !== "string") {
                    throw $sceMinErr("itype", "Attempted to trust a non-string value in a content requiring a string: Context: {0}", type);
                }
                return new Constructor(trustedValue);
            }
            function valueOf(maybeTrusted) {
                if (maybeTrusted instanceof trustedValueHolderBase) {
                    return maybeTrusted.$$unwrapTrustedValue();
                } else {
                    return maybeTrusted;
                }
            }
            function getTrusted(type, maybeTrusted) {
                if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === "") {
                    return maybeTrusted;
                }
                var constructor = byType.hasOwnProperty(type) ? byType[type] : null;
                if (constructor && maybeTrusted instanceof constructor) {
                    return maybeTrusted.$$unwrapTrustedValue();
                }
                if (isFunction(maybeTrusted.$$unwrapTrustedValue)) {
                    maybeTrusted = maybeTrusted.$$unwrapTrustedValue();
                }
                if (type === SCE_CONTEXTS.MEDIA_URL || type === SCE_CONTEXTS.URL) {
                    return $$sanitizeUri(maybeTrusted.toString(), type === SCE_CONTEXTS.MEDIA_URL);
                } else if (type === SCE_CONTEXTS.RESOURCE_URL) {
                    if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
                        return maybeTrusted;
                    } else {
                        throw $sceMinErr("insecurl", "Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}", maybeTrusted.toString());
                    }
                } else if (type === SCE_CONTEXTS.HTML) {
                    return htmlSanitizer(maybeTrusted);
                }
                throw $sceMinErr("unsafe", "Attempting to use an unsafe value in a safe context.");
            }
            return {
                trustAs: trustAs,
                getTrusted: getTrusted,
                valueOf: valueOf
            };
        } ];
    }
    function $SceProvider() {
        var enabled = true;
        this.enabled = function(value) {
            if (arguments.length) {
                enabled = !!value;
            }
            return enabled;
        };
        this.$get = [ "$parse", "$sceDelegate", function($parse, $sceDelegate) {
            if (enabled && msie < 8) {
                throw $sceMinErr("iequirks", "Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks " + "mode.  You can fix this by adding the text <!doctype html> to the top of your HTML " + "document.  See http://docs.angularjs.org/api/ng.$sce for more information.");
            }
            var sce = shallowCopy(SCE_CONTEXTS);
            sce.isEnabled = function() {
                return enabled;
            };
            sce.trustAs = $sceDelegate.trustAs;
            sce.getTrusted = $sceDelegate.getTrusted;
            sce.valueOf = $sceDelegate.valueOf;
            if (!enabled) {
                sce.trustAs = sce.getTrusted = function(type, value) {
                    return value;
                };
                sce.valueOf = identity;
            }
            sce.parseAs = function sceParseAs(type, expr) {
                var parsed = $parse(expr);
                if (parsed.literal && parsed.constant) {
                    return parsed;
                } else {
                    return $parse(expr, function(value) {
                        return sce.getTrusted(type, value);
                    });
                }
            };
            var parse = sce.parseAs, getTrusted = sce.getTrusted, trustAs = sce.trustAs;
            forEach(SCE_CONTEXTS, function(enumValue, name) {
                var lName = lowercase(name);
                sce[snakeToCamel("parse_as_" + lName)] = function(expr) {
                    return parse(enumValue, expr);
                };
                sce[snakeToCamel("get_trusted_" + lName)] = function(value) {
                    return getTrusted(enumValue, value);
                };
                sce[snakeToCamel("trust_as_" + lName)] = function(value) {
                    return trustAs(enumValue, value);
                };
            });
            return sce;
        } ];
    }
    function $SnifferProvider() {
        this.$get = [ "$window", "$document", function($window, $document) {
            var eventSupport = {}, isNw = $window.nw && $window.nw.process, isChromePackagedApp = !isNw && $window.chrome && ($window.chrome.app && $window.chrome.app.runtime || !$window.chrome.app && $window.chrome.runtime && $window.chrome.runtime.id), hasHistoryPushState = !isChromePackagedApp && $window.history && $window.history.pushState, android = toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]), boxee = /Boxee/i.test(($window.navigator || {}).userAgent), document = $document[0] || {}, bodyStyle = document.body && document.body.style, transitions = false, animations = false;
            if (bodyStyle) {
                transitions = !!("transition" in bodyStyle || "webkitTransition" in bodyStyle);
                animations = !!("animation" in bodyStyle || "webkitAnimation" in bodyStyle);
            }
            return {
                history: !!(hasHistoryPushState && !(android < 4) && !boxee),
                hasEvent: function(event) {
                    if (event === "input" && msie) return false;
                    if (isUndefined(eventSupport[event])) {
                        var divElm = document.createElement("div");
                        eventSupport[event] = "on" + event in divElm;
                    }
                    return eventSupport[event];
                },
                csp: csp(),
                transitions: transitions,
                animations: animations,
                android: android
            };
        } ];
    }
    function $$TaskTrackerFactoryProvider() {
        this.$get = valueFn(function(log) {
            return new TaskTracker(log);
        });
    }
    function TaskTracker(log) {
        var self = this;
        var taskCounts = {};
        var taskCallbacks = [];
        var ALL_TASKS_TYPE = self.ALL_TASKS_TYPE = "$$all$$";
        var DEFAULT_TASK_TYPE = self.DEFAULT_TASK_TYPE = "$$default$$";
        self.completeTask = completeTask;
        self.incTaskCount = incTaskCount;
        self.notifyWhenNoPendingTasks = notifyWhenNoPendingTasks;
        function completeTask(fn, taskType) {
            taskType = taskType || DEFAULT_TASK_TYPE;
            try {
                fn();
            } finally {
                decTaskCount(taskType);
                var countForType = taskCounts[taskType];
                var countForAll = taskCounts[ALL_TASKS_TYPE];
                if (!countForAll || !countForType) {
                    var getNextCallback = !countForAll ? getLastCallback : getLastCallbackForType;
                    var nextCb;
                    while (nextCb = getNextCallback(taskType)) {
                        try {
                            nextCb();
                        } catch (e) {
                            log.error(e);
                        }
                    }
                }
            }
        }
        function decTaskCount(taskType) {
            taskType = taskType || DEFAULT_TASK_TYPE;
            if (taskCounts[taskType]) {
                taskCounts[taskType]--;
                taskCounts[ALL_TASKS_TYPE]--;
            }
        }
        function getLastCallback() {
            var cbInfo = taskCallbacks.pop();
            return cbInfo && cbInfo.cb;
        }
        function getLastCallbackForType(taskType) {
            for (var i = taskCallbacks.length - 1; i >= 0; --i) {
                var cbInfo = taskCallbacks[i];
                if (cbInfo.type === taskType) {
                    taskCallbacks.splice(i, 1);
                    return cbInfo.cb;
                }
            }
        }
        function incTaskCount(taskType) {
            taskType = taskType || DEFAULT_TASK_TYPE;
            taskCounts[taskType] = (taskCounts[taskType] || 0) + 1;
            taskCounts[ALL_TASKS_TYPE] = (taskCounts[ALL_TASKS_TYPE] || 0) + 1;
        }
        function notifyWhenNoPendingTasks(callback, taskType) {
            taskType = taskType || ALL_TASKS_TYPE;
            if (!taskCounts[taskType]) {
                callback();
            } else {
                taskCallbacks.push({
                    type: taskType,
                    cb: callback
                });
            }
        }
    }
    var $templateRequestMinErr = minErr("$templateRequest");
    function $TemplateRequestProvider() {
        var httpOptions;
        this.httpOptions = function(val) {
            if (val) {
                httpOptions = val;
                return this;
            }
            return httpOptions;
        };
        this.$get = [ "$exceptionHandler", "$templateCache", "$http", "$q", "$sce", function($exceptionHandler, $templateCache, $http, $q, $sce) {
            function handleRequestFn(tpl, ignoreRequestError) {
                handleRequestFn.totalPendingRequests++;
                if (!isString(tpl) || isUndefined($templateCache.get(tpl))) {
                    tpl = $sce.getTrustedResourceUrl(tpl);
                }
                var transformResponse = $http.defaults && $http.defaults.transformResponse;
                if (isArray(transformResponse)) {
                    transformResponse = transformResponse.filter(function(transformer) {
                        return transformer !== defaultHttpResponseTransform;
                    });
                } else if (transformResponse === defaultHttpResponseTransform) {
                    transformResponse = null;
                }
                return $http.get(tpl, extend({
                    cache: $templateCache,
                    transformResponse: transformResponse
                }, httpOptions)).finally(function() {
                    handleRequestFn.totalPendingRequests--;
                }).then(function(response) {
                    return $templateCache.put(tpl, response.data);
                }, handleError);
                function handleError(resp) {
                    if (!ignoreRequestError) {
                        resp = $templateRequestMinErr("tpload", "Failed to load template: {0} (HTTP status: {1} {2})", tpl, resp.status, resp.statusText);
                        $exceptionHandler(resp);
                    }
                    return $q.reject(resp);
                }
            }
            handleRequestFn.totalPendingRequests = 0;
            return handleRequestFn;
        } ];
    }
    function $$TestabilityProvider() {
        this.$get = [ "$rootScope", "$browser", "$location", function($rootScope, $browser, $location) {
            var testability = {};
            testability.findBindings = function(element, expression, opt_exactMatch) {
                var bindings = element.getElementsByClassName("ng-binding");
                var matches = [];
                forEach(bindings, function(binding) {
                    var dataBinding = angular.element(binding).data("$binding");
                    if (dataBinding) {
                        forEach(dataBinding, function(bindingName) {
                            if (opt_exactMatch) {
                                var matcher = new RegExp("(^|\\s)" + escapeForRegexp(expression) + "(\\s|\\||$)");
                                if (matcher.test(bindingName)) {
                                    matches.push(binding);
                                }
                            } else {
                                if (bindingName.indexOf(expression) !== -1) {
                                    matches.push(binding);
                                }
                            }
                        });
                    }
                });
                return matches;
            };
            testability.findModels = function(element, expression, opt_exactMatch) {
                var prefixes = [ "ng-", "data-ng-", "ng\\:" ];
                for (var p = 0; p < prefixes.length; ++p) {
                    var attributeEquals = opt_exactMatch ? "=" : "*=";
                    var selector = "[" + prefixes[p] + "model" + attributeEquals + '"' + expression + '"]';
                    var elements = element.querySelectorAll(selector);
                    if (elements.length) {
                        return elements;
                    }
                }
            };
            testability.getLocation = function() {
                return $location.url();
            };
            testability.setLocation = function(url) {
                if (url !== $location.url()) {
                    $location.url(url);
                    $rootScope.$digest();
                }
            };
            testability.whenStable = function(callback) {
                $browser.notifyWhenNoOutstandingRequests(callback);
            };
            return testability;
        } ];
    }
    var $timeoutMinErr = minErr("$timeout");
    function $TimeoutProvider() {
        this.$get = [ "$rootScope", "$browser", "$q", "$$q", "$exceptionHandler", function($rootScope, $browser, $q, $$q, $exceptionHandler) {
            var deferreds = {};
            function timeout(fn, delay, invokeApply) {
                if (!isFunction(fn)) {
                    invokeApply = delay;
                    delay = fn;
                    fn = noop;
                }
                var args = sliceArgs(arguments, 3), skipApply = isDefined(invokeApply) && !invokeApply, deferred = (skipApply ? $$q : $q).defer(), promise = deferred.promise, timeoutId;
                timeoutId = $browser.defer(function() {
                    try {
                        deferred.resolve(fn.apply(null, args));
                    } catch (e) {
                        deferred.reject(e);
                        $exceptionHandler(e);
                    } finally {
                        delete deferreds[promise.$$timeoutId];
                    }
                    if (!skipApply) $rootScope.$apply();
                }, delay, "$timeout");
                promise.$$timeoutId = timeoutId;
                deferreds[timeoutId] = deferred;
                return promise;
            }
            timeout.cancel = function(promise) {
                if (!promise) return false;
                if (!promise.hasOwnProperty("$$timeoutId")) {
                    throw $timeoutMinErr("badprom", "`$timeout.cancel()` called with a promise that was not generated by `$timeout()`.");
                }
                if (!deferreds.hasOwnProperty(promise.$$timeoutId)) return false;
                var id = promise.$$timeoutId;
                var deferred = deferreds[id];
                markQExceptionHandled(deferred.promise);
                deferred.reject("canceled");
                delete deferreds[id];
                return $browser.defer.cancel(id);
            };
            return timeout;
        } ];
    }
    var urlParsingNode = window.document.createElement("a");
    var originUrl = urlResolve(window.location.href);
    var baseUrlParsingNode;
    urlParsingNode.href = "http://[::1]";
    var ipv6InBrackets = urlParsingNode.hostname === "[::1]";
    function urlResolve(url) {
        if (!isString(url)) return url;
        var href = url;
        if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        var hostname = urlParsingNode.hostname;
        if (!ipv6InBrackets && hostname.indexOf(":") > -1) {
            hostname = "[" + hostname + "]";
        }
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
    }
    function urlIsSameOrigin(requestUrl) {
        return urlsAreSameOrigin(requestUrl, originUrl);
    }
    function urlIsSameOriginAsBaseUrl(requestUrl) {
        return urlsAreSameOrigin(requestUrl, getBaseUrl());
    }
    function urlIsAllowedOriginFactory(trustedOriginUrls) {
        var parsedAllowedOriginUrls = [ originUrl ].concat(trustedOriginUrls.map(urlResolve));
        return function urlIsAllowedOrigin(requestUrl) {
            var parsedUrl = urlResolve(requestUrl);
            return parsedAllowedOriginUrls.some(urlsAreSameOrigin.bind(null, parsedUrl));
        };
    }
    function urlsAreSameOrigin(url1, url2) {
        url1 = urlResolve(url1);
        url2 = urlResolve(url2);
        return url1.protocol === url2.protocol && url1.host === url2.host;
    }
    function getBaseUrl() {
        if (window.document.baseURI) {
            return window.document.baseURI;
        }
        if (!baseUrlParsingNode) {
            baseUrlParsingNode = window.document.createElement("a");
            baseUrlParsingNode.href = ".";
            baseUrlParsingNode = baseUrlParsingNode.cloneNode(false);
        }
        return baseUrlParsingNode.href;
    }
    function $WindowProvider() {
        this.$get = valueFn(window);
    }
    function $$CookieReader($document) {
        var rawDocument = $document[0] || {};
        var lastCookies = {};
        var lastCookieString = "";
        function safeGetCookie(rawDocument) {
            try {
                return rawDocument.cookie || "";
            } catch (e) {
                return "";
            }
        }
        function safeDecodeURIComponent(str) {
            try {
                return decodeURIComponent(str);
            } catch (e) {
                return str;
            }
        }
        return function() {
            var cookieArray, cookie, i, index, name;
            var currentCookieString = safeGetCookie(rawDocument);
            if (currentCookieString !== lastCookieString) {
                lastCookieString = currentCookieString;
                cookieArray = lastCookieString.split("; ");
                lastCookies = {};
                for (i = 0; i < cookieArray.length; i++) {
                    cookie = cookieArray[i];
                    index = cookie.indexOf("=");
                    if (index > 0) {
                        name = safeDecodeURIComponent(cookie.substring(0, index));
                        if (isUndefined(lastCookies[name])) {
                            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
                        }
                    }
                }
            }
            return lastCookies;
        };
    }
    $$CookieReader.$inject = [ "$document" ];
    function $$CookieReaderProvider() {
        this.$get = $$CookieReader;
    }
    $FilterProvider.$inject = [ "$provide" ];
    function $FilterProvider($provide) {
        var suffix = "Filter";
        function register(name, factory) {
            if (isObject(name)) {
                var filters = {};
                forEach(name, function(filter, key) {
                    filters[key] = register(key, filter);
                });
                return filters;
            } else {
                return $provide.factory(name + suffix, factory);
            }
        }
        this.register = register;
        this.$get = [ "$injector", function($injector) {
            return function(name) {
                return $injector.get(name + suffix);
            };
        } ];
        register("currency", currencyFilter);
        register("date", dateFilter);
        register("filter", filterFilter);
        register("json", jsonFilter);
        register("limitTo", limitToFilter);
        register("lowercase", lowercaseFilter);
        register("number", numberFilter);
        register("orderBy", orderByFilter);
        register("uppercase", uppercaseFilter);
    }
    function filterFilter() {
        return function(array, expression, comparator, anyPropertyKey) {
            if (!isArrayLike(array)) {
                if (array == null) {
                    return array;
                } else {
                    throw minErr("filter")("notarray", "Expected array but received: {0}", array);
                }
            }
            anyPropertyKey = anyPropertyKey || "$";
            var expressionType = getTypeForFilter(expression);
            var predicateFn;
            var matchAgainstAnyProp;
            switch (expressionType) {
              case "function":
                predicateFn = expression;
                break;

              case "boolean":
              case "null":
              case "number":
              case "string":
                matchAgainstAnyProp = true;

              case "object":
                predicateFn = createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp);
                break;

              default:
                return array;
            }
            return Array.prototype.filter.call(array, predicateFn);
        };
    }
    function createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp) {
        var shouldMatchPrimitives = isObject(expression) && anyPropertyKey in expression;
        var predicateFn;
        if (comparator === true) {
            comparator = equals;
        } else if (!isFunction(comparator)) {
            comparator = function(actual, expected) {
                if (isUndefined(actual)) {
                    return false;
                }
                if (actual === null || expected === null) {
                    return actual === expected;
                }
                if (isObject(expected) || isObject(actual) && !hasCustomToString(actual)) {
                    return false;
                }
                actual = lowercase("" + actual);
                expected = lowercase("" + expected);
                return actual.indexOf(expected) !== -1;
            };
        }
        predicateFn = function(item) {
            if (shouldMatchPrimitives && !isObject(item)) {
                return deepCompare(item, expression[anyPropertyKey], comparator, anyPropertyKey, false);
            }
            return deepCompare(item, expression, comparator, anyPropertyKey, matchAgainstAnyProp);
        };
        return predicateFn;
    }
    function deepCompare(actual, expected, comparator, anyPropertyKey, matchAgainstAnyProp, dontMatchWholeObject) {
        var actualType = getTypeForFilter(actual);
        var expectedType = getTypeForFilter(expected);
        if (expectedType === "string" && expected.charAt(0) === "!") {
            return !deepCompare(actual, expected.substring(1), comparator, anyPropertyKey, matchAgainstAnyProp);
        } else if (isArray(actual)) {
            return actual.some(function(item) {
                return deepCompare(item, expected, comparator, anyPropertyKey, matchAgainstAnyProp);
            });
        }
        switch (actualType) {
          case "object":
            var key;
            if (matchAgainstAnyProp) {
                for (key in actual) {
                    if (key.charAt && key.charAt(0) !== "$" && deepCompare(actual[key], expected, comparator, anyPropertyKey, true)) {
                        return true;
                    }
                }
                return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, anyPropertyKey, false);
            } else if (expectedType === "object") {
                for (key in expected) {
                    var expectedVal = expected[key];
                    if (isFunction(expectedVal) || isUndefined(expectedVal)) {
                        continue;
                    }
                    var matchAnyProperty = key === anyPropertyKey;
                    var actualVal = matchAnyProperty ? actual : actual[key];
                    if (!deepCompare(actualVal, expectedVal, comparator, anyPropertyKey, matchAnyProperty, matchAnyProperty)) {
                        return false;
                    }
                }
                return true;
            } else {
                return comparator(actual, expected);
            }

          case "function":
            return false;

          default:
            return comparator(actual, expected);
        }
    }
    function getTypeForFilter(val) {
        return val === null ? "null" : typeof val;
    }
    var MAX_DIGITS = 22;
    var DECIMAL_SEP = ".";
    var ZERO_CHAR = "0";
    currencyFilter.$inject = [ "$locale" ];
    function currencyFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function(amount, currencySymbol, fractionSize) {
            if (isUndefined(currencySymbol)) {
                currencySymbol = formats.CURRENCY_SYM;
            }
            if (isUndefined(fractionSize)) {
                fractionSize = formats.PATTERNS[1].maxFrac;
            }
            var currencySymbolRe = !currencySymbol ? /\s*\u00A4\s*/g : /\u00A4/g;
            return amount == null ? amount : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).replace(currencySymbolRe, currencySymbol);
        };
    }
    numberFilter.$inject = [ "$locale" ];
    function numberFilter($locale) {
        var formats = $locale.NUMBER_FORMATS;
        return function(number, fractionSize) {
            return number == null ? number : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize);
        };
    }
    function parse(numStr) {
        var exponent = 0, digits, numberOfIntegerDigits;
        var i, j, zeros;
        if ((numberOfIntegerDigits = numStr.indexOf(DECIMAL_SEP)) > -1) {
            numStr = numStr.replace(DECIMAL_SEP, "");
        }
        if ((i = numStr.search(/e/i)) > 0) {
            if (numberOfIntegerDigits < 0) numberOfIntegerDigits = i;
            numberOfIntegerDigits += +numStr.slice(i + 1);
            numStr = numStr.substring(0, i);
        } else if (numberOfIntegerDigits < 0) {
            numberOfIntegerDigits = numStr.length;
        }
        for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {}
        if (i === (zeros = numStr.length)) {
            digits = [ 0 ];
            numberOfIntegerDigits = 1;
        } else {
            zeros--;
            while (numStr.charAt(zeros) === ZERO_CHAR) zeros--;
            numberOfIntegerDigits -= i;
            digits = [];
            for (j = 0; i <= zeros; i++, j++) {
                digits[j] = +numStr.charAt(i);
            }
        }
        if (numberOfIntegerDigits > MAX_DIGITS) {
            digits = digits.splice(0, MAX_DIGITS - 1);
            exponent = numberOfIntegerDigits - 1;
            numberOfIntegerDigits = 1;
        }
        return {
            d: digits,
            e: exponent,
            i: numberOfIntegerDigits
        };
    }
    function roundNumber(parsedNumber, fractionSize, minFrac, maxFrac) {
        var digits = parsedNumber.d;
        var fractionLen = digits.length - parsedNumber.i;
        fractionSize = isUndefined(fractionSize) ? Math.min(Math.max(minFrac, fractionLen), maxFrac) : +fractionSize;
        var roundAt = fractionSize + parsedNumber.i;
        var digit = digits[roundAt];
        if (roundAt > 0) {
            digits.splice(Math.max(parsedNumber.i, roundAt));
            for (var j = roundAt; j < digits.length; j++) {
                digits[j] = 0;
            }
        } else {
            fractionLen = Math.max(0, fractionLen);
            parsedNumber.i = 1;
            digits.length = Math.max(1, roundAt = fractionSize + 1);
            digits[0] = 0;
            for (var i = 1; i < roundAt; i++) digits[i] = 0;
        }
        if (digit >= 5) {
            if (roundAt - 1 < 0) {
                for (var k = 0; k > roundAt; k--) {
                    digits.unshift(0);
                    parsedNumber.i++;
                }
                digits.unshift(1);
                parsedNumber.i++;
            } else {
                digits[roundAt - 1]++;
            }
        }
        for (;fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);
        var carry = digits.reduceRight(function(carry, d, i, digits) {
            d = d + carry;
            digits[i] = d % 10;
            return Math.floor(d / 10);
        }, 0);
        if (carry) {
            digits.unshift(carry);
            parsedNumber.i++;
        }
    }
    function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
        if (!(isString(number) || isNumber(number)) || isNaN(number)) return "";
        var isInfinity = !isFinite(number);
        var isZero = false;
        var numStr = Math.abs(number) + "", formattedText = "", parsedNumber;
        if (isInfinity) {
            formattedText = "â";
        } else {
            parsedNumber = parse(numStr);
            roundNumber(parsedNumber, fractionSize, pattern.minFrac, pattern.maxFrac);
            var digits = parsedNumber.d;
            var integerLen = parsedNumber.i;
            var exponent = parsedNumber.e;
            var decimals = [];
            isZero = digits.reduce(function(isZero, d) {
                return isZero && !d;
            }, true);
            while (integerLen < 0) {
                digits.unshift(0);
                integerLen++;
            }
            if (integerLen > 0) {
                decimals = digits.splice(integerLen, digits.length);
            } else {
                decimals = digits;
                digits = [ 0 ];
            }
            var groups = [];
            if (digits.length >= pattern.lgSize) {
                groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(""));
            }
            while (digits.length > pattern.gSize) {
                groups.unshift(digits.splice(-pattern.gSize, digits.length).join(""));
            }
            if (digits.length) {
                groups.unshift(digits.join(""));
            }
            formattedText = groups.join(groupSep);
            if (decimals.length) {
                formattedText += decimalSep + decimals.join("");
            }
            if (exponent) {
                formattedText += "e+" + exponent;
            }
        }
        if (number < 0 && !isZero) {
            return pattern.negPre + formattedText + pattern.negSuf;
        } else {
            return pattern.posPre + formattedText + pattern.posSuf;
        }
    }
    function padNumber(num, digits, trim, negWrap) {
        var neg = "";
        if (num < 0 || negWrap && num <= 0) {
            if (negWrap) {
                num = -num + 1;
            } else {
                num = -num;
                neg = "-";
            }
        }
        num = "" + num;
        while (num.length < digits) num = ZERO_CHAR + num;
        if (trim) {
            num = num.substr(num.length - digits);
        }
        return neg + num;
    }
    function dateGetter(name, size, offset, trim, negWrap) {
        offset = offset || 0;
        return function(date) {
            var value = date["get" + name]();
            if (offset > 0 || value > -offset) {
                value += offset;
            }
            if (value === 0 && offset === -12) value = 12;
            return padNumber(value, size, trim, negWrap);
        };
    }
    function dateStrGetter(name, shortForm, standAlone) {
        return function(date, formats) {
            var value = date["get" + name]();
            var propPrefix = (standAlone ? "STANDALONE" : "") + (shortForm ? "SHORT" : "");
            var get = uppercase(propPrefix + name);
            return formats[get][value];
        };
    }
    function timeZoneGetter(date, formats, offset) {
        var zone = -1 * offset;
        var paddedZone = zone >= 0 ? "+" : "";
        paddedZone += padNumber(Math[zone > 0 ? "floor" : "ceil"](zone / 60), 2) + padNumber(Math.abs(zone % 60), 2);
        return paddedZone;
    }
    function getFirstThursdayOfYear(year) {
        var dayOfWeekOnFirst = new Date(year, 0, 1).getDay();
        return new Date(year, 0, (dayOfWeekOnFirst <= 4 ? 5 : 12) - dayOfWeekOnFirst);
    }
    function getThursdayThisWeek(datetime) {
        return new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (4 - datetime.getDay()));
    }
    function weekGetter(size) {
        return function(date) {
            var firstThurs = getFirstThursdayOfYear(date.getFullYear()), thisThurs = getThursdayThisWeek(date);
            var diff = +thisThurs - +firstThurs, result = 1 + Math.round(diff / 6048e5);
            return padNumber(result, size);
        };
    }
    function ampmGetter(date, formats) {
        return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
    }
    function eraGetter(date, formats) {
        return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
    }
    function longEraGetter(date, formats) {
        return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
    }
    var DATE_FORMATS = {
        yyyy: dateGetter("FullYear", 4, 0, false, true),
        yy: dateGetter("FullYear", 2, 0, true, true),
        y: dateGetter("FullYear", 1, 0, false, true),
        MMMM: dateStrGetter("Month"),
        MMM: dateStrGetter("Month", true),
        MM: dateGetter("Month", 2, 1),
        M: dateGetter("Month", 1, 1),
        LLLL: dateStrGetter("Month", false, true),
        dd: dateGetter("Date", 2),
        d: dateGetter("Date", 1),
        HH: dateGetter("Hours", 2),
        H: dateGetter("Hours", 1),
        hh: dateGetter("Hours", 2, -12),
        h: dateGetter("Hours", 1, -12),
        mm: dateGetter("Minutes", 2),
        m: dateGetter("Minutes", 1),
        ss: dateGetter("Seconds", 2),
        s: dateGetter("Seconds", 1),
        sss: dateGetter("Milliseconds", 3),
        EEEE: dateStrGetter("Day"),
        EEE: dateStrGetter("Day", true),
        a: ampmGetter,
        Z: timeZoneGetter,
        ww: weekGetter(2),
        w: weekGetter(1),
        G: eraGetter,
        GG: eraGetter,
        GGG: eraGetter,
        GGGG: longEraGetter
    };
    var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/, NUMBER_STRING = /^-?\d+$/;
    dateFilter.$inject = [ "$locale" ];
    function dateFilter($locale) {
        var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
        function jsonStringToDate(string) {
            var match;
            if (match = string.match(R_ISO8601_STR)) {
                var date = new Date(0), tzHour = 0, tzMin = 0, dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear, timeSetter = match[8] ? date.setUTCHours : date.setHours;
                if (match[9]) {
                    tzHour = toInt(match[9] + match[10]);
                    tzMin = toInt(match[9] + match[11]);
                }
                dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
                var h = toInt(match[4] || 0) - tzHour;
                var m = toInt(match[5] || 0) - tzMin;
                var s = toInt(match[6] || 0);
                var ms = Math.round(parseFloat("0." + (match[7] || 0)) * 1e3);
                timeSetter.call(date, h, m, s, ms);
                return date;
            }
            return string;
        }
        return function(date, format, timezone) {
            var text = "", parts = [], fn, match;
            format = format || "mediumDate";
            format = $locale.DATETIME_FORMATS[format] || format;
            if (isString(date)) {
                date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
            }
            if (isNumber(date)) {
                date = new Date(date);
            }
            if (!isDate(date) || !isFinite(date.getTime())) {
                return date;
            }
            while (format) {
                match = DATE_FORMATS_SPLIT.exec(format);
                if (match) {
                    parts = concat(parts, match, 1);
                    format = parts.pop();
                } else {
                    parts.push(format);
                    format = null;
                }
            }
            var dateTimezoneOffset = date.getTimezoneOffset();
            if (timezone) {
                dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
                date = convertTimezoneToLocal(date, timezone, true);
            }
            forEach(parts, function(value) {
                fn = DATE_FORMATS[value];
                text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset) : value === "''" ? "'" : value.replace(/(^'|'$)/g, "").replace(/''/g, "'");
            });
            return text;
        };
    }
    function jsonFilter() {
        return function(object, spacing) {
            if (isUndefined(spacing)) {
                spacing = 2;
            }
            return toJson(object, spacing);
        };
    }
    var lowercaseFilter = valueFn(lowercase);
    var uppercaseFilter = valueFn(uppercase);
    function limitToFilter() {
        return function(input, limit, begin) {
            if (Math.abs(Number(limit)) === Infinity) {
                limit = Number(limit);
            } else {
                limit = toInt(limit);
            }
            if (isNumberNaN(limit)) return input;
            if (isNumber(input)) input = input.toString();
            if (!isArrayLike(input)) return input;
            begin = !begin || isNaN(begin) ? 0 : toInt(begin);
            begin = begin < 0 ? Math.max(0, input.length + begin) : begin;
            if (limit >= 0) {
                return sliceFn(input, begin, begin + limit);
            } else {
                if (begin === 0) {
                    return sliceFn(input, limit, input.length);
                } else {
                    return sliceFn(input, Math.max(0, begin + limit), begin);
                }
            }
        };
    }
    function sliceFn(input, begin, end) {
        if (isString(input)) return input.slice(begin, end);
        return slice.call(input, begin, end);
    }
    orderByFilter.$inject = [ "$parse" ];
    function orderByFilter($parse) {
        return function(array, sortPredicate, reverseOrder, compareFn) {
            if (array == null) return array;
            if (!isArrayLike(array)) {
                throw minErr("orderBy")("notarray", "Expected array but received: {0}", array);
            }
            if (!isArray(sortPredicate)) {
                sortPredicate = [ sortPredicate ];
            }
            if (sortPredicate.length === 0) {
                sortPredicate = [ "+" ];
            }
            var predicates = processPredicates(sortPredicate);
            var descending = reverseOrder ? -1 : 1;
            var compare = isFunction(compareFn) ? compareFn : defaultCompare;
            var compareValues = Array.prototype.map.call(array, getComparisonObject);
            compareValues.sort(doComparison);
            array = compareValues.map(function(item) {
                return item.value;
            });
            return array;
            function getComparisonObject(value, index) {
                return {
                    value: value,
                    tieBreaker: {
                        value: index,
                        type: "number",
                        index: index
                    },
                    predicateValues: predicates.map(function(predicate) {
                        return getPredicateValue(predicate.get(value), index);
                    })
                };
            }
            function doComparison(v1, v2) {
                for (var i = 0, ii = predicates.length; i < ii; i++) {
                    var result = compare(v1.predicateValues[i], v2.predicateValues[i]);
                    if (result) {
                        return result * predicates[i].descending * descending;
                    }
                }
                return (compare(v1.tieBreaker, v2.tieBreaker) || defaultCompare(v1.tieBreaker, v2.tieBreaker)) * descending;
            }
        };
        function processPredicates(sortPredicates) {
            return sortPredicates.map(function(predicate) {
                var descending = 1, get = identity;
                if (isFunction(predicate)) {
                    get = predicate;
                } else if (isString(predicate)) {
                    if (predicate.charAt(0) === "+" || predicate.charAt(0) === "-") {
                        descending = predicate.charAt(0) === "-" ? -1 : 1;
                        predicate = predicate.substring(1);
                    }
                    if (predicate !== "") {
                        get = $parse(predicate);
                        if (get.constant) {
                            var key = get();
                            get = function(value) {
                                return value[key];
                            };
                        }
                    }
                }
                return {
                    get: get,
                    descending: descending
                };
            });
        }
        function isPrimitive(value) {
            switch (typeof value) {
              case "number":
              case "boolean":
              case "string":
                return true;

              default:
                return false;
            }
        }
        function objectValue(value) {
            if (isFunction(value.valueOf)) {
                value = value.valueOf();
                if (isPrimitive(value)) return value;
            }
            if (hasCustomToString(value)) {
                value = value.toString();
                if (isPrimitive(value)) return value;
            }
            return value;
        }
        function getPredicateValue(value, index) {
            var type = typeof value;
            if (value === null) {
                type = "null";
            } else if (type === "object") {
                value = objectValue(value);
            }
            return {
                value: value,
                type: type,
                index: index
            };
        }
        function defaultCompare(v1, v2) {
            var result = 0;
            var type1 = v1.type;
            var type2 = v2.type;
            if (type1 === type2) {
                var value1 = v1.value;
                var value2 = v2.value;
                if (type1 === "string") {
                    value1 = value1.toLowerCase();
                    value2 = value2.toLowerCase();
                } else if (type1 === "object") {
                    if (isObject(value1)) value1 = v1.index;
                    if (isObject(value2)) value2 = v2.index;
                }
                if (value1 !== value2) {
                    result = value1 < value2 ? -1 : 1;
                }
            } else {
                result = type1 === "undefined" ? 1 : type2 === "undefined" ? -1 : type1 === "null" ? 1 : type2 === "null" ? -1 : type1 < type2 ? -1 : 1;
            }
            return result;
        }
    }
    function ngDirective(directive) {
        if (isFunction(directive)) {
            directive = {
                link: directive
            };
        }
        directive.restrict = directive.restrict || "AC";
        return valueFn(directive);
    }
    var htmlAnchorDirective = valueFn({
        restrict: "E",
        compile: function(element, attr) {
            if (!attr.href && !attr.xlinkHref) {
                return function(scope, element) {
                    if (element[0].nodeName.toLowerCase() !== "a") return;
                    var href = toString.call(element.prop("href")) === "[object SVGAnimatedString]" ? "xlink:href" : "href";
                    element.on("click", function(event) {
                        if (!element.attr(href)) {
                            event.preventDefault();
                        }
                    });
                };
            }
        }
    });
    var ngAttributeAliasDirectives = {};
    forEach(BOOLEAN_ATTR, function(propName, attrName) {
        if (propName === "multiple") return;
        function defaultLinkFn(scope, element, attr) {
            scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
                attr.$set(attrName, !!value);
            });
        }
        var normalized = directiveNormalize("ng-" + attrName);
        var linkFn = defaultLinkFn;
        if (propName === "checked") {
            linkFn = function(scope, element, attr) {
                if (attr.ngModel !== attr[normalized]) {
                    defaultLinkFn(scope, element, attr);
                }
            };
        }
        ngAttributeAliasDirectives[normalized] = function() {
            return {
                restrict: "A",
                priority: 100,
                link: linkFn
            };
        };
    });
    forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
        ngAttributeAliasDirectives[ngAttr] = function() {
            return {
                priority: 100,
                link: function(scope, element, attr) {
                    if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) === "/") {
                        var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
                        if (match) {
                            attr.$set("ngPattern", new RegExp(match[1], match[2]));
                            return;
                        }
                    }
                    scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
                        attr.$set(ngAttr, value);
                    });
                }
            };
        };
    });
    forEach([ "src", "srcset", "href" ], function(attrName) {
        var normalized = directiveNormalize("ng-" + attrName);
        ngAttributeAliasDirectives[normalized] = [ "$sce", function($sce) {
            return {
                priority: 99,
                link: function(scope, element, attr) {
                    var propName = attrName, name = attrName;
                    if (attrName === "href" && toString.call(element.prop("href")) === "[object SVGAnimatedString]") {
                        name = "xlinkHref";
                        attr.$attr[name] = "xlink:href";
                        propName = null;
                    }
                    attr.$set(normalized, $sce.getTrustedMediaUrl(attr[normalized]));
                    attr.$observe(normalized, function(value) {
                        if (!value) {
                            if (attrName === "href") {
                                attr.$set(name, null);
                            }
                            return;
                        }
                        attr.$set(name, value);
                        if (msie && propName) element.prop(propName, attr[name]);
                    });
                }
            };
        } ];
    });
    var nullFormCtrl = {
        $addControl: noop,
        $getControls: valueFn([]),
        $$renameControl: nullFormRenameControl,
        $removeControl: noop,
        $setValidity: noop,
        $setDirty: noop,
        $setPristine: noop,
        $setSubmitted: noop,
        $$setSubmitted: noop
    }, PENDING_CLASS = "ng-pending", SUBMITTED_CLASS = "ng-submitted";
    function nullFormRenameControl(control, name) {
        control.$name = name;
    }
    FormController.$inject = [ "$element", "$attrs", "$scope", "$animate", "$interpolate" ];
    function FormController($element, $attrs, $scope, $animate, $interpolate) {
        this.$$controls = [];
        this.$error = {};
        this.$$success = {};
        this.$pending = undefined;
        this.$name = $interpolate($attrs.name || $attrs.ngForm || "")($scope);
        this.$dirty = false;
        this.$pristine = true;
        this.$valid = true;
        this.$invalid = false;
        this.$submitted = false;
        this.$$parentForm = nullFormCtrl;
        this.$$element = $element;
        this.$$animate = $animate;
        setupValidity(this);
    }
    FormController.prototype = {
        $rollbackViewValue: function() {
            forEach(this.$$controls, function(control) {
                control.$rollbackViewValue();
            });
        },
        $commitViewValue: function() {
            forEach(this.$$controls, function(control) {
                control.$commitViewValue();
            });
        },
        $addControl: function(control) {
            assertNotHasOwnProperty(control.$name, "input");
            this.$$controls.push(control);
            if (control.$name) {
                this[control.$name] = control;
            }
            control.$$parentForm = this;
        },
        $getControls: function() {
            return shallowCopy(this.$$controls);
        },
        $$renameControl: function(control, newName) {
            var oldName = control.$name;
            if (this[oldName] === control) {
                delete this[oldName];
            }
            this[newName] = control;
            control.$name = newName;
        },
        $removeControl: function(control) {
            if (control.$name && this[control.$name] === control) {
                delete this[control.$name];
            }
            forEach(this.$pending, function(value, name) {
                this.$setValidity(name, null, control);
            }, this);
            forEach(this.$error, function(value, name) {
                this.$setValidity(name, null, control);
            }, this);
            forEach(this.$$success, function(value, name) {
                this.$setValidity(name, null, control);
            }, this);
            arrayRemove(this.$$controls, control);
            control.$$parentForm = nullFormCtrl;
        },
        $setDirty: function() {
            this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);
            this.$$animate.addClass(this.$$element, DIRTY_CLASS);
            this.$dirty = true;
            this.$pristine = false;
            this.$$parentForm.$setDirty();
        },
        $setPristine: function() {
            this.$$animate.setClass(this.$$element, PRISTINE_CLASS, DIRTY_CLASS + " " + SUBMITTED_CLASS);
            this.$dirty = false;
            this.$pristine = true;
            this.$submitted = false;
            forEach(this.$$controls, function(control) {
                control.$setPristine();
            });
        },
        $setUntouched: function() {
            forEach(this.$$controls, function(control) {
                control.$setUntouched();
            });
        },
        $setSubmitted: function() {
            var rootForm = this;
            while (rootForm.$$parentForm && rootForm.$$parentForm !== nullFormCtrl) {
                rootForm = rootForm.$$parentForm;
            }
            rootForm.$$setSubmitted();
        },
        $$setSubmitted: function() {
            this.$$animate.addClass(this.$$element, SUBMITTED_CLASS);
            this.$submitted = true;
            forEach(this.$$controls, function(control) {
                if (control.$$setSubmitted) {
                    control.$$setSubmitted();
                }
            });
        }
    };
    addSetValidityMethod({
        clazz: FormController,
        set: function(object, property, controller) {
            var list = object[property];
            if (!list) {
                object[property] = [ controller ];
            } else {
                var index = list.indexOf(controller);
                if (index === -1) {
                    list.push(controller);
                }
            }
        },
        unset: function(object, property, controller) {
            var list = object[property];
            if (!list) {
                return;
            }
            arrayRemove(list, controller);
            if (list.length === 0) {
                delete object[property];
            }
        }
    });
    var formDirectiveFactory = function(isNgForm) {
        return [ "$timeout", "$parse", function($timeout, $parse) {
            var formDirective = {
                name: "form",
                restrict: isNgForm ? "EAC" : "E",
                require: [ "form", "^^?form" ],
                controller: FormController,
                compile: function ngFormCompile(formElement, attr) {
                    formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);
                    var nameAttr = attr.name ? "name" : isNgForm && attr.ngForm ? "ngForm" : false;
                    return {
                        pre: function ngFormPreLink(scope, formElement, attr, ctrls) {
                            var controller = ctrls[0];
                            if (!("action" in attr)) {
                                var handleFormSubmission = function(event) {
                                    scope.$apply(function() {
                                        controller.$commitViewValue();
                                        controller.$setSubmitted();
                                    });
                                    event.preventDefault();
                                };
                                formElement[0].addEventListener("submit", handleFormSubmission);
                                formElement.on("$destroy", function() {
                                    $timeout(function() {
                                        formElement[0].removeEventListener("submit", handleFormSubmission);
                                    }, 0, false);
                                });
                            }
                            var parentFormCtrl = ctrls[1] || controller.$$parentForm;
                            parentFormCtrl.$addControl(controller);
                            var setter = nameAttr ? getSetter(controller.$name) : noop;
                            if (nameAttr) {
                                setter(scope, controller);
                                attr.$observe(nameAttr, function(newValue) {
                                    if (controller.$name === newValue) return;
                                    setter(scope, undefined);
                                    controller.$$parentForm.$$renameControl(controller, newValue);
                                    setter = getSetter(controller.$name);
                                    setter(scope, controller);
                                });
                            }
                            formElement.on("$destroy", function() {
                                controller.$$parentForm.$removeControl(controller);
                                setter(scope, undefined);
                                extend(controller, nullFormCtrl);
                            });
                        }
                    };
                }
            };
            return formDirective;
            function getSetter(expression) {
                if (expression === "") {
                    return $parse('this[""]').assign;
                }
                return $parse(expression).assign || noop;
            }
        } ];
    };
    var formDirective = formDirectiveFactory();
    var ngFormDirective = formDirectiveFactory(true);
    function setupValidity(instance) {
        instance.$$classCache = {};
        instance.$$classCache[INVALID_CLASS] = !(instance.$$classCache[VALID_CLASS] = instance.$$element.hasClass(VALID_CLASS));
    }
    function addSetValidityMethod(context) {
        var clazz = context.clazz, set = context.set, unset = context.unset;
        clazz.prototype.$setValidity = function(validationErrorKey, state, controller) {
            if (isUndefined(state)) {
                createAndSet(this, "$pending", validationErrorKey, controller);
            } else {
                unsetAndCleanup(this, "$pending", validationErrorKey, controller);
            }
            if (!isBoolean(state)) {
                unset(this.$error, validationErrorKey, controller);
                unset(this.$$success, validationErrorKey, controller);
            } else {
                if (state) {
                    unset(this.$error, validationErrorKey, controller);
                    set(this.$$success, validationErrorKey, controller);
                } else {
                    set(this.$error, validationErrorKey, controller);
                    unset(this.$$success, validationErrorKey, controller);
                }
            }
            if (this.$pending) {
                cachedToggleClass(this, PENDING_CLASS, true);
                this.$valid = this.$invalid = undefined;
                toggleValidationCss(this, "", null);
            } else {
                cachedToggleClass(this, PENDING_CLASS, false);
                this.$valid = isObjectEmpty(this.$error);
                this.$invalid = !this.$valid;
                toggleValidationCss(this, "", this.$valid);
            }
            var combinedState;
            if (this.$pending && this.$pending[validationErrorKey]) {
                combinedState = undefined;
            } else if (this.$error[validationErrorKey]) {
                combinedState = false;
            } else if (this.$$success[validationErrorKey]) {
                combinedState = true;
            } else {
                combinedState = null;
            }
            toggleValidationCss(this, validationErrorKey, combinedState);
            this.$$parentForm.$setValidity(validationErrorKey, combinedState, this);
        };
        function createAndSet(ctrl, name, value, controller) {
            if (!ctrl[name]) {
                ctrl[name] = {};
            }
            set(ctrl[name], value, controller);
        }
        function unsetAndCleanup(ctrl, name, value, controller) {
            if (ctrl[name]) {
                unset(ctrl[name], value, controller);
            }
            if (isObjectEmpty(ctrl[name])) {
                ctrl[name] = undefined;
            }
        }
        function cachedToggleClass(ctrl, className, switchValue) {
            if (switchValue && !ctrl.$$classCache[className]) {
                ctrl.$$animate.addClass(ctrl.$$element, className);
                ctrl.$$classCache[className] = true;
            } else if (!switchValue && ctrl.$$classCache[className]) {
                ctrl.$$animate.removeClass(ctrl.$$element, className);
                ctrl.$$classCache[className] = false;
            }
        }
        function toggleValidationCss(ctrl, validationErrorKey, isValid) {
            validationErrorKey = validationErrorKey ? "-" + snake_case(validationErrorKey, "-") : "";
            cachedToggleClass(ctrl, VALID_CLASS + validationErrorKey, isValid === true);
            cachedToggleClass(ctrl, INVALID_CLASS + validationErrorKey, isValid === false);
        }
    }
    function isObjectEmpty(obj) {
        if (obj) {
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    return false;
                }
            }
        }
        return true;
    }
    var ISO_DATE_REGEXP = /^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/;
    var URL_REGEXP = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i;
    var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;
    var NUMBER_REGEXP = /^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
    var DATE_REGEXP = /^(\d{4,})-(\d{2})-(\d{2})$/;
    var DATETIMELOCAL_REGEXP = /^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
    var WEEK_REGEXP = /^(\d{4,})-W(\d\d)$/;
    var MONTH_REGEXP = /^(\d{4,})-(\d\d)$/;
    var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
    var PARTIAL_VALIDATION_EVENTS = "keydown wheel mousedown";
    var PARTIAL_VALIDATION_TYPES = createMap();
    forEach("date,datetime-local,month,time,week".split(","), function(type) {
        PARTIAL_VALIDATION_TYPES[type] = true;
    });
    var inputType = {
        text: textInputType,
        date: createDateInputType("date", DATE_REGEXP, createDateParser(DATE_REGEXP, [ "yyyy", "MM", "dd" ]), "yyyy-MM-dd"),
        "datetime-local": createDateInputType("datetimelocal", DATETIMELOCAL_REGEXP, createDateParser(DATETIMELOCAL_REGEXP, [ "yyyy", "MM", "dd", "HH", "mm", "ss", "sss" ]), "yyyy-MM-ddTHH:mm:ss.sss"),
        time: createDateInputType("time", TIME_REGEXP, createDateParser(TIME_REGEXP, [ "HH", "mm", "ss", "sss" ]), "HH:mm:ss.sss"),
        week: createDateInputType("week", WEEK_REGEXP, weekParser, "yyyy-Www"),
        month: createDateInputType("month", MONTH_REGEXP, createDateParser(MONTH_REGEXP, [ "yyyy", "MM" ]), "yyyy-MM"),
        number: numberInputType,
        url: urlInputType,
        email: emailInputType,
        radio: radioInputType,
        range: rangeInputType,
        checkbox: checkboxInputType,
        hidden: noop,
        button: noop,
        submit: noop,
        reset: noop,
        file: noop
    };
    function stringBasedInputType(ctrl) {
        ctrl.$formatters.push(function(value) {
            return ctrl.$isEmpty(value) ? value : value.toString();
        });
    }
    function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
    }
    function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        var type = lowercase(element[0].type);
        if (!$sniffer.android) {
            var composing = false;
            element.on("compositionstart", function() {
                composing = true;
            });
            element.on("compositionupdate", function(ev) {
                if (isUndefined(ev.data) || ev.data === "") {
                    composing = false;
                }
            });
            element.on("compositionend", function() {
                composing = false;
                listener();
            });
        }
        var timeout;
        var listener = function(ev) {
            if (timeout) {
                $browser.defer.cancel(timeout);
                timeout = null;
            }
            if (composing) return;
            var value = element.val(), event = ev && ev.type;
            if (type !== "password" && (!attr.ngTrim || attr.ngTrim !== "false")) {
                value = trim(value);
            }
            if (ctrl.$viewValue !== value || value === "" && ctrl.$$hasNativeValidators) {
                ctrl.$setViewValue(value, event);
            }
        };
        if ($sniffer.hasEvent("input")) {
            element.on("input", listener);
        } else {
            var deferListener = function(ev, input, origValue) {
                if (!timeout) {
                    timeout = $browser.defer(function() {
                        timeout = null;
                        if (!input || input.value !== origValue) {
                            listener(ev);
                        }
                    });
                }
            };
            element.on("keydown", function(event) {
                var key = event.keyCode;
                if (key === 91 || 15 < key && key < 19 || 37 <= key && key <= 40) return;
                deferListener(event, this, this.value);
            });
            if ($sniffer.hasEvent("paste")) {
                element.on("paste cut drop", deferListener);
            }
        }
        element.on("change", listener);
        if (PARTIAL_VALIDATION_TYPES[type] && ctrl.$$hasNativeValidators && type === attr.type) {
            element.on(PARTIAL_VALIDATION_EVENTS, function(ev) {
                if (!timeout) {
                    var validity = this[VALIDITY_STATE_PROPERTY];
                    var origBadInput = validity.badInput;
                    var origTypeMismatch = validity.typeMismatch;
                    timeout = $browser.defer(function() {
                        timeout = null;
                        if (validity.badInput !== origBadInput || validity.typeMismatch !== origTypeMismatch) {
                            listener(ev);
                        }
                    });
                }
            });
        }
        ctrl.$render = function() {
            var value = ctrl.$isEmpty(ctrl.$viewValue) ? "" : ctrl.$viewValue;
            if (element.val() !== value) {
                element.val(value);
            }
        };
    }
    function weekParser(isoWeek, existingDate) {
        if (isDate(isoWeek)) {
            return isoWeek;
        }
        if (isString(isoWeek)) {
            WEEK_REGEXP.lastIndex = 0;
            var parts = WEEK_REGEXP.exec(isoWeek);
            if (parts) {
                var year = +parts[1], week = +parts[2], hours = 0, minutes = 0, seconds = 0, milliseconds = 0, firstThurs = getFirstThursdayOfYear(year), addDays = (week - 1) * 7;
                if (existingDate) {
                    hours = existingDate.getHours();
                    minutes = existingDate.getMinutes();
                    seconds = existingDate.getSeconds();
                    milliseconds = existingDate.getMilliseconds();
                }
                return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
            }
        }
        return NaN;
    }
    function createDateParser(regexp, mapping) {
        return function(iso, previousDate) {
            var parts, map;
            if (isDate(iso)) {
                return iso;
            }
            if (isString(iso)) {
                if (iso.charAt(0) === '"' && iso.charAt(iso.length - 1) === '"') {
                    iso = iso.substring(1, iso.length - 1);
                }
                if (ISO_DATE_REGEXP.test(iso)) {
                    return new Date(iso);
                }
                regexp.lastIndex = 0;
                parts = regexp.exec(iso);
                if (parts) {
                    parts.shift();
                    if (previousDate) {
                        map = {
                            yyyy: previousDate.getFullYear(),
                            MM: previousDate.getMonth() + 1,
                            dd: previousDate.getDate(),
                            HH: previousDate.getHours(),
                            mm: previousDate.getMinutes(),
                            ss: previousDate.getSeconds(),
                            sss: previousDate.getMilliseconds() / 1e3
                        };
                    } else {
                        map = {
                            yyyy: 1970,
                            MM: 1,
                            dd: 1,
                            HH: 0,
                            mm: 0,
                            ss: 0,
                            sss: 0
                        };
                    }
                    forEach(parts, function(part, index) {
                        if (index < mapping.length) {
                            map[mapping[index]] = +part;
                        }
                    });
                    var date = new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1e3 || 0);
                    if (map.yyyy < 100) {
                        date.setFullYear(map.yyyy);
                    }
                    return date;
                }
            }
            return NaN;
        };
    }
    function createDateInputType(type, regexp, parseDate, format) {
        return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
            badInputChecker(scope, element, attr, ctrl, type);
            baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
            var isTimeType = type === "time" || type === "datetimelocal";
            var previousDate;
            var previousTimezone;
            ctrl.$parsers.push(function(value) {
                if (ctrl.$isEmpty(value)) return null;
                if (regexp.test(value)) {
                    return parseDateAndConvertTimeZoneToLocal(value, previousDate);
                }
                ctrl.$$parserName = type;
                return undefined;
            });
            ctrl.$formatters.push(function(value) {
                if (value && !isDate(value)) {
                    throw ngModelMinErr("datefmt", "Expected `{0}` to be a date", value);
                }
                if (isValidDate(value)) {
                    previousDate = value;
                    var timezone = ctrl.$options.getOption("timezone");
                    if (timezone) {
                        previousTimezone = timezone;
                        previousDate = convertTimezoneToLocal(previousDate, timezone, true);
                    }
                    return formatter(value, timezone);
                } else {
                    previousDate = null;
                    previousTimezone = null;
                    return "";
                }
            });
            if (isDefined(attr.min) || attr.ngMin) {
                var minVal = attr.min || $parse(attr.ngMin)(scope);
                var parsedMinVal = parseObservedDateValue(minVal);
                ctrl.$validators.min = function(value) {
                    return !isValidDate(value) || isUndefined(parsedMinVal) || parseDate(value) >= parsedMinVal;
                };
                attr.$observe("min", function(val) {
                    if (val !== minVal) {
                        parsedMinVal = parseObservedDateValue(val);
                        minVal = val;
                        ctrl.$validate();
                    }
                });
            }
            if (isDefined(attr.max) || attr.ngMax) {
                var maxVal = attr.max || $parse(attr.ngMax)(scope);
                var parsedMaxVal = parseObservedDateValue(maxVal);
                ctrl.$validators.max = function(value) {
                    return !isValidDate(value) || isUndefined(parsedMaxVal) || parseDate(value) <= parsedMaxVal;
                };
                attr.$observe("max", function(val) {
                    if (val !== maxVal) {
                        parsedMaxVal = parseObservedDateValue(val);
                        maxVal = val;
                        ctrl.$validate();
                    }
                });
            }
            function isValidDate(value) {
                return value && !(value.getTime && value.getTime() !== value.getTime());
            }
            function parseObservedDateValue(val) {
                return isDefined(val) && !isDate(val) ? parseDateAndConvertTimeZoneToLocal(val) || undefined : val;
            }
            function parseDateAndConvertTimeZoneToLocal(value, previousDate) {
                var timezone = ctrl.$options.getOption("timezone");
                if (previousTimezone && previousTimezone !== timezone) {
                    previousDate = addDateMinutes(previousDate, timezoneToOffset(previousTimezone));
                }
                var parsedDate = parseDate(value, previousDate);
                if (!isNaN(parsedDate) && timezone) {
                    parsedDate = convertTimezoneToLocal(parsedDate, timezone);
                }
                return parsedDate;
            }
            function formatter(value, timezone) {
                var targetFormat = format;
                if (isTimeType && isString(ctrl.$options.getOption("timeSecondsFormat"))) {
                    targetFormat = format.replace("ss.sss", ctrl.$options.getOption("timeSecondsFormat")).replace(/:$/, "");
                }
                var formatted = $filter("date")(value, targetFormat, timezone);
                if (isTimeType && ctrl.$options.getOption("timeStripZeroSeconds")) {
                    formatted = formatted.replace(/(?::00)?(?:\.000)?$/, "");
                }
                return formatted;
            }
        };
    }
    function badInputChecker(scope, element, attr, ctrl, parserName) {
        var node = element[0];
        var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
        if (nativeValidation) {
            ctrl.$parsers.push(function(value) {
                var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
                if (validity.badInput || validity.typeMismatch) {
                    ctrl.$$parserName = parserName;
                    return undefined;
                }
                return value;
            });
        }
    }
    function numberFormatterParser(ctrl) {
        ctrl.$parsers.push(function(value) {
            if (ctrl.$isEmpty(value)) return null;
            if (NUMBER_REGEXP.test(value)) return parseFloat(value);
            ctrl.$$parserName = "number";
            return undefined;
        });
        ctrl.$formatters.push(function(value) {
            if (!ctrl.$isEmpty(value)) {
                if (!isNumber(value)) {
                    throw ngModelMinErr("numfmt", "Expected `{0}` to be a number", value);
                }
                value = value.toString();
            }
            return value;
        });
    }
    function parseNumberAttrVal(val) {
        if (isDefined(val) && !isNumber(val)) {
            val = parseFloat(val);
        }
        return !isNumberNaN(val) ? val : undefined;
    }
    function isNumberInteger(num) {
        return (num | 0) === num;
    }
    function countDecimals(num) {
        var numString = num.toString();
        var decimalSymbolIndex = numString.indexOf(".");
        if (decimalSymbolIndex === -1) {
            if (-1 < num && num < 1) {
                var match = /e-(\d+)$/.exec(numString);
                if (match) {
                    return Number(match[1]);
                }
            }
            return 0;
        }
        return numString.length - decimalSymbolIndex - 1;
    }
    function isValidForStep(viewValue, stepBase, step) {
        var value = Number(viewValue);
        var isNonIntegerValue = !isNumberInteger(value);
        var isNonIntegerStepBase = !isNumberInteger(stepBase);
        var isNonIntegerStep = !isNumberInteger(step);
        if (isNonIntegerValue || isNonIntegerStepBase || isNonIntegerStep) {
            var valueDecimals = isNonIntegerValue ? countDecimals(value) : 0;
            var stepBaseDecimals = isNonIntegerStepBase ? countDecimals(stepBase) : 0;
            var stepDecimals = isNonIntegerStep ? countDecimals(step) : 0;
            var decimalCount = Math.max(valueDecimals, stepBaseDecimals, stepDecimals);
            var multiplier = Math.pow(10, decimalCount);
            value = value * multiplier;
            stepBase = stepBase * multiplier;
            step = step * multiplier;
            if (isNonIntegerValue) value = Math.round(value);
            if (isNonIntegerStepBase) stepBase = Math.round(stepBase);
            if (isNonIntegerStep) step = Math.round(step);
        }
        return (value - stepBase) % step === 0;
    }
    function numberInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
        badInputChecker(scope, element, attr, ctrl, "number");
        numberFormatterParser(ctrl);
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        var parsedMinVal;
        if (isDefined(attr.min) || attr.ngMin) {
            var minVal = attr.min || $parse(attr.ngMin)(scope);
            parsedMinVal = parseNumberAttrVal(minVal);
            ctrl.$validators.min = function(modelValue, viewValue) {
                return ctrl.$isEmpty(viewValue) || isUndefined(parsedMinVal) || viewValue >= parsedMinVal;
            };
            attr.$observe("min", function(val) {
                if (val !== minVal) {
                    parsedMinVal = parseNumberAttrVal(val);
                    minVal = val;
                    ctrl.$validate();
                }
            });
        }
        if (isDefined(attr.max) || attr.ngMax) {
            var maxVal = attr.max || $parse(attr.ngMax)(scope);
            var parsedMaxVal = parseNumberAttrVal(maxVal);
            ctrl.$validators.max = function(modelValue, viewValue) {
                return ctrl.$isEmpty(viewValue) || isUndefined(parsedMaxVal) || viewValue <= parsedMaxVal;
            };
            attr.$observe("max", function(val) {
                if (val !== maxVal) {
                    parsedMaxVal = parseNumberAttrVal(val);
                    maxVal = val;
                    ctrl.$validate();
                }
            });
        }
        if (isDefined(attr.step) || attr.ngStep) {
            var stepVal = attr.step || $parse(attr.ngStep)(scope);
            var parsedStepVal = parseNumberAttrVal(stepVal);
            ctrl.$validators.step = function(modelValue, viewValue) {
                return ctrl.$isEmpty(viewValue) || isUndefined(parsedStepVal) || isValidForStep(viewValue, parsedMinVal || 0, parsedStepVal);
            };
            attr.$observe("step", function(val) {
                if (val !== stepVal) {
                    parsedStepVal = parseNumberAttrVal(val);
                    stepVal = val;
                    ctrl.$validate();
                }
            });
        }
    }
    function rangeInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        badInputChecker(scope, element, attr, ctrl, "range");
        numberFormatterParser(ctrl);
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        var supportsRange = ctrl.$$hasNativeValidators && element[0].type === "range", minVal = supportsRange ? 0 : undefined, maxVal = supportsRange ? 100 : undefined, stepVal = supportsRange ? 1 : undefined, validity = element[0].validity, hasMinAttr = isDefined(attr.min), hasMaxAttr = isDefined(attr.max), hasStepAttr = isDefined(attr.step);
        var originalRender = ctrl.$render;
        ctrl.$render = supportsRange && isDefined(validity.rangeUnderflow) && isDefined(validity.rangeOverflow) ? function rangeRender() {
            originalRender();
            ctrl.$setViewValue(element.val());
        } : originalRender;
        if (hasMinAttr) {
            minVal = parseNumberAttrVal(attr.min);
            ctrl.$validators.min = supportsRange ? function noopMinValidator() {
                return true;
            } : function minValidator(modelValue, viewValue) {
                return ctrl.$isEmpty(viewValue) || isUndefined(minVal) || viewValue >= minVal;
            };
            setInitialValueAndObserver("min", minChange);
        }
        if (hasMaxAttr) {
            maxVal = parseNumberAttrVal(attr.max);
            ctrl.$validators.max = supportsRange ? function noopMaxValidator() {
                return true;
            } : function maxValidator(modelValue, viewValue) {
                return ctrl.$isEmpty(viewValue) || isUndefined(maxVal) || viewValue <= maxVal;
            };
            setInitialValueAndObserver("max", maxChange);
        }
        if (hasStepAttr) {
            stepVal = parseNumberAttrVal(attr.step);
            ctrl.$validators.step = supportsRange ? function nativeStepValidator() {
                return !validity.stepMismatch;
            } : function stepValidator(modelValue, viewValue) {
                return ctrl.$isEmpty(viewValue) || isUndefined(stepVal) || isValidForStep(viewValue, minVal || 0, stepVal);
            };
            setInitialValueAndObserver("step", stepChange);
        }
        function setInitialValueAndObserver(htmlAttrName, changeFn) {
            element.attr(htmlAttrName, attr[htmlAttrName]);
            var oldVal = attr[htmlAttrName];
            attr.$observe(htmlAttrName, function wrappedObserver(val) {
                if (val !== oldVal) {
                    oldVal = val;
                    changeFn(val);
                }
            });
        }
        function minChange(val) {
            minVal = parseNumberAttrVal(val);
            if (isNumberNaN(ctrl.$modelValue)) {
                return;
            }
            if (supportsRange) {
                var elVal = element.val();
                if (minVal > elVal) {
                    elVal = minVal;
                    element.val(elVal);
                }
                ctrl.$setViewValue(elVal);
            } else {
                ctrl.$validate();
            }
        }
        function maxChange(val) {
            maxVal = parseNumberAttrVal(val);
            if (isNumberNaN(ctrl.$modelValue)) {
                return;
            }
            if (supportsRange) {
                var elVal = element.val();
                if (maxVal < elVal) {
                    element.val(maxVal);
                    elVal = maxVal < minVal ? minVal : maxVal;
                }
                ctrl.$setViewValue(elVal);
            } else {
                ctrl.$validate();
            }
        }
        function stepChange(val) {
            stepVal = parseNumberAttrVal(val);
            if (isNumberNaN(ctrl.$modelValue)) {
                return;
            }
            if (!supportsRange) {
                ctrl.$validate();
            } else if (ctrl.$viewValue !== element.val()) {
                ctrl.$setViewValue(element.val());
            }
        }
    }
    function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
        ctrl.$validators.url = function(modelValue, viewValue) {
            var value = modelValue || viewValue;
            return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
        };
    }
    function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
        baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
        stringBasedInputType(ctrl);
        ctrl.$validators.email = function(modelValue, viewValue) {
            var value = modelValue || viewValue;
            return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
        };
    }
    function radioInputType(scope, element, attr, ctrl) {
        var doTrim = !attr.ngTrim || trim(attr.ngTrim) !== "false";
        if (isUndefined(attr.name)) {
            element.attr("name", nextUid());
        }
        var listener = function(ev) {
            var value;
            if (element[0].checked) {
                value = attr.value;
                if (doTrim) {
                    value = trim(value);
                }
                ctrl.$setViewValue(value, ev && ev.type);
            }
        };
        element.on("change", listener);
        ctrl.$render = function() {
            var value = attr.value;
            if (doTrim) {
                value = trim(value);
            }
            element[0].checked = value === ctrl.$viewValue;
        };
        attr.$observe("value", ctrl.$render);
    }
    function parseConstantExpr($parse, context, name, expression, fallback) {
        var parseFn;
        if (isDefined(expression)) {
            parseFn = $parse(expression);
            if (!parseFn.constant) {
                throw ngModelMinErr("constexpr", "Expected constant expression for `{0}`, but saw " + "`{1}`.", name, expression);
            }
            return parseFn(context);
        }
        return fallback;
    }
    function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
        var trueValue = parseConstantExpr($parse, scope, "ngTrueValue", attr.ngTrueValue, true);
        var falseValue = parseConstantExpr($parse, scope, "ngFalseValue", attr.ngFalseValue, false);
        var listener = function(ev) {
            ctrl.$setViewValue(element[0].checked, ev && ev.type);
        };
        element.on("change", listener);
        ctrl.$render = function() {
            element[0].checked = ctrl.$viewValue;
        };
        ctrl.$isEmpty = function(value) {
            return value === false;
        };
        ctrl.$formatters.push(function(value) {
            return equals(value, trueValue);
        });
        ctrl.$parsers.push(function(value) {
            return value ? trueValue : falseValue;
        });
    }
    var inputDirective = [ "$browser", "$sniffer", "$filter", "$parse", function($browser, $sniffer, $filter, $parse) {
        return {
            restrict: "E",
            require: [ "?ngModel" ],
            link: {
                pre: function(scope, element, attr, ctrls) {
                    if (ctrls[0]) {
                        (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer, $browser, $filter, $parse);
                    }
                }
            }
        };
    } ];
    var hiddenInputBrowserCacheDirective = function() {
        var valueProperty = {
            configurable: true,
            enumerable: false,
            get: function() {
                return this.getAttribute("value") || "";
            },
            set: function(val) {
                this.setAttribute("value", val);
            }
        };
        return {
            restrict: "E",
            priority: 200,
            compile: function(_, attr) {
                if (lowercase(attr.type) !== "hidden") {
                    return;
                }
                return {
                    pre: function(scope, element, attr, ctrls) {
                        var node = element[0];
                        if (node.parentNode) {
                            node.parentNode.insertBefore(node, node.nextSibling);
                        }
                        if (Object.defineProperty) {
                            Object.defineProperty(node, "value", valueProperty);
                        }
                    }
                };
            }
        };
    };
    var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
    var ngValueDirective = function() {
        function updateElementValue(element, attr, value) {
            var propValue = isDefined(value) ? value : msie === 9 ? "" : null;
            element.prop("value", propValue);
            attr.$set("value", value);
        }
        return {
            restrict: "A",
            priority: 100,
            compile: function(tpl, tplAttr) {
                if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
                    return function ngValueConstantLink(scope, elm, attr) {
                        var value = scope.$eval(attr.ngValue);
                        updateElementValue(elm, attr, value);
                    };
                } else {
                    return function ngValueLink(scope, elm, attr) {
                        scope.$watch(attr.ngValue, function valueWatchAction(value) {
                            updateElementValue(elm, attr, value);
                        });
                    };
                }
            }
        };
    };
    var ngBindDirective = [ "$compile", function($compile) {
        return {
            restrict: "AC",
            compile: function ngBindCompile(templateElement) {
                $compile.$$addBindingClass(templateElement);
                return function ngBindLink(scope, element, attr) {
                    $compile.$$addBindingInfo(element, attr.ngBind);
                    element = element[0];
                    scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
                        element.textContent = stringify(value);
                    });
                };
            }
        };
    } ];
    var ngBindTemplateDirective = [ "$interpolate", "$compile", function($interpolate, $compile) {
        return {
            compile: function ngBindTemplateCompile(templateElement) {
                $compile.$$addBindingClass(templateElement);
                return function ngBindTemplateLink(scope, element, attr) {
                    var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
                    $compile.$$addBindingInfo(element, interpolateFn.expressions);
                    element = element[0];
                    attr.$observe("ngBindTemplate", function(value) {
                        element.textContent = isUndefined(value) ? "" : value;
                    });
                };
            }
        };
    } ];
    var ngBindHtmlDirective = [ "$sce", "$parse", "$compile", function($sce, $parse, $compile) {
        return {
            restrict: "A",
            compile: function ngBindHtmlCompile(tElement, tAttrs) {
                var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
                var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function sceValueOf(val) {
                    return $sce.valueOf(val);
                });
                $compile.$$addBindingClass(tElement);
                return function ngBindHtmlLink(scope, element, attr) {
                    $compile.$$addBindingInfo(element, attr.ngBindHtml);
                    scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
                        var value = ngBindHtmlGetter(scope);
                        element.html($sce.getTrustedHtml(value) || "");
                    });
                };
            }
        };
    } ];
    var ngChangeDirective = valueFn({
        restrict: "A",
        require: "ngModel",
        link: function(scope, element, attr, ctrl) {
            ctrl.$viewChangeListeners.push(function() {
                scope.$eval(attr.ngChange);
            });
        }
    });
    function classDirective(name, selector) {
        name = "ngClass" + name;
        var indexWatchExpression;
        return [ "$parse", function($parse) {
            return {
                restrict: "AC",
                link: function(scope, element, attr) {
                    var classCounts = element.data("$classCounts");
                    var oldModulo = true;
                    var oldClassString;
                    if (!classCounts) {
                        classCounts = createMap();
                        element.data("$classCounts", classCounts);
                    }
                    if (name !== "ngClass") {
                        if (!indexWatchExpression) {
                            indexWatchExpression = $parse("$index", function moduloTwo($index) {
                                return $index & 1;
                            });
                        }
                        scope.$watch(indexWatchExpression, ngClassIndexWatchAction);
                    }
                    scope.$watch($parse(attr[name], toClassString), ngClassWatchAction);
                    function addClasses(classString) {
                        classString = digestClassCounts(split(classString), 1);
                        attr.$addClass(classString);
                    }
                    function removeClasses(classString) {
                        classString = digestClassCounts(split(classString), -1);
                        attr.$removeClass(classString);
                    }
                    function updateClasses(oldClassString, newClassString) {
                        var oldClassArray = split(oldClassString);
                        var newClassArray = split(newClassString);
                        var toRemoveArray = arrayDifference(oldClassArray, newClassArray);
                        var toAddArray = arrayDifference(newClassArray, oldClassArray);
                        var toRemoveString = digestClassCounts(toRemoveArray, -1);
                        var toAddString = digestClassCounts(toAddArray, 1);
                        attr.$addClass(toAddString);
                        attr.$removeClass(toRemoveString);
                    }
                    function digestClassCounts(classArray, count) {
                        var classesToUpdate = [];
                        forEach(classArray, function(className) {
                            if (count > 0 || classCounts[className]) {
                                classCounts[className] = (classCounts[className] || 0) + count;
                                if (classCounts[className] === +(count > 0)) {
                                    classesToUpdate.push(className);
                                }
                            }
                        });
                        return classesToUpdate.join(" ");
                    }
                    function ngClassIndexWatchAction(newModulo) {
                        if (newModulo === selector) {
                            addClasses(oldClassString);
                        } else {
                            removeClasses(oldClassString);
                        }
                        oldModulo = newModulo;
                    }
                    function ngClassWatchAction(newClassString) {
                        if (oldModulo === selector) {
                            updateClasses(oldClassString, newClassString);
                        }
                        oldClassString = newClassString;
                    }
                }
            };
        } ];
        function arrayDifference(tokens1, tokens2) {
            if (!tokens1 || !tokens1.length) return [];
            if (!tokens2 || !tokens2.length) return tokens1;
            var values = [];
            outer: for (var i = 0; i < tokens1.length; i++) {
                var token = tokens1[i];
                for (var j = 0; j < tokens2.length; j++) {
                    if (token === tokens2[j]) continue outer;
                }
                values.push(token);
            }
            return values;
        }
        function split(classString) {
            return classString && classString.split(" ");
        }
        function toClassString(classValue) {
            if (!classValue) return classValue;
            var classString = classValue;
            if (isArray(classValue)) {
                classString = classValue.map(toClassString).join(" ");
            } else if (isObject(classValue)) {
                classString = Object.keys(classValue).filter(function(key) {
                    return classValue[key];
                }).join(" ");
            } else if (!isString(classValue)) {
                classString = classValue + "";
            }
            return classString;
        }
    }
    var ngClassDirective = classDirective("", true);
    var ngClassOddDirective = classDirective("Odd", 0);
    var ngClassEvenDirective = classDirective("Even", 1);
    var ngCloakDirective = ngDirective({
        compile: function(element, attr) {
            attr.$set("ngCloak", undefined);
            element.removeClass("ng-cloak");
        }
    });
    var ngControllerDirective = [ function() {
        return {
            restrict: "A",
            scope: true,
            controller: "@",
            priority: 500
        };
    } ];
    var ngEventDirectives = {};
    var forceAsyncEvents = {
        blur: true,
        focus: true
    };
    forEach("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "), function(eventName) {
        var directiveName = directiveNormalize("ng-" + eventName);
        ngEventDirectives[directiveName] = [ "$parse", "$rootScope", "$exceptionHandler", function($parse, $rootScope, $exceptionHandler) {
            return createEventDirective($parse, $rootScope, $exceptionHandler, directiveName, eventName, forceAsyncEvents[eventName]);
        } ];
    });
    function createEventDirective($parse, $rootScope, $exceptionHandler, directiveName, eventName, forceAsync) {
        return {
            restrict: "A",
            compile: function($element, attr) {
                var fn = $parse(attr[directiveName]);
                return function ngEventHandler(scope, element) {
                    element.on(eventName, function(event) {
                        var callback = function() {
                            fn(scope, {
                                $event: event
                            });
                        };
                        if (!$rootScope.$$phase) {
                            scope.$apply(callback);
                        } else if (forceAsync) {
                            scope.$evalAsync(callback);
                        } else {
                            try {
                                callback();
                            } catch (error) {
                                $exceptionHandler(error);
                            }
                        }
                    });
                };
            }
        };
    }
    var ngIfDirective = [ "$animate", "$compile", function($animate, $compile) {
        return {
            multiElement: true,
            transclude: "element",
            priority: 600,
            terminal: true,
            restrict: "A",
            $$tlb: true,
            link: function($scope, $element, $attr, ctrl, $transclude) {
                var block, childScope, previousElements;
                $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {
                    if (value) {
                        if (!childScope) {
                            $transclude(function(clone, newScope) {
                                childScope = newScope;
                                clone[clone.length++] = $compile.$$createComment("end ngIf", $attr.ngIf);
                                block = {
                                    clone: clone
                                };
                                $animate.enter(clone, $element.parent(), $element);
                            });
                        }
                    } else {
                        if (previousElements) {
                            previousElements.remove();
                            previousElements = null;
                        }
                        if (childScope) {
                            childScope.$destroy();
                            childScope = null;
                        }
                        if (block) {
                            previousElements = getBlockNodes(block.clone);
                            $animate.leave(previousElements).done(function(response) {
                                if (response !== false) previousElements = null;
                            });
                            block = null;
                        }
                    }
                });
            }
        };
    } ];
    var ngIncludeDirective = [ "$templateRequest", "$anchorScroll", "$animate", function($templateRequest, $anchorScroll, $animate) {
        return {
            restrict: "ECA",
            priority: 400,
            terminal: true,
            transclude: "element",
            controller: angular.noop,
            compile: function(element, attr) {
                var srcExp = attr.ngInclude || attr.src, onloadExp = attr.onload || "", autoScrollExp = attr.autoscroll;
                return function(scope, $element, $attr, ctrl, $transclude) {
                    var changeCounter = 0, currentScope, previousElement, currentElement;
                    var cleanupLastIncludeContent = function() {
                        if (previousElement) {
                            previousElement.remove();
                            previousElement = null;
                        }
                        if (currentScope) {
                            currentScope.$destroy();
                            currentScope = null;
                        }
                        if (currentElement) {
                            $animate.leave(currentElement).done(function(response) {
                                if (response !== false) previousElement = null;
                            });
                            previousElement = currentElement;
                            currentElement = null;
                        }
                    };
                    scope.$watch(srcExp, function ngIncludeWatchAction(src) {
                        var afterAnimation = function(response) {
                            if (response !== false && isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                                $anchorScroll();
                            }
                        };
                        var thisChangeId = ++changeCounter;
                        if (src) {
                            $templateRequest(src, true).then(function(response) {
                                if (scope.$$destroyed) return;
                                if (thisChangeId !== changeCounter) return;
                                var newScope = scope.$new();
                                ctrl.template = response;
                                var clone = $transclude(newScope, function(clone) {
                                    cleanupLastIncludeContent();
                                    $animate.enter(clone, null, $element).done(afterAnimation);
                                });
                                currentScope = newScope;
                                currentElement = clone;
                                currentScope.$emit("$includeContentLoaded", src);
                                scope.$eval(onloadExp);
                            }, function() {
                                if (scope.$$destroyed) return;
                                if (thisChangeId === changeCounter) {
                                    cleanupLastIncludeContent();
                                    scope.$emit("$includeContentError", src);
                                }
                            });
                            scope.$emit("$includeContentRequested", src);
                        } else {
                            cleanupLastIncludeContent();
                            ctrl.template = null;
                        }
                    });
                };
            }
        };
    } ];
    var ngIncludeFillContentDirective = [ "$compile", function($compile) {
        return {
            restrict: "ECA",
            priority: -400,
            require: "ngInclude",
            link: function(scope, $element, $attr, ctrl) {
                if (toString.call($element[0]).match(/SVG/)) {
                    $element.empty();
                    $compile(jqLiteBuildFragment(ctrl.template, window.document).childNodes)(scope, function namespaceAdaptedClone(clone) {
                        $element.append(clone);
                    }, {
                        futureParentElement: $element
                    });
                    return;
                }
                $element.html(ctrl.template);
                $compile($element.contents())(scope);
            }
        };
    } ];
    var ngInitDirective = ngDirective({
        priority: 450,
        compile: function() {
            return {
                pre: function(scope, element, attrs) {
                    scope.$eval(attrs.ngInit);
                }
            };
        }
    });
    var ngListDirective = function() {
        return {
            restrict: "A",
            priority: 100,
            require: "ngModel",
            link: function(scope, element, attr, ctrl) {
                var ngList = attr.ngList || ", ";
                var trimValues = attr.ngTrim !== "false";
                var separator = trimValues ? trim(ngList) : ngList;
                var parse = function(viewValue) {
                    if (isUndefined(viewValue)) return;
                    var list = [];
                    if (viewValue) {
                        forEach(viewValue.split(separator), function(value) {
                            if (value) list.push(trimValues ? trim(value) : value);
                        });
                    }
                    return list;
                };
                ctrl.$parsers.push(parse);
                ctrl.$formatters.push(function(value) {
                    if (isArray(value)) {
                        return value.join(ngList);
                    }
                    return undefined;
                });
                ctrl.$isEmpty = function(value) {
                    return !value || !value.length;
                };
            }
        };
    };
    var VALID_CLASS = "ng-valid", INVALID_CLASS = "ng-invalid", PRISTINE_CLASS = "ng-pristine", DIRTY_CLASS = "ng-dirty", UNTOUCHED_CLASS = "ng-untouched", TOUCHED_CLASS = "ng-touched", EMPTY_CLASS = "ng-empty", NOT_EMPTY_CLASS = "ng-not-empty";
    var ngModelMinErr = minErr("ngModel");
    NgModelController.$inject = [ "$scope", "$exceptionHandler", "$attrs", "$element", "$parse", "$animate", "$timeout", "$q", "$interpolate" ];
    function NgModelController($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $q, $interpolate) {
        this.$viewValue = Number.NaN;
        this.$modelValue = Number.NaN;
        this.$$rawModelValue = undefined;
        this.$validators = {};
        this.$asyncValidators = {};
        this.$parsers = [];
        this.$formatters = [];
        this.$viewChangeListeners = [];
        this.$untouched = true;
        this.$touched = false;
        this.$pristine = true;
        this.$dirty = false;
        this.$valid = true;
        this.$invalid = false;
        this.$error = {};
        this.$$success = {};
        this.$pending = undefined;
        this.$name = $interpolate($attr.name || "", false)($scope);
        this.$$parentForm = nullFormCtrl;
        this.$options = defaultModelOptions;
        this.$$updateEvents = "";
        this.$$updateEventHandler = this.$$updateEventHandler.bind(this);
        this.$$parsedNgModel = $parse($attr.ngModel);
        this.$$parsedNgModelAssign = this.$$parsedNgModel.assign;
        this.$$ngModelGet = this.$$parsedNgModel;
        this.$$ngModelSet = this.$$parsedNgModelAssign;
        this.$$pendingDebounce = null;
        this.$$parserValid = undefined;
        this.$$parserName = "parse";
        this.$$currentValidationRunId = 0;
        this.$$scope = $scope;
        this.$$rootScope = $scope.$root;
        this.$$attr = $attr;
        this.$$element = $element;
        this.$$animate = $animate;
        this.$$timeout = $timeout;
        this.$$parse = $parse;
        this.$$q = $q;
        this.$$exceptionHandler = $exceptionHandler;
        setupValidity(this);
        setupModelWatcher(this);
    }
    NgModelController.prototype = {
        $$initGetterSetters: function() {
            if (this.$options.getOption("getterSetter")) {
                var invokeModelGetter = this.$$parse(this.$$attr.ngModel + "()"), invokeModelSetter = this.$$parse(this.$$attr.ngModel + "($$$p)");
                this.$$ngModelGet = function($scope) {
                    var modelValue = this.$$parsedNgModel($scope);
                    if (isFunction(modelValue)) {
                        modelValue = invokeModelGetter($scope);
                    }
                    return modelValue;
                };
                this.$$ngModelSet = function($scope, newValue) {
                    if (isFunction(this.$$parsedNgModel($scope))) {
                        invokeModelSetter($scope, {
                            $$$p: newValue
                        });
                    } else {
                        this.$$parsedNgModelAssign($scope, newValue);
                    }
                };
            } else if (!this.$$parsedNgModel.assign) {
                throw ngModelMinErr("nonassign", "Expression '{0}' is non-assignable. Element: {1}", this.$$attr.ngModel, startingTag(this.$$element));
            }
        },
        $render: noop,
        $isEmpty: function(value) {
            return isUndefined(value) || value === "" || value === null || value !== value;
        },
        $$updateEmptyClasses: function(value) {
            if (this.$isEmpty(value)) {
                this.$$animate.removeClass(this.$$element, NOT_EMPTY_CLASS);
                this.$$animate.addClass(this.$$element, EMPTY_CLASS);
            } else {
                this.$$animate.removeClass(this.$$element, EMPTY_CLASS);
                this.$$animate.addClass(this.$$element, NOT_EMPTY_CLASS);
            }
        },
        $setPristine: function() {
            this.$dirty = false;
            this.$pristine = true;
            this.$$animate.removeClass(this.$$element, DIRTY_CLASS);
            this.$$animate.addClass(this.$$element, PRISTINE_CLASS);
        },
        $setDirty: function() {
            this.$dirty = true;
            this.$pristine = false;
            this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);
            this.$$animate.addClass(this.$$element, DIRTY_CLASS);
            this.$$parentForm.$setDirty();
        },
        $setUntouched: function() {
            this.$touched = false;
            this.$untouched = true;
            this.$$animate.setClass(this.$$element, UNTOUCHED_CLASS, TOUCHED_CLASS);
        },
        $setTouched: function() {
            this.$touched = true;
            this.$untouched = false;
            this.$$animate.setClass(this.$$element, TOUCHED_CLASS, UNTOUCHED_CLASS);
        },
        $rollbackViewValue: function() {
            this.$$timeout.cancel(this.$$pendingDebounce);
            this.$viewValue = this.$$lastCommittedViewValue;
            this.$render();
        },
        $validate: function() {
            if (isNumberNaN(this.$modelValue)) {
                return;
            }
            var viewValue = this.$$lastCommittedViewValue;
            var modelValue = this.$$rawModelValue;
            var prevValid = this.$valid;
            var prevModelValue = this.$modelValue;
            var allowInvalid = this.$options.getOption("allowInvalid");
            var that = this;
            this.$$runValidators(modelValue, viewValue, function(allValid) {
                if (!allowInvalid && prevValid !== allValid) {
                    that.$modelValue = allValid ? modelValue : undefined;
                    if (that.$modelValue !== prevModelValue) {
                        that.$$writeModelToScope();
                    }
                }
            });
        },
        $$runValidators: function(modelValue, viewValue, doneCallback) {
            this.$$currentValidationRunId++;
            var localValidationRunId = this.$$currentValidationRunId;
            var that = this;
            if (!processParseErrors()) {
                validationDone(false);
                return;
            }
            if (!processSyncValidators()) {
                validationDone(false);
                return;
            }
            processAsyncValidators();
            function processParseErrors() {
                var errorKey = that.$$parserName;
                if (isUndefined(that.$$parserValid)) {
                    setValidity(errorKey, null);
                } else {
                    if (!that.$$parserValid) {
                        forEach(that.$validators, function(v, name) {
                            setValidity(name, null);
                        });
                        forEach(that.$asyncValidators, function(v, name) {
                            setValidity(name, null);
                        });
                    }
                    setValidity(errorKey, that.$$parserValid);
                    return that.$$parserValid;
                }
                return true;
            }
            function processSyncValidators() {
                var syncValidatorsValid = true;
                forEach(that.$validators, function(validator, name) {
                    var result = Boolean(validator(modelValue, viewValue));
                    syncValidatorsValid = syncValidatorsValid && result;
                    setValidity(name, result);
                });
                if (!syncValidatorsValid) {
                    forEach(that.$asyncValidators, function(v, name) {
                        setValidity(name, null);
                    });
                    return false;
                }
                return true;
            }
            function processAsyncValidators() {
                var validatorPromises = [];
                var allValid = true;
                forEach(that.$asyncValidators, function(validator, name) {
                    var promise = validator(modelValue, viewValue);
                    if (!isPromiseLike(promise)) {
                        throw ngModelMinErr("nopromise", "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
                    }
                    setValidity(name, undefined);
                    validatorPromises.push(promise.then(function() {
                        setValidity(name, true);
                    }, function() {
                        allValid = false;
                        setValidity(name, false);
                    }));
                });
                if (!validatorPromises.length) {
                    validationDone(true);
                } else {
                    that.$$q.all(validatorPromises).then(function() {
                        validationDone(allValid);
                    }, noop);
                }
            }
            function setValidity(name, isValid) {
                if (localValidationRunId === that.$$currentValidationRunId) {
                    that.$setValidity(name, isValid);
                }
            }
            function validationDone(allValid) {
                if (localValidationRunId === that.$$currentValidationRunId) {
                    doneCallback(allValid);
                }
            }
        },
        $commitViewValue: function() {
            var viewValue = this.$viewValue;
            this.$$timeout.cancel(this.$$pendingDebounce);
            if (this.$$lastCommittedViewValue === viewValue && (viewValue !== "" || !this.$$hasNativeValidators)) {
                return;
            }
            this.$$updateEmptyClasses(viewValue);
            this.$$lastCommittedViewValue = viewValue;
            if (this.$pristine) {
                this.$setDirty();
            }
            this.$$parseAndValidate();
        },
        $$parseAndValidate: function() {
            var viewValue = this.$$lastCommittedViewValue;
            var modelValue = viewValue;
            var that = this;
            this.$$parserValid = isUndefined(modelValue) ? undefined : true;
            this.$setValidity(this.$$parserName, null);
            this.$$parserName = "parse";
            if (this.$$parserValid) {
                for (var i = 0; i < this.$parsers.length; i++) {
                    modelValue = this.$parsers[i](modelValue);
                    if (isUndefined(modelValue)) {
                        this.$$parserValid = false;
                        break;
                    }
                }
            }
            if (isNumberNaN(this.$modelValue)) {
                this.$modelValue = this.$$ngModelGet(this.$$scope);
            }
            var prevModelValue = this.$modelValue;
            var allowInvalid = this.$options.getOption("allowInvalid");
            this.$$rawModelValue = modelValue;
            if (allowInvalid) {
                this.$modelValue = modelValue;
                writeToModelIfNeeded();
            }
            this.$$runValidators(modelValue, this.$$lastCommittedViewValue, function(allValid) {
                if (!allowInvalid) {
                    that.$modelValue = allValid ? modelValue : undefined;
                    writeToModelIfNeeded();
                }
            });
            function writeToModelIfNeeded() {
                if (that.$modelValue !== prevModelValue) {
                    that.$$writeModelToScope();
                }
            }
        },
        $$writeModelToScope: function() {
            this.$$ngModelSet(this.$$scope, this.$modelValue);
            forEach(this.$viewChangeListeners, function(listener) {
                try {
                    listener();
                } catch (e) {
                    this.$$exceptionHandler(e);
                }
            }, this);
        },
        $setViewValue: function(value, trigger) {
            this.$viewValue = value;
            if (this.$options.getOption("updateOnDefault")) {
                this.$$debounceViewValueCommit(trigger);
            }
        },
        $$debounceViewValueCommit: function(trigger) {
            var debounceDelay = this.$options.getOption("debounce");
            if (isNumber(debounceDelay[trigger])) {
                debounceDelay = debounceDelay[trigger];
            } else if (isNumber(debounceDelay["default"]) && this.$options.getOption("updateOn").indexOf(trigger) === -1) {
                debounceDelay = debounceDelay["default"];
            } else if (isNumber(debounceDelay["*"])) {
                debounceDelay = debounceDelay["*"];
            }
            this.$$timeout.cancel(this.$$pendingDebounce);
            var that = this;
            if (debounceDelay > 0) {
                this.$$pendingDebounce = this.$$timeout(function() {
                    that.$commitViewValue();
                }, debounceDelay);
            } else if (this.$$rootScope.$$phase) {
                this.$commitViewValue();
            } else {
                this.$$scope.$apply(function() {
                    that.$commitViewValue();
                });
            }
        },
        $overrideModelOptions: function(options) {
            this.$options = this.$options.createChild(options);
            this.$$setUpdateOnEvents();
        },
        $processModelValue: function() {
            var viewValue = this.$$format();
            if (this.$viewValue !== viewValue) {
                this.$$updateEmptyClasses(viewValue);
                this.$viewValue = this.$$lastCommittedViewValue = viewValue;
                this.$render();
                this.$$runValidators(this.$modelValue, this.$viewValue, noop);
            }
        },
        $$format: function() {
            var formatters = this.$formatters, idx = formatters.length;
            var viewValue = this.$modelValue;
            while (idx--) {
                viewValue = formatters[idx](viewValue);
            }
            return viewValue;
        },
        $$setModelValue: function(modelValue) {
            this.$modelValue = this.$$rawModelValue = modelValue;
            this.$$parserValid = undefined;
            this.$processModelValue();
        },
        $$setUpdateOnEvents: function() {
            if (this.$$updateEvents) {
                this.$$element.off(this.$$updateEvents, this.$$updateEventHandler);
            }
            this.$$updateEvents = this.$options.getOption("updateOn");
            if (this.$$updateEvents) {
                this.$$element.on(this.$$updateEvents, this.$$updateEventHandler);
            }
        },
        $$updateEventHandler: function(ev) {
            this.$$debounceViewValueCommit(ev && ev.type);
        }
    };
    function setupModelWatcher(ctrl) {
        ctrl.$$scope.$watch(function ngModelWatch(scope) {
            var modelValue = ctrl.$$ngModelGet(scope);
            if (modelValue !== ctrl.$modelValue && (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)) {
                ctrl.$$setModelValue(modelValue);
            }
            return modelValue;
        });
    }
    addSetValidityMethod({
        clazz: NgModelController,
        set: function(object, property) {
            object[property] = true;
        },
        unset: function(object, property) {
            delete object[property];
        }
    });
    var ngModelDirective = [ "$rootScope", function($rootScope) {
        return {
            restrict: "A",
            require: [ "ngModel", "^?form", "^?ngModelOptions" ],
            controller: NgModelController,
            priority: 1,
            compile: function ngModelCompile(element) {
                element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);
                return {
                    pre: function ngModelPreLink(scope, element, attr, ctrls) {
                        var modelCtrl = ctrls[0], formCtrl = ctrls[1] || modelCtrl.$$parentForm, optionsCtrl = ctrls[2];
                        if (optionsCtrl) {
                            modelCtrl.$options = optionsCtrl.$options;
                        }
                        modelCtrl.$$initGetterSetters();
                        formCtrl.$addControl(modelCtrl);
                        attr.$observe("name", function(newValue) {
                            if (modelCtrl.$name !== newValue) {
                                modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
                            }
                        });
                        scope.$on("$destroy", function() {
                            modelCtrl.$$parentForm.$removeControl(modelCtrl);
                        });
                    },
                    post: function ngModelPostLink(scope, element, attr, ctrls) {
                        var modelCtrl = ctrls[0];
                        modelCtrl.$$setUpdateOnEvents();
                        function setTouched() {
                            modelCtrl.$setTouched();
                        }
                        element.on("blur", function() {
                            if (modelCtrl.$touched) return;
                            if ($rootScope.$$phase) {
                                scope.$evalAsync(setTouched);
                            } else {
                                scope.$apply(setTouched);
                            }
                        });
                    }
                };
            }
        };
    } ];
    var defaultModelOptions;
    var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;
    function ModelOptions(options) {
        this.$$options = options;
    }
    ModelOptions.prototype = {
        getOption: function(name) {
            return this.$$options[name];
        },
        createChild: function(options) {
            var inheritAll = false;
            options = extend({}, options);
            forEach(options, function(option, key) {
                if (option === "$inherit") {
                    if (key === "*") {
                        inheritAll = true;
                    } else {
                        options[key] = this.$$options[key];
                        if (key === "updateOn") {
                            options.updateOnDefault = this.$$options.updateOnDefault;
                        }
                    }
                } else {
                    if (key === "updateOn") {
                        options.updateOnDefault = false;
                        options[key] = trim(option.replace(DEFAULT_REGEXP, function() {
                            options.updateOnDefault = true;
                            return " ";
                        }));
                    }
                }
            }, this);
            if (inheritAll) {
                delete options["*"];
                defaults(options, this.$$options);
            }
            defaults(options, defaultModelOptions.$$options);
            return new ModelOptions(options);
        }
    };
    defaultModelOptions = new ModelOptions({
        updateOn: "",
        updateOnDefault: true,
        debounce: 0,
        getterSetter: false,
        allowInvalid: false,
        timezone: null
    });
    var ngModelOptionsDirective = function() {
        NgModelOptionsController.$inject = [ "$attrs", "$scope" ];
        function NgModelOptionsController($attrs, $scope) {
            this.$$attrs = $attrs;
            this.$$scope = $scope;
        }
        NgModelOptionsController.prototype = {
            $onInit: function() {
                var parentOptions = this.parentCtrl ? this.parentCtrl.$options : defaultModelOptions;
                var modelOptionsDefinition = this.$$scope.$eval(this.$$attrs.ngModelOptions);
                this.$options = parentOptions.createChild(modelOptionsDefinition);
            }
        };
        return {
            restrict: "A",
            priority: 10,
            require: {
                parentCtrl: "?^^ngModelOptions"
            },
            bindToController: true,
            controller: NgModelOptionsController
        };
    };
    function defaults(dst, src) {
        forEach(src, function(value, key) {
            if (!isDefined(dst[key])) {
                dst[key] = value;
            }
        });
    }
    var ngNonBindableDirective = ngDirective({
        terminal: true,
        priority: 1e3
    });
    var ngOptionsMinErr = minErr("ngOptions");
    var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
    var ngOptionsDirective = [ "$compile", "$document", "$parse", function($compile, $document, $parse) {
        function parseOptionsExpression(optionsExp, selectElement, scope) {
            var match = optionsExp.match(NG_OPTIONS_REGEXP);
            if (!match) {
                throw ngOptionsMinErr("iexp", "Expected expression in form of " + "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" + " but got '{0}'. Element: {1}", optionsExp, startingTag(selectElement));
            }
            var valueName = match[5] || match[7];
            var keyName = match[6];
            var selectAs = / as /.test(match[0]) && match[1];
            var trackBy = match[9];
            var valueFn = $parse(match[2] ? match[1] : valueName);
            var selectAsFn = selectAs && $parse(selectAs);
            var viewValueFn = selectAsFn || valueFn;
            var trackByFn = trackBy && $parse(trackBy);
            var getTrackByValueFn = trackBy ? function(value, locals) {
                return trackByFn(scope, locals);
            } : function getHashOfValue(value) {
                return hashKey(value);
            };
            var getTrackByValue = function(value, key) {
                return getTrackByValueFn(value, getLocals(value, key));
            };
            var displayFn = $parse(match[2] || match[1]);
            var groupByFn = $parse(match[3] || "");
            var disableWhenFn = $parse(match[4] || "");
            var valuesFn = $parse(match[8]);
            var locals = {};
            var getLocals = keyName ? function(value, key) {
                locals[keyName] = key;
                locals[valueName] = value;
                return locals;
            } : function(value) {
                locals[valueName] = value;
                return locals;
            };
            function Option(selectValue, viewValue, label, group, disabled) {
                this.selectValue = selectValue;
                this.viewValue = viewValue;
                this.label = label;
                this.group = group;
                this.disabled = disabled;
            }
            function getOptionValuesKeys(optionValues) {
                var optionValuesKeys;
                if (!keyName && isArrayLike(optionValues)) {
                    optionValuesKeys = optionValues;
                } else {
                    optionValuesKeys = [];
                    for (var itemKey in optionValues) {
                        if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== "$") {
                            optionValuesKeys.push(itemKey);
                        }
                    }
                }
                return optionValuesKeys;
            }
            return {
                trackBy: trackBy,
                getTrackByValue: getTrackByValue,
                getWatchables: $parse(valuesFn, function(optionValues) {
                    var watchedArray = [];
                    optionValues = optionValues || [];
                    var optionValuesKeys = getOptionValuesKeys(optionValues);
                    var optionValuesLength = optionValuesKeys.length;
                    for (var index = 0; index < optionValuesLength; index++) {
                        var key = optionValues === optionValuesKeys ? index : optionValuesKeys[index];
                        var value = optionValues[key];
                        var locals = getLocals(value, key);
                        var selectValue = getTrackByValueFn(value, locals);
                        watchedArray.push(selectValue);
                        if (match[2] || match[1]) {
                            var label = displayFn(scope, locals);
                            watchedArray.push(label);
                        }
                        if (match[4]) {
                            var disableWhen = disableWhenFn(scope, locals);
                            watchedArray.push(disableWhen);
                        }
                    }
                    return watchedArray;
                }),
                getOptions: function() {
                    var optionItems = [];
                    var selectValueMap = {};
                    var optionValues = valuesFn(scope) || [];
                    var optionValuesKeys = getOptionValuesKeys(optionValues);
                    var optionValuesLength = optionValuesKeys.length;
                    for (var index = 0; index < optionValuesLength; index++) {
                        var key = optionValues === optionValuesKeys ? index : optionValuesKeys[index];
                        var value = optionValues[key];
                        var locals = getLocals(value, key);
                        var viewValue = viewValueFn(scope, locals);
                        var selectValue = getTrackByValueFn(viewValue, locals);
                        var label = displayFn(scope, locals);
                        var group = groupByFn(scope, locals);
                        var disabled = disableWhenFn(scope, locals);
                        var optionItem = new Option(selectValue, viewValue, label, group, disabled);
                        optionItems.push(optionItem);
                        selectValueMap[selectValue] = optionItem;
                    }
                    return {
                        items: optionItems,
                        selectValueMap: selectValueMap,
                        getOptionFromViewValue: function(value) {
                            return selectValueMap[getTrackByValue(value)];
                        },
                        getViewValueFromOption: function(option) {
                            return trackBy ? copy(option.viewValue) : option.viewValue;
                        }
                    };
                }
            };
        }
        var optionTemplate = window.document.createElement("option"), optGroupTemplate = window.document.createElement("optgroup");
        function ngOptionsPostLink(scope, selectElement, attr, ctrls) {
            var selectCtrl = ctrls[0];
            var ngModelCtrl = ctrls[1];
            var multiple = attr.multiple;
            for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
                if (children[i].value === "") {
                    selectCtrl.hasEmptyOption = true;
                    selectCtrl.emptyOption = children.eq(i);
                    break;
                }
            }
            selectElement.empty();
            var providedEmptyOption = !!selectCtrl.emptyOption;
            var unknownOption = jqLite(optionTemplate.cloneNode(false));
            unknownOption.val("?");
            var options;
            var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);
            var listFragment = $document[0].createDocumentFragment();
            selectCtrl.generateUnknownOptionValue = function(val) {
                return "?";
            };
            if (!multiple) {
                selectCtrl.writeValue = function writeNgOptionsValue(value) {
                    if (!options) return;
                    var selectedOption = selectElement[0].options[selectElement[0].selectedIndex];
                    var option = options.getOptionFromViewValue(value);
                    if (selectedOption) selectedOption.removeAttribute("selected");
                    if (option) {
                        if (selectElement[0].value !== option.selectValue) {
                            selectCtrl.removeUnknownOption();
                            selectElement[0].value = option.selectValue;
                            option.element.selected = true;
                        }
                        option.element.setAttribute("selected", "selected");
                    } else {
                        selectCtrl.selectUnknownOrEmptyOption(value);
                    }
                };
                selectCtrl.readValue = function readNgOptionsValue() {
                    var selectedOption = options.selectValueMap[selectElement.val()];
                    if (selectedOption && !selectedOption.disabled) {
                        selectCtrl.unselectEmptyOption();
                        selectCtrl.removeUnknownOption();
                        return options.getViewValueFromOption(selectedOption);
                    }
                    return null;
                };
                if (ngOptions.trackBy) {
                    scope.$watch(function() {
                        return ngOptions.getTrackByValue(ngModelCtrl.$viewValue);
                    }, function() {
                        ngModelCtrl.$render();
                    });
                }
            } else {
                selectCtrl.writeValue = function writeNgOptionsMultiple(values) {
                    if (!options) return;
                    var selectedOptions = values && values.map(getAndUpdateSelectedOption) || [];
                    options.items.forEach(function(option) {
                        if (option.element.selected && !includes(selectedOptions, option)) {
                            option.element.selected = false;
                        }
                    });
                };
                selectCtrl.readValue = function readNgOptionsMultiple() {
                    var selectedValues = selectElement.val() || [], selections = [];
                    forEach(selectedValues, function(value) {
                        var option = options.selectValueMap[value];
                        if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));
                    });
                    return selections;
                };
                if (ngOptions.trackBy) {
                    scope.$watchCollection(function() {
                        if (isArray(ngModelCtrl.$viewValue)) {
                            return ngModelCtrl.$viewValue.map(function(value) {
                                return ngOptions.getTrackByValue(value);
                            });
                        }
                    }, function() {
                        ngModelCtrl.$render();
                    });
                }
            }
            if (providedEmptyOption) {
                $compile(selectCtrl.emptyOption)(scope);
                selectElement.prepend(selectCtrl.emptyOption);
                if (selectCtrl.emptyOption[0].nodeType === NODE_TYPE_COMMENT) {
                    selectCtrl.hasEmptyOption = false;
                    selectCtrl.registerOption = function(optionScope, optionEl) {
                        if (optionEl.val() === "") {
                            selectCtrl.hasEmptyOption = true;
                            selectCtrl.emptyOption = optionEl;
                            selectCtrl.emptyOption.removeClass("ng-scope");
                            ngModelCtrl.$render();
                            optionEl.on("$destroy", function() {
                                var needsRerender = selectCtrl.$isEmptyOptionSelected();
                                selectCtrl.hasEmptyOption = false;
                                selectCtrl.emptyOption = undefined;
                                if (needsRerender) ngModelCtrl.$render();
                            });
                        }
                    };
                } else {
                    selectCtrl.emptyOption.removeClass("ng-scope");
                }
            }
            scope.$watchCollection(ngOptions.getWatchables, updateOptions);
            function addOptionElement(option, parent) {
                var optionElement = optionTemplate.cloneNode(false);
                parent.appendChild(optionElement);
                updateOptionElement(option, optionElement);
            }
            function getAndUpdateSelectedOption(viewValue) {
                var option = options.getOptionFromViewValue(viewValue);
                var element = option && option.element;
                if (element && !element.selected) element.selected = true;
                return option;
            }
            function updateOptionElement(option, element) {
                option.element = element;
                element.disabled = option.disabled;
                if (option.label !== element.label) {
                    element.label = option.label;
                    element.textContent = option.label;
                }
                element.value = option.selectValue;
            }
            function updateOptions() {
                var previousValue = options && selectCtrl.readValue();
                if (options) {
                    for (var i = options.items.length - 1; i >= 0; i--) {
                        var option = options.items[i];
                        if (isDefined(option.group)) {
                            jqLiteRemove(option.element.parentNode);
                        } else {
                            jqLiteRemove(option.element);
                        }
                    }
                }
                options = ngOptions.getOptions();
                var groupElementMap = {};
                options.items.forEach(function addOption(option) {
                    var groupElement;
                    if (isDefined(option.group)) {
                        groupElement = groupElementMap[option.group];
                        if (!groupElement) {
                            groupElement = optGroupTemplate.cloneNode(false);
                            listFragment.appendChild(groupElement);
                            groupElement.label = option.group === null ? "null" : option.group;
                            groupElementMap[option.group] = groupElement;
                        }
                        addOptionElement(option, groupElement);
                    } else {
                        addOptionElement(option, listFragment);
                    }
                });
                selectElement[0].appendChild(listFragment);
                ngModelCtrl.$render();
                if (!ngModelCtrl.$isEmpty(previousValue)) {
                    var nextValue = selectCtrl.readValue();
                    var isNotPrimitive = ngOptions.trackBy || multiple;
                    if (isNotPrimitive ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
                        ngModelCtrl.$setViewValue(nextValue);
                        ngModelCtrl.$render();
                    }
                }
            }
        }
        return {
            restrict: "A",
            terminal: true,
            require: [ "select", "ngModel" ],
            link: {
                pre: function ngOptionsPreLink(scope, selectElement, attr, ctrls) {
                    ctrls[0].registerOption = noop;
                },
                post: ngOptionsPostLink
            }
        };
    } ];
    var ngPluralizeDirective = [ "$locale", "$interpolate", "$log", function($locale, $interpolate, $log) {
        var BRACE = /{}/g, IS_WHEN = /^when(Minus)?(.+)$/;
        return {
            link: function(scope, element, attr) {
                var numberExp = attr.count, whenExp = attr.$attr.when && element.attr(attr.$attr.when), offset = attr.offset || 0, whens = scope.$eval(whenExp) || {}, whensExpFns = {}, startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), braceReplacement = startSymbol + numberExp + "-" + offset + endSymbol, watchRemover = angular.noop, lastCount;
                forEach(attr, function(expression, attributeName) {
                    var tmpMatch = IS_WHEN.exec(attributeName);
                    if (tmpMatch) {
                        var whenKey = (tmpMatch[1] ? "-" : "") + lowercase(tmpMatch[2]);
                        whens[whenKey] = element.attr(attr.$attr[attributeName]);
                    }
                });
                forEach(whens, function(expression, key) {
                    whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));
                });
                scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
                    var count = parseFloat(newVal);
                    var countIsNaN = isNumberNaN(count);
                    if (!countIsNaN && !(count in whens)) {
                        count = $locale.pluralCat(count - offset);
                    }
                    if (count !== lastCount && !(countIsNaN && isNumberNaN(lastCount))) {
                        watchRemover();
                        var whenExpFn = whensExpFns[count];
                        if (isUndefined(whenExpFn)) {
                            if (newVal != null) {
                                $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);
                            }
                            watchRemover = noop;
                            updateElementText();
                        } else {
                            watchRemover = scope.$watch(whenExpFn, updateElementText);
                        }
                        lastCount = count;
                    }
                });
                function updateElementText(newText) {
                    element.text(newText || "");
                }
            }
        };
    } ];
    var ngRefMinErr = minErr("ngRef");
    var ngRefDirective = [ "$parse", function($parse) {
        return {
            priority: -1,
            restrict: "A",
            compile: function(tElement, tAttrs) {
                var controllerName = directiveNormalize(nodeName_(tElement));
                var getter = $parse(tAttrs.ngRef);
                var setter = getter.assign || function() {
                    throw ngRefMinErr("nonassign", 'Expression in ngRef="{0}" is non-assignable!', tAttrs.ngRef);
                };
                return function(scope, element, attrs) {
                    var refValue;
                    if (attrs.hasOwnProperty("ngRefRead")) {
                        if (attrs.ngRefRead === "$element") {
                            refValue = element;
                        } else {
                            refValue = element.data("$" + attrs.ngRefRead + "Controller");
                            if (!refValue) {
                                throw ngRefMinErr("noctrl", 'The controller for ngRefRead="{0}" could not be found on ngRef="{1}"', attrs.ngRefRead, tAttrs.ngRef);
                            }
                        }
                    } else {
                        refValue = element.data("$" + controllerName + "Controller");
                    }
                    refValue = refValue || element;
                    setter(scope, refValue);
                    element.on("$destroy", function() {
                        if (getter(scope) === refValue) {
                            setter(scope, null);
                        }
                    });
                };
            }
        };
    } ];
    var ngRepeatDirective = [ "$parse", "$animate", "$compile", function($parse, $animate, $compile) {
        var NG_REMOVED = "$$NG_REMOVED";
        var ngRepeatMinErr = minErr("ngRepeat");
        var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
            scope[valueIdentifier] = value;
            if (keyIdentifier) scope[keyIdentifier] = key;
            scope.$index = index;
            scope.$first = index === 0;
            scope.$last = index === arrayLength - 1;
            scope.$middle = !(scope.$first || scope.$last);
            scope.$odd = !(scope.$even = (index & 1) === 0);
        };
        var getBlockStart = function(block) {
            return block.clone[0];
        };
        var getBlockEnd = function(block) {
            return block.clone[block.clone.length - 1];
        };
        var trackByIdArrayFn = function($scope, key, value) {
            return hashKey(value);
        };
        var trackByIdObjFn = function($scope, key) {
            return key;
        };
        return {
            restrict: "A",
            multiElement: true,
            transclude: "element",
            priority: 1e3,
            terminal: true,
            $$tlb: true,
            compile: function ngRepeatCompile($element, $attr) {
                var expression = $attr.ngRepeat;
                var ngRepeatEndComment = $compile.$$createComment("end ngRepeat", expression);
                var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                if (!match) {
                    throw ngRepeatMinErr("iexp", "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.", expression);
                }
                var lhs = match[1];
                var rhs = match[2];
                var aliasAs = match[3];
                var trackByExp = match[4];
                match = lhs.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/);
                if (!match) {
                    throw ngRepeatMinErr("iidexp", "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.", lhs);
                }
                var valueIdentifier = match[3] || match[1];
                var keyIdentifier = match[2];
                if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) || /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
                    throw ngRepeatMinErr("badident", "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.", aliasAs);
                }
                var trackByIdExpFn;
                if (trackByExp) {
                    var hashFnLocals = {
                        $id: hashKey
                    };
                    var trackByExpGetter = $parse(trackByExp);
                    trackByIdExpFn = function($scope, key, value, index) {
                        if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
                        hashFnLocals[valueIdentifier] = value;
                        hashFnLocals.$index = index;
                        return trackByExpGetter($scope, hashFnLocals);
                    };
                }
                return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {
                    var lastBlockMap = createMap();
                    $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
                        var index, length, previousNode = $element[0], nextNode, nextBlockMap = createMap(), collectionLength, key, value, trackById, trackByIdFn, collectionKeys, block, nextBlockOrder, elementsToRemove;
                        if (aliasAs) {
                            $scope[aliasAs] = collection;
                        }
                        if (isArrayLike(collection)) {
                            collectionKeys = collection;
                            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
                        } else {
                            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
                            collectionKeys = [];
                            for (var itemKey in collection) {
                                if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== "$") {
                                    collectionKeys.push(itemKey);
                                }
                            }
                        }
                        collectionLength = collectionKeys.length;
                        nextBlockOrder = new Array(collectionLength);
                        for (index = 0; index < collectionLength; index++) {
                            key = collection === collectionKeys ? index : collectionKeys[index];
                            value = collection[key];
                            trackById = trackByIdFn($scope, key, value, index);
                            if (lastBlockMap[trackById]) {
                                block = lastBlockMap[trackById];
                                delete lastBlockMap[trackById];
                                nextBlockMap[trackById] = block;
                                nextBlockOrder[index] = block;
                            } else if (nextBlockMap[trackById]) {
                                forEach(nextBlockOrder, function(block) {
                                    if (block && block.scope) lastBlockMap[block.id] = block;
                                });
                                throw ngRepeatMinErr("dupes", "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}", expression, trackById, value);
                            } else {
                                nextBlockOrder[index] = {
                                    id: trackById,
                                    scope: undefined,
                                    clone: undefined
                                };
                                nextBlockMap[trackById] = true;
                            }
                        }
                        if (hashFnLocals) {
                            hashFnLocals[valueIdentifier] = undefined;
                        }
                        for (var blockKey in lastBlockMap) {
                            block = lastBlockMap[blockKey];
                            elementsToRemove = getBlockNodes(block.clone);
                            $animate.leave(elementsToRemove);
                            if (elementsToRemove[0].parentNode) {
                                for (index = 0, length = elementsToRemove.length; index < length; index++) {
                                    elementsToRemove[index][NG_REMOVED] = true;
                                }
                            }
                            block.scope.$destroy();
                        }
                        for (index = 0; index < collectionLength; index++) {
                            key = collection === collectionKeys ? index : collectionKeys[index];
                            value = collection[key];
                            block = nextBlockOrder[index];
                            if (block.scope) {
                                nextNode = previousNode;
                                do {
                                    nextNode = nextNode.nextSibling;
                                } while (nextNode && nextNode[NG_REMOVED]);
                                if (getBlockStart(block) !== nextNode) {
                                    $animate.move(getBlockNodes(block.clone), null, previousNode);
                                }
                                previousNode = getBlockEnd(block);
                                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                            } else {
                                $transclude(function ngRepeatTransclude(clone, scope) {
                                    block.scope = scope;
                                    var endNode = ngRepeatEndComment.cloneNode(false);
                                    clone[clone.length++] = endNode;
                                    $animate.enter(clone, null, previousNode);
                                    previousNode = endNode;
                                    block.clone = clone;
                                    nextBlockMap[block.id] = block;
                                    updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
                                });
                            }
                        }
                        lastBlockMap = nextBlockMap;
                    });
                };
            }
        };
    } ];
    var NG_HIDE_CLASS = "ng-hide";
    var NG_HIDE_IN_PROGRESS_CLASS = "ng-hide-animate";
    var ngShowDirective = [ "$animate", function($animate) {
        return {
            restrict: "A",
            multiElement: true,
            link: function(scope, element, attr) {
                scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
                    $animate[value ? "removeClass" : "addClass"](element, NG_HIDE_CLASS, {
                        tempClasses: NG_HIDE_IN_PROGRESS_CLASS
                    });
                });
            }
        };
    } ];
    var ngHideDirective = [ "$animate", function($animate) {
        return {
            restrict: "A",
            multiElement: true,
            link: function(scope, element, attr) {
                scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
                    $animate[value ? "addClass" : "removeClass"](element, NG_HIDE_CLASS, {
                        tempClasses: NG_HIDE_IN_PROGRESS_CLASS
                    });
                });
            }
        };
    } ];
    var ngStyleDirective = ngDirective(function(scope, element, attr) {
        scope.$watchCollection(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
            if (oldStyles && newStyles !== oldStyles) {
                forEach(oldStyles, function(val, style) {
                    element.css(style, "");
                });
            }
            if (newStyles) element.css(newStyles);
        });
    });
    var ngSwitchDirective = [ "$animate", "$compile", function($animate, $compile) {
        return {
            require: "ngSwitch",
            controller: [ "$scope", function NgSwitchController() {
                this.cases = {};
            } ],
            link: function(scope, element, attr, ngSwitchController) {
                var watchExpr = attr.ngSwitch || attr.on, selectedTranscludes = [], selectedElements = [], previousLeaveAnimations = [], selectedScopes = [];
                var spliceFactory = function(array, index) {
                    return function(response) {
                        if (response !== false) array.splice(index, 1);
                    };
                };
                scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
                    var i, ii;
                    while (previousLeaveAnimations.length) {
                        $animate.cancel(previousLeaveAnimations.pop());
                    }
                    for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
                        var selected = getBlockNodes(selectedElements[i].clone);
                        selectedScopes[i].$destroy();
                        var runner = previousLeaveAnimations[i] = $animate.leave(selected);
                        runner.done(spliceFactory(previousLeaveAnimations, i));
                    }
                    selectedElements.length = 0;
                    selectedScopes.length = 0;
                    if (selectedTranscludes = ngSwitchController.cases["!" + value] || ngSwitchController.cases["?"]) {
                        forEach(selectedTranscludes, function(selectedTransclude) {
                            selectedTransclude.transclude(function(caseElement, selectedScope) {
                                selectedScopes.push(selectedScope);
                                var anchor = selectedTransclude.element;
                                caseElement[caseElement.length++] = $compile.$$createComment("end ngSwitchWhen");
                                var block = {
                                    clone: caseElement
                                };
                                selectedElements.push(block);
                                $animate.enter(caseElement, anchor.parent(), anchor);
                            });
                        });
                    }
                });
            }
        };
    } ];
    var ngSwitchWhenDirective = ngDirective({
        transclude: "element",
        priority: 1200,
        require: "^ngSwitch",
        multiElement: true,
        link: function(scope, element, attrs, ctrl, $transclude) {
            var cases = attrs.ngSwitchWhen.split(attrs.ngSwitchWhenSeparator).sort().filter(function(element, index, array) {
                return array[index - 1] !== element;
            });
            forEach(cases, function(whenCase) {
                ctrl.cases["!" + whenCase] = ctrl.cases["!" + whenCase] || [];
                ctrl.cases["!" + whenCase].push({
                    transclude: $transclude,
                    element: element
                });
            });
        }
    });
    var ngSwitchDefaultDirective = ngDirective({
        transclude: "element",
        priority: 1200,
        require: "^ngSwitch",
        multiElement: true,
        link: function(scope, element, attr, ctrl, $transclude) {
            ctrl.cases["?"] = ctrl.cases["?"] || [];
            ctrl.cases["?"].push({
                transclude: $transclude,
                element: element
            });
        }
    });
    var ngTranscludeMinErr = minErr("ngTransclude");
    var ngTranscludeDirective = [ "$compile", function($compile) {
        return {
            restrict: "EAC",
            compile: function ngTranscludeCompile(tElement) {
                var fallbackLinkFn = $compile(tElement.contents());
                tElement.empty();
                return function ngTranscludePostLink($scope, $element, $attrs, controller, $transclude) {
                    if (!$transclude) {
                        throw ngTranscludeMinErr("orphan", "Illegal use of ngTransclude directive in the template! " + "No parent directive that requires a transclusion found. " + "Element: {0}", startingTag($element));
                    }
                    if ($attrs.ngTransclude === $attrs.$attr.ngTransclude) {
                        $attrs.ngTransclude = "";
                    }
                    var slotName = $attrs.ngTransclude || $attrs.ngTranscludeSlot;
                    $transclude(ngTranscludeCloneAttachFn, null, slotName);
                    if (slotName && !$transclude.isSlotFilled(slotName)) {
                        useFallbackContent();
                    }
                    function ngTranscludeCloneAttachFn(clone, transcludedScope) {
                        if (clone.length && notWhitespace(clone)) {
                            $element.append(clone);
                        } else {
                            useFallbackContent();
                            transcludedScope.$destroy();
                        }
                    }
                    function useFallbackContent() {
                        fallbackLinkFn($scope, function(clone) {
                            $element.append(clone);
                        });
                    }
                    function notWhitespace(nodes) {
                        for (var i = 0, ii = nodes.length; i < ii; i++) {
                            var node = nodes[i];
                            if (node.nodeType !== NODE_TYPE_TEXT || node.nodeValue.trim()) {
                                return true;
                            }
                        }
                    }
                };
            }
        };
    } ];
    var scriptDirective = [ "$templateCache", function($templateCache) {
        return {
            restrict: "E",
            terminal: true,
            compile: function(element, attr) {
                if (attr.type === "text/ng-template") {
                    var templateUrl = attr.id, text = element[0].text;
                    $templateCache.put(templateUrl, text);
                }
            }
        };
    } ];
    var noopNgModelController = {
        $setViewValue: noop,
        $render: noop
    };
    function setOptionSelectedStatus(optionEl, value) {
        optionEl.prop("selected", value);
        optionEl.attr("selected", value);
    }
    var SelectController = [ "$element", "$scope", function($element, $scope) {
        var self = this, optionsMap = new NgMap();
        self.selectValueMap = {};
        self.ngModelCtrl = noopNgModelController;
        self.multiple = false;
        self.unknownOption = jqLite(window.document.createElement("option"));
        self.hasEmptyOption = false;
        self.emptyOption = undefined;
        self.renderUnknownOption = function(val) {
            var unknownVal = self.generateUnknownOptionValue(val);
            self.unknownOption.val(unknownVal);
            $element.prepend(self.unknownOption);
            setOptionSelectedStatus(self.unknownOption, true);
            $element.val(unknownVal);
        };
        self.updateUnknownOption = function(val) {
            var unknownVal = self.generateUnknownOptionValue(val);
            self.unknownOption.val(unknownVal);
            setOptionSelectedStatus(self.unknownOption, true);
            $element.val(unknownVal);
        };
        self.generateUnknownOptionValue = function(val) {
            return "? " + hashKey(val) + " ?";
        };
        self.removeUnknownOption = function() {
            if (self.unknownOption.parent()) self.unknownOption.remove();
        };
        self.selectEmptyOption = function() {
            if (self.emptyOption) {
                $element.val("");
                setOptionSelectedStatus(self.emptyOption, true);
            }
        };
        self.unselectEmptyOption = function() {
            if (self.hasEmptyOption) {
                setOptionSelectedStatus(self.emptyOption, false);
            }
        };
        $scope.$on("$destroy", function() {
            self.renderUnknownOption = noop;
        });
        self.readValue = function readSingleValue() {
            var val = $element.val();
            var realVal = val in self.selectValueMap ? self.selectValueMap[val] : val;
            if (self.hasOption(realVal)) {
                return realVal;
            }
            return null;
        };
        self.writeValue = function writeSingleValue(value) {
            var currentlySelectedOption = $element[0].options[$element[0].selectedIndex];
            if (currentlySelectedOption) setOptionSelectedStatus(jqLite(currentlySelectedOption), false);
            if (self.hasOption(value)) {
                self.removeUnknownOption();
                var hashedVal = hashKey(value);
                $element.val(hashedVal in self.selectValueMap ? hashedVal : value);
                var selectedOption = $element[0].options[$element[0].selectedIndex];
                setOptionSelectedStatus(jqLite(selectedOption), true);
            } else {
                self.selectUnknownOrEmptyOption(value);
            }
        };
        self.addOption = function(value, element) {
            if (element[0].nodeType === NODE_TYPE_COMMENT) return;
            assertNotHasOwnProperty(value, '"option value"');
            if (value === "") {
                self.hasEmptyOption = true;
                self.emptyOption = element;
            }
            var count = optionsMap.get(value) || 0;
            optionsMap.set(value, count + 1);
            scheduleRender();
        };
        self.removeOption = function(value) {
            var count = optionsMap.get(value);
            if (count) {
                if (count === 1) {
                    optionsMap.delete(value);
                    if (value === "") {
                        self.hasEmptyOption = false;
                        self.emptyOption = undefined;
                    }
                } else {
                    optionsMap.set(value, count - 1);
                }
            }
        };
        self.hasOption = function(value) {
            return !!optionsMap.get(value);
        };
        self.$hasEmptyOption = function() {
            return self.hasEmptyOption;
        };
        self.$isUnknownOptionSelected = function() {
            return $element[0].options[0] === self.unknownOption[0];
        };
        self.$isEmptyOptionSelected = function() {
            return self.hasEmptyOption && $element[0].options[$element[0].selectedIndex] === self.emptyOption[0];
        };
        self.selectUnknownOrEmptyOption = function(value) {
            if (value == null && self.emptyOption) {
                self.removeUnknownOption();
                self.selectEmptyOption();
            } else if (self.unknownOption.parent().length) {
                self.updateUnknownOption(value);
            } else {
                self.renderUnknownOption(value);
            }
        };
        var renderScheduled = false;
        function scheduleRender() {
            if (renderScheduled) return;
            renderScheduled = true;
            $scope.$$postDigest(function() {
                renderScheduled = false;
                self.ngModelCtrl.$render();
            });
        }
        var updateScheduled = false;
        function scheduleViewValueUpdate(renderAfter) {
            if (updateScheduled) return;
            updateScheduled = true;
            $scope.$$postDigest(function() {
                if ($scope.$$destroyed) return;
                updateScheduled = false;
                self.ngModelCtrl.$setViewValue(self.readValue());
                if (renderAfter) self.ngModelCtrl.$render();
            });
        }
        self.registerOption = function(optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn) {
            if (optionAttrs.$attr.ngValue) {
                var oldVal, hashedVal;
                optionAttrs.$observe("value", function valueAttributeObserveAction(newVal) {
                    var removal;
                    var previouslySelected = optionElement.prop("selected");
                    if (isDefined(hashedVal)) {
                        self.removeOption(oldVal);
                        delete self.selectValueMap[hashedVal];
                        removal = true;
                    }
                    hashedVal = hashKey(newVal);
                    oldVal = newVal;
                    self.selectValueMap[hashedVal] = newVal;
                    self.addOption(newVal, optionElement);
                    optionElement.attr("value", hashedVal);
                    if (removal && previouslySelected) {
                        scheduleViewValueUpdate();
                    }
                });
            } else if (interpolateValueFn) {
                optionAttrs.$observe("value", function valueAttributeObserveAction(newVal) {
                    self.readValue();
                    var removal;
                    var previouslySelected = optionElement.prop("selected");
                    if (isDefined(oldVal)) {
                        self.removeOption(oldVal);
                        removal = true;
                    }
                    oldVal = newVal;
                    self.addOption(newVal, optionElement);
                    if (removal && previouslySelected) {
                        scheduleViewValueUpdate();
                    }
                });
            } else if (interpolateTextFn) {
                optionScope.$watch(interpolateTextFn, function interpolateWatchAction(newVal, oldVal) {
                    optionAttrs.$set("value", newVal);
                    var previouslySelected = optionElement.prop("selected");
                    if (oldVal !== newVal) {
                        self.removeOption(oldVal);
                    }
                    self.addOption(newVal, optionElement);
                    if (oldVal && previouslySelected) {
                        scheduleViewValueUpdate();
                    }
                });
            } else {
                self.addOption(optionAttrs.value, optionElement);
            }
            optionAttrs.$observe("disabled", function(newVal) {
                if (newVal === "true" || newVal && optionElement.prop("selected")) {
                    if (self.multiple) {
                        scheduleViewValueUpdate(true);
                    } else {
                        self.ngModelCtrl.$setViewValue(null);
                        self.ngModelCtrl.$render();
                    }
                }
            });
            optionElement.on("$destroy", function() {
                var currentValue = self.readValue();
                var removeValue = optionAttrs.value;
                self.removeOption(removeValue);
                scheduleRender();
                if (self.multiple && currentValue && currentValue.indexOf(removeValue) !== -1 || currentValue === removeValue) {
                    scheduleViewValueUpdate(true);
                }
            });
        };
    } ];
    var selectDirective = function() {
        return {
            restrict: "E",
            require: [ "select", "?ngModel" ],
            controller: SelectController,
            priority: 1,
            link: {
                pre: selectPreLink,
                post: selectPostLink
            }
        };
        function selectPreLink(scope, element, attr, ctrls) {
            var selectCtrl = ctrls[0];
            var ngModelCtrl = ctrls[1];
            if (!ngModelCtrl) {
                selectCtrl.registerOption = noop;
                return;
            }
            selectCtrl.ngModelCtrl = ngModelCtrl;
            element.on("change", function() {
                selectCtrl.removeUnknownOption();
                scope.$apply(function() {
                    ngModelCtrl.$setViewValue(selectCtrl.readValue());
                });
            });
            if (attr.multiple) {
                selectCtrl.multiple = true;
                selectCtrl.readValue = function readMultipleValue() {
                    var array = [];
                    forEach(element.find("option"), function(option) {
                        if (option.selected && !option.disabled) {
                            var val = option.value;
                            array.push(val in selectCtrl.selectValueMap ? selectCtrl.selectValueMap[val] : val);
                        }
                    });
                    return array;
                };
                selectCtrl.writeValue = function writeMultipleValue(value) {
                    forEach(element.find("option"), function(option) {
                        var shouldBeSelected = !!value && (includes(value, option.value) || includes(value, selectCtrl.selectValueMap[option.value]));
                        var currentlySelected = option.selected;
                        if (shouldBeSelected !== currentlySelected) {
                            setOptionSelectedStatus(jqLite(option), shouldBeSelected);
                        }
                    });
                };
                var lastView, lastViewRef = NaN;
                scope.$watch(function selectMultipleWatch() {
                    if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
                        lastView = shallowCopy(ngModelCtrl.$viewValue);
                        ngModelCtrl.$render();
                    }
                    lastViewRef = ngModelCtrl.$viewValue;
                });
                ngModelCtrl.$isEmpty = function(value) {
                    return !value || value.length === 0;
                };
            }
        }
        function selectPostLink(scope, element, attrs, ctrls) {
            var ngModelCtrl = ctrls[1];
            if (!ngModelCtrl) return;
            var selectCtrl = ctrls[0];
            ngModelCtrl.$render = function() {
                selectCtrl.writeValue(ngModelCtrl.$viewValue);
            };
        }
    };
    var optionDirective = [ "$interpolate", function($interpolate) {
        return {
            restrict: "E",
            priority: 100,
            compile: function(element, attr) {
                var interpolateValueFn, interpolateTextFn;
                if (isDefined(attr.ngValue)) {} else if (isDefined(attr.value)) {
                    interpolateValueFn = $interpolate(attr.value, true);
                } else {
                    interpolateTextFn = $interpolate(element.text(), true);
                    if (!interpolateTextFn) {
                        attr.$set("value", element.text());
                    }
                }
                return function(scope, element, attr) {
                    var selectCtrlName = "$selectController", parent = element.parent(), selectCtrl = parent.data(selectCtrlName) || parent.parent().data(selectCtrlName);
                    if (selectCtrl) {
                        selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn);
                    }
                };
            }
        };
    } ];
    var requiredDirective = [ "$parse", function($parse) {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (!ctrl) return;
                var value = attr.hasOwnProperty("required") || $parse(attr.ngRequired)(scope);
                if (!attr.ngRequired) {
                    attr.required = true;
                }
                ctrl.$validators.required = function(modelValue, viewValue) {
                    return !value || !ctrl.$isEmpty(viewValue);
                };
                attr.$observe("required", function(newVal) {
                    if (value !== newVal) {
                        value = newVal;
                        ctrl.$validate();
                    }
                });
            }
        };
    } ];
    var patternDirective = [ "$parse", function($parse) {
        return {
            restrict: "A",
            require: "?ngModel",
            compile: function(tElm, tAttr) {
                var patternExp;
                var parseFn;
                if (tAttr.ngPattern) {
                    patternExp = tAttr.ngPattern;
                    if (tAttr.ngPattern.charAt(0) === "/" && REGEX_STRING_REGEXP.test(tAttr.ngPattern)) {
                        parseFn = function() {
                            return tAttr.ngPattern;
                        };
                    } else {
                        parseFn = $parse(tAttr.ngPattern);
                    }
                }
                return function(scope, elm, attr, ctrl) {
                    if (!ctrl) return;
                    var attrVal = attr.pattern;
                    if (attr.ngPattern) {
                        attrVal = parseFn(scope);
                    } else {
                        patternExp = attr.pattern;
                    }
                    var regexp = parsePatternAttr(attrVal, patternExp, elm);
                    attr.$observe("pattern", function(newVal) {
                        var oldRegexp = regexp;
                        regexp = parsePatternAttr(newVal, patternExp, elm);
                        if ((oldRegexp && oldRegexp.toString()) !== (regexp && regexp.toString())) {
                            ctrl.$validate();
                        }
                    });
                    ctrl.$validators.pattern = function(modelValue, viewValue) {
                        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
                    };
                };
            }
        };
    } ];
    var maxlengthDirective = [ "$parse", function($parse) {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (!ctrl) return;
                var maxlength = attr.maxlength || $parse(attr.ngMaxlength)(scope);
                var maxlengthParsed = parseLength(maxlength);
                attr.$observe("maxlength", function(value) {
                    if (maxlength !== value) {
                        maxlengthParsed = parseLength(value);
                        maxlength = value;
                        ctrl.$validate();
                    }
                });
                ctrl.$validators.maxlength = function(modelValue, viewValue) {
                    return maxlengthParsed < 0 || ctrl.$isEmpty(viewValue) || viewValue.length <= maxlengthParsed;
                };
            }
        };
    } ];
    var minlengthDirective = [ "$parse", function($parse) {
        return {
            restrict: "A",
            require: "?ngModel",
            link: function(scope, elm, attr, ctrl) {
                if (!ctrl) return;
                var minlength = attr.minlength || $parse(attr.ngMinlength)(scope);
                var minlengthParsed = parseLength(minlength) || -1;
                attr.$observe("minlength", function(value) {
                    if (minlength !== value) {
                        minlengthParsed = parseLength(value) || -1;
                        minlength = value;
                        ctrl.$validate();
                    }
                });
                ctrl.$validators.minlength = function(modelValue, viewValue) {
                    return ctrl.$isEmpty(viewValue) || viewValue.length >= minlengthParsed;
                };
            }
        };
    } ];
    function parsePatternAttr(regex, patternExp, elm) {
        if (!regex) return undefined;
        if (isString(regex)) {
            regex = new RegExp("^" + regex + "$");
        }
        if (!regex.test) {
            throw minErr("ngPattern")("noregexp", "Expected {0} to be a RegExp but was {1}. Element: {2}", patternExp, regex, startingTag(elm));
        }
        return regex;
    }
    function parseLength(val) {
        var intVal = toInt(val);
        return isNumberNaN(intVal) ? -1 : intVal;
    }
    if (window.angular.bootstrap) {
        if (window.console) {
            console.log("WARNING: Tried to load AngularJS more than once.");
        }
        return;
    }
    bindJQuery();
    publishExternalAPI(angular);
    angular.module("ngLocale", [], [ "$provide", function($provide) {
        var PLURAL_CATEGORY = {
            ZERO: "zero",
            ONE: "one",
            TWO: "two",
            FEW: "few",
            MANY: "many",
            OTHER: "other"
        };
        function getDecimals(n) {
            n = n + "";
            var i = n.indexOf(".");
            return i == -1 ? 0 : n.length - i - 1;
        }
        function getVF(n, opt_precision) {
            var v = opt_precision;
            if (undefined === v) {
                v = Math.min(getDecimals(n), 3);
            }
            var base = Math.pow(10, v);
            var f = (n * base | 0) % base;
            return {
                v: v,
                f: f
            };
        }
        $provide.value("$locale", {
            DATETIME_FORMATS: {
                AMPMS: [ "AM", "PM" ],
                DAY: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
                ERANAMES: [ "Before Christ", "Anno Domini" ],
                ERAS: [ "BC", "AD" ],
                FIRSTDAYOFWEEK: 6,
                MONTH: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                SHORTDAY: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
                SHORTMONTH: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
                STANDALONEMONTH: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                WEEKENDRANGE: [ 5, 6 ],
                fullDate: "EEEE, MMMM d, y",
                longDate: "MMMM d, y",
                medium: "MMM d, y h:mm:ss a",
                mediumDate: "MMM d, y",
                mediumTime: "h:mm:ss a",
                short: "M/d/yy h:mm a",
                shortDate: "M/d/yy",
                shortTime: "h:mm a"
            },
            NUMBER_FORMATS: {
                CURRENCY_SYM: "$",
                DECIMAL_SEP: ".",
                GROUP_SEP: ",",
                PATTERNS: [ {
                    gSize: 3,
                    lgSize: 3,
                    maxFrac: 3,
                    minFrac: 0,
                    minInt: 1,
                    negPre: "-",
                    negSuf: "",
                    posPre: "",
                    posSuf: ""
                }, {
                    gSize: 3,
                    lgSize: 3,
                    maxFrac: 2,
                    minFrac: 2,
                    minInt: 1,
                    negPre: "-Â¤",
                    negSuf: "",
                    posPre: "Â¤",
                    posSuf: ""
                } ]
            },
            id: "en-us",
            localeID: "en_US",
            pluralCat: function(n, opt_precision) {
                var i = n | 0;
                var vf = getVF(n, opt_precision);
                if (i == 1 && vf.v == 0) {
                    return PLURAL_CATEGORY.ONE;
                }
                return PLURAL_CATEGORY.OTHER;
            }
        });
    } ]);
    jqLite(function() {
        angularInit(window.document, bootstrap);
    });
})(window);

!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend(window.angular.element("<style>").text('@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}'));

if (typeof jQuery === "undefined") {
    throw new Error("Bootstrap requires jQuery");
}

+function($) {
    "use strict";
    function transitionEnd() {
        var el = document.createElement("bootstrap");
        var transEndEventNames = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        };
        for (var name in transEndEventNames) {
            if (el.style[name] !== undefined) {
                return {
                    end: transEndEventNames[name]
                };
            }
        }
    }
    $.fn.emulateTransitionEnd = function(duration) {
        var called = false, $el = this;
        $(this).one($.support.transition.end, function() {
            called = true;
        });
        var callback = function() {
            if (!called) $($el).trigger($.support.transition.end);
        };
        setTimeout(callback, duration);
        return this;
    };
    $(function() {
        $.support.transition = transitionEnd();
    });
}(jQuery);

+function($) {
    "use strict";
    var dismiss = '[data-dismiss="alert"]';
    var Alert = function(el) {
        $(el).on("click", dismiss, this.close);
    };
    Alert.prototype.close = function(e) {
        var $this = $(this);
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        var $parent = $(selector);
        if (e) e.preventDefault();
        if (!$parent.length) {
            $parent = $this.hasClass("alert") ? $this : $this.parent();
        }
        $parent.trigger(e = $.Event("close.bs.alert"));
        if (e.isDefaultPrevented()) return;
        $parent.removeClass("in");
        function removeElement() {
            $parent.trigger("closed.bs.alert").remove();
        }
        $.support.transition && $parent.hasClass("fade") ? $parent.one($.support.transition.end, removeElement).emulateTransitionEnd(150) : removeElement();
    };
    var old = $.fn.alert;
    $.fn.alert = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.alert");
            if (!data) $this.data("bs.alert", data = new Alert(this));
            if (typeof option == "string") data[option].call($this);
        });
    };
    $.fn.alert.Constructor = Alert;
    $.fn.alert.noConflict = function() {
        $.fn.alert = old;
        return this;
    };
    $(document).on("click.bs.alert.data-api", dismiss, Alert.prototype.close);
}(jQuery);

+function($) {
    "use strict";
    var Button = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Button.DEFAULTS, options);
    };
    Button.DEFAULTS = {
        loadingText: "loading..."
    };
    Button.prototype.setState = function(state) {
        var d = "disabled";
        var $el = this.$element;
        var val = $el.is("input") ? "val" : "html";
        var data = $el.data();
        state = state + "Text";
        if (!data.resetText) $el.data("resetText", $el[val]());
        $el[val](data[state] || this.options[state]);
        setTimeout(function() {
            state == "loadingText" ? $el.addClass(d).attr(d, d) : $el.removeClass(d).removeAttr(d);
        }, 0);
    };
    Button.prototype.toggle = function() {
        var $parent = this.$element.closest('[data-toggle="buttons"]');
        if ($parent.length) {
            var $input = this.$element.find("input").prop("checked", !this.$element.hasClass("active")).trigger("change");
            if ($input.prop("type") === "radio") $parent.find(".active").removeClass("active");
        }
        this.$element.toggleClass("active");
    };
    var old = $.fn.button;
    $.fn.button = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.button");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.button", data = new Button(this, options));
            if (option == "toggle") data.toggle(); else if (option) data.setState(option);
        });
    };
    $.fn.button.Constructor = Button;
    $.fn.button.noConflict = function() {
        $.fn.button = old;
        return this;
    };
    $(document).on("click.bs.button.data-api", "[data-toggle^=button]", function(e) {
        var $btn = $(e.target);
        if (!$btn.hasClass("btn")) $btn = $btn.closest(".btn");
        $btn.button("toggle");
        e.preventDefault();
    });
}(jQuery);

+function($) {
    "use strict";
    var Carousel = function(element, options) {
        this.$element = $(element);
        this.$indicators = this.$element.find(".carousel-indicators");
        this.options = options;
        this.paused = this.sliding = this.interval = this.$active = this.$items = null;
        this.options.pause == "hover" && this.$element.on("mouseenter", $.proxy(this.pause, this)).on("mouseleave", $.proxy(this.cycle, this));
    };
    Carousel.DEFAULTS = {
        interval: 5e3,
        pause: "hover",
        wrap: true
    };
    Carousel.prototype.cycle = function(e) {
        e || (this.paused = false);
        this.interval && clearInterval(this.interval);
        this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));
        return this;
    };
    Carousel.prototype.getActiveIndex = function() {
        this.$active = this.$element.find(".item.active");
        this.$items = this.$active.parent().children();
        return this.$items.index(this.$active);
    };
    Carousel.prototype.to = function(pos) {
        var that = this;
        var activeIndex = this.getActiveIndex();
        if (pos > this.$items.length - 1 || pos < 0) return;
        if (this.sliding) return this.$element.one("slid", function() {
            that.to(pos);
        });
        if (activeIndex == pos) return this.pause().cycle();
        return this.slide(pos > activeIndex ? "next" : "prev", $(this.$items[pos]));
    };
    Carousel.prototype.pause = function(e) {
        e || (this.paused = true);
        if (this.$element.find(".next, .prev").length && $.support.transition.end) {
            this.$element.trigger($.support.transition.end);
            this.cycle(true);
        }
        this.interval = clearInterval(this.interval);
        return this;
    };
    Carousel.prototype.next = function() {
        if (this.sliding) return;
        return this.slide("next");
    };
    Carousel.prototype.prev = function() {
        if (this.sliding) return;
        return this.slide("prev");
    };
    Carousel.prototype.slide = function(type, next) {
        var $active = this.$element.find(".item.active");
        var $next = next || $active[type]();
        var isCycling = this.interval;
        var direction = type == "next" ? "left" : "right";
        var fallback = type == "next" ? "first" : "last";
        var that = this;
        if (!$next.length) {
            if (!this.options.wrap) return;
            $next = this.$element.find(".item")[fallback]();
        }
        this.sliding = true;
        isCycling && this.pause();
        var e = $.Event("slide.bs.carousel", {
            relatedTarget: $next[0],
            direction: direction
        });
        if ($next.hasClass("active")) return;
        if (this.$indicators.length) {
            this.$indicators.find(".active").removeClass("active");
            this.$element.one("slid", function() {
                var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()]);
                $nextIndicator && $nextIndicator.addClass("active");
            });
        }
        if ($.support.transition && this.$element.hasClass("slide")) {
            this.$element.trigger(e);
            if (e.isDefaultPrevented()) return;
            $next.addClass(type);
            $next[0].offsetWidth;
            $active.addClass(direction);
            $next.addClass(direction);
            $active.one($.support.transition.end, function() {
                $next.removeClass([ type, direction ].join(" ")).addClass("active");
                $active.removeClass([ "active", direction ].join(" "));
                that.sliding = false;
                setTimeout(function() {
                    that.$element.trigger("slid");
                }, 0);
            }).emulateTransitionEnd(600);
        } else {
            this.$element.trigger(e);
            if (e.isDefaultPrevented()) return;
            $active.removeClass("active");
            $next.addClass("active");
            this.sliding = false;
            this.$element.trigger("slid");
        }
        isCycling && this.cycle();
        return this;
    };
    var old = $.fn.carousel;
    $.fn.carousel = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.carousel");
            var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == "object" && option);
            var action = typeof option == "string" ? option : options.slide;
            if (!data) $this.data("bs.carousel", data = new Carousel(this, options));
            if (typeof option == "number") data.to(option); else if (action) data[action](); else if (options.interval) data.pause().cycle();
        });
    };
    $.fn.carousel.Constructor = Carousel;
    $.fn.carousel.noConflict = function() {
        $.fn.carousel = old;
        return this;
    };
    $(document).on("click.bs.carousel.data-api", "[data-slide], [data-slide-to]", function(e) {
        var $this = $(this), href;
        var $target = $($this.attr("data-target") || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, ""));
        var options = $.extend({}, $target.data(), $this.data());
        var slideIndex = $this.attr("data-slide-to");
        if (slideIndex) options.interval = false;
        $target.carousel(options);
        if (slideIndex = $this.attr("data-slide-to")) {
            $target.data("bs.carousel").to(slideIndex);
        }
        e.preventDefault();
    });
    $(window).on("load", function() {
        $('[data-ride="carousel"]').each(function() {
            var $carousel = $(this);
            $carousel.carousel($carousel.data());
        });
    });
}(jQuery);

+function($) {
    "use strict";
    var Collapse = function(element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Collapse.DEFAULTS, options);
        this.transitioning = null;
        if (this.options.parent) this.$parent = $(this.options.parent);
        if (this.options.toggle) this.toggle();
    };
    Collapse.DEFAULTS = {
        toggle: true
    };
    Collapse.prototype.dimension = function() {
        var hasWidth = this.$element.hasClass("width");
        return hasWidth ? "width" : "height";
    };
    Collapse.prototype.show = function() {
        if (this.transitioning || this.$element.hasClass("in")) return;
        var startEvent = $.Event("show.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented()) return;
        var actives = this.$parent && this.$parent.find("> .panel > .in");
        if (actives && actives.length) {
            var hasData = actives.data("bs.collapse");
            if (hasData && hasData.transitioning) return;
            actives.collapse("hide");
            hasData || actives.data("bs.collapse", null);
        }
        var dimension = this.dimension();
        this.$element.removeClass("collapse").addClass("collapsing")[dimension](0);
        this.transitioning = 1;
        var complete = function() {
            this.$element.removeClass("collapsing").addClass("in")[dimension]("auto");
            this.transitioning = 0;
            this.$element.trigger("shown.bs.collapse");
        };
        if (!$.support.transition) return complete.call(this);
        var scrollSize = $.camelCase([ "scroll", dimension ].join("-"));
        this.$element.one($.support.transition.end, $.proxy(complete, this)).emulateTransitionEnd(350)[dimension](this.$element[0][scrollSize]);
    };
    Collapse.prototype.hide = function() {
        if (this.transitioning || !this.$element.hasClass("in")) return;
        var startEvent = $.Event("hide.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented()) return;
        var dimension = this.dimension();
        this.$element[dimension](this.$element[dimension]())[0].offsetHeight;
        this.$element.addClass("collapsing").removeClass("collapse").removeClass("in");
        this.transitioning = 1;
        var complete = function() {
            this.transitioning = 0;
            this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse");
        };
        if (!$.support.transition) return complete.call(this);
        this.$element[dimension](0).one($.support.transition.end, $.proxy(complete, this)).emulateTransitionEnd(350);
    };
    Collapse.prototype.toggle = function() {
        this[this.$element.hasClass("in") ? "hide" : "show"]();
    };
    var old = $.fn.collapse;
    $.fn.collapse = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.collapse");
            var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == "object" && option);
            if (!data) $this.data("bs.collapse", data = new Collapse(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.collapse.Constructor = Collapse;
    $.fn.collapse.noConflict = function() {
        $.fn.collapse = old;
        return this;
    };
    $(document).on("click.bs.collapse.data-api", "[data-toggle=collapse]", function(e) {
        var $this = $(this), href;
        var target = $this.attr("data-target") || e.preventDefault() || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "");
        var $target = $(target);
        var data = $target.data("bs.collapse");
        var option = data ? "toggle" : $this.data();
        var parent = $this.attr("data-parent");
        var $parent = parent && $(parent);
        if (!data || !data.transitioning) {
            if ($parent) $parent.find('[data-toggle=collapse][data-parent="' + parent + '"]').not($this).addClass("collapsed");
            $this[$target.hasClass("in") ? "addClass" : "removeClass"]("collapsed");
        }
        $target.collapse(option);
    });
}(jQuery);

+function($) {
    "use strict";
    var backdrop = ".dropdown-backdrop";
    var toggle = "[data-toggle=dropdown]";
    var Dropdown = function(element) {
        var $el = $(element).on("click.bs.dropdown", this.toggle);
    };
    Dropdown.prototype.toggle = function(e) {
        var $this = $(this);
        if ($this.is(".disabled, :disabled")) return;
        var $parent = getParent($this);
        var isActive = $parent.hasClass("open");
        clearMenus();
        if (!isActive) {
            if ("ontouchstart" in document.documentElement && !$parent.closest(".navbar-nav").length) {
                $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on("click", clearMenus);
            }
            $parent.trigger(e = $.Event("show.bs.dropdown"));
            if (e.isDefaultPrevented()) return;
            $parent.toggleClass("open").trigger("shown.bs.dropdown");
            $this.focus();
        }
        return false;
    };
    Dropdown.prototype.keydown = function(e) {
        if (!/(38|40|27)/.test(e.keyCode)) return;
        var $this = $(this);
        e.preventDefault();
        e.stopPropagation();
        if ($this.is(".disabled, :disabled")) return;
        var $parent = getParent($this);
        var isActive = $parent.hasClass("open");
        if (!isActive || isActive && e.keyCode == 27) {
            if (e.which == 27) $parent.find(toggle).focus();
            return $this.click();
        }
        var $items = $("[role=menu] li:not(.divider):visible a", $parent);
        if (!$items.length) return;
        var index = $items.index($items.filter(":focus"));
        if (e.keyCode == 38 && index > 0) index--;
        if (e.keyCode == 40 && index < $items.length - 1) index++;
        if (!~index) index = 0;
        $items.eq(index).focus();
    };
    function clearMenus() {
        $(backdrop).remove();
        $(toggle).each(function(e) {
            var $parent = getParent($(this));
            if (!$parent.hasClass("open")) return;
            $parent.trigger(e = $.Event("hide.bs.dropdown"));
            if (e.isDefaultPrevented()) return;
            $parent.removeClass("open").trigger("hidden.bs.dropdown");
        });
    }
    function getParent($this) {
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && /#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        var $parent = selector && $(selector);
        return $parent && $parent.length ? $parent : $this.parent();
    }
    var old = $.fn.dropdown;
    $.fn.dropdown = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("dropdown");
            if (!data) $this.data("dropdown", data = new Dropdown(this));
            if (typeof option == "string") data[option].call($this);
        });
    };
    $.fn.dropdown.Constructor = Dropdown;
    $.fn.dropdown.noConflict = function() {
        $.fn.dropdown = old;
        return this;
    };
    $(document).on("click.bs.dropdown.data-api", clearMenus).on("click.bs.dropdown.data-api", ".dropdown form", function(e) {
        e.stopPropagation();
    }).on("click.bs.dropdown.data-api", toggle, Dropdown.prototype.toggle).on("keydown.bs.dropdown.data-api", toggle + ", [role=menu]", Dropdown.prototype.keydown);
}(jQuery);

+function($) {
    "use strict";
    var Modal = function(element, options) {
        this.options = options;
        this.$element = $(element);
        this.$backdrop = this.isShown = null;
        if (this.options.remote) this.$element.load(this.options.remote);
    };
    Modal.DEFAULTS = {
        backdrop: true,
        keyboard: true,
        show: true
    };
    Modal.prototype.toggle = function(_relatedTarget) {
        return this[!this.isShown ? "show" : "hide"](_relatedTarget);
    };
    Modal.prototype.show = function(_relatedTarget) {
        var that = this;
        var e = $.Event("show.bs.modal", {
            relatedTarget: _relatedTarget
        });
        this.$element.trigger(e);
        if (this.isShown || e.isDefaultPrevented()) return;
        this.isShown = true;
        this.escape();
        this.$element.on("click.dismiss.modal", '[data-dismiss="modal"]', $.proxy(this.hide, this));
        this.backdrop(function() {
            var transition = $.support.transition && that.$element.hasClass("fade");
            if (!that.$element.parent().length) {
                that.$element.appendTo(document.body);
            }
            that.$element.show();
            if (transition) {
                that.$element[0].offsetWidth;
            }
            that.$element.addClass("in").attr("aria-hidden", false);
            that.enforceFocus();
            var e = $.Event("shown.bs.modal", {
                relatedTarget: _relatedTarget
            });
            transition ? that.$element.find(".modal-dialog").one($.support.transition.end, function() {
                that.$element.focus().trigger(e);
            }).emulateTransitionEnd(300) : that.$element.focus().trigger(e);
        });
    };
    Modal.prototype.hide = function(e) {
        if (e) e.preventDefault();
        e = $.Event("hide.bs.modal");
        this.$element.trigger(e);
        if (!this.isShown || e.isDefaultPrevented()) return;
        this.isShown = false;
        this.escape();
        $(document).off("focusin.bs.modal");
        this.$element.removeClass("in").attr("aria-hidden", true).off("click.dismiss.modal");
        $.support.transition && this.$element.hasClass("fade") ? this.$element.one($.support.transition.end, $.proxy(this.hideModal, this)).emulateTransitionEnd(300) : this.hideModal();
    };
    Modal.prototype.enforceFocus = function() {
        $(document).off("focusin.bs.modal").on("focusin.bs.modal", $.proxy(function(e) {
            if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
                this.$element.focus();
            }
        }, this));
    };
    Modal.prototype.escape = function() {
        if (this.isShown && this.options.keyboard) {
            this.$element.on("keyup.dismiss.bs.modal", $.proxy(function(e) {
                e.which == 27 && this.hide();
            }, this));
        } else if (!this.isShown) {
            this.$element.off("keyup.dismiss.bs.modal");
        }
    };
    Modal.prototype.hideModal = function() {
        var that = this;
        this.$element.hide();
        this.backdrop(function() {
            that.removeBackdrop();
            that.$element.trigger("hidden.bs.modal");
        });
    };
    Modal.prototype.removeBackdrop = function() {
        this.$backdrop && this.$backdrop.remove();
        this.$backdrop = null;
    };
    Modal.prototype.backdrop = function(callback) {
        var that = this;
        var animate = this.$element.hasClass("fade") ? "fade" : "";
        if (this.isShown && this.options.backdrop) {
            var doAnimate = $.support.transition && animate;
            this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').appendTo(document.body);
            this.$element.on("click.dismiss.modal", $.proxy(function(e) {
                if (e.target !== e.currentTarget) return;
                this.options.backdrop == "static" ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this);
            }, this));
            if (doAnimate) this.$backdrop[0].offsetWidth;
            this.$backdrop.addClass("in");
            if (!callback) return;
            doAnimate ? this.$backdrop.one($.support.transition.end, callback).emulateTransitionEnd(150) : callback();
        } else if (!this.isShown && this.$backdrop) {
            this.$backdrop.removeClass("in");
            $.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one($.support.transition.end, callback).emulateTransitionEnd(150) : callback();
        } else if (callback) {
            callback();
        }
    };
    var old = $.fn.modal;
    $.fn.modal = function(option, _relatedTarget) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.modal");
            var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == "object" && option);
            if (!data) $this.data("bs.modal", data = new Modal(this, options));
            if (typeof option == "string") data[option](_relatedTarget); else if (options.show) data.show(_relatedTarget);
        });
    };
    $.fn.modal.Constructor = Modal;
    $.fn.modal.noConflict = function() {
        $.fn.modal = old;
        return this;
    };
    $(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function(e) {
        var $this = $(this);
        var href = $this.attr("href");
        var $target = $($this.attr("data-target") || href && href.replace(/.*(?=#[^\s]+$)/, ""));
        var option = $target.data("modal") ? "toggle" : $.extend({
            remote: !/#/.test(href) && href
        }, $target.data(), $this.data());
        e.preventDefault();
        $target.modal(option, this).one("hide", function() {
            $this.is(":visible") && $this.focus();
        });
    });
    $(document).on("show.bs.modal", ".modal", function() {
        $(document.body).addClass("modal-open");
    }).on("hidden.bs.modal", ".modal", function() {
        $(document.body).removeClass("modal-open");
    });
}(jQuery);

+function($) {
    "use strict";
    var Tooltip = function(element, options) {
        this.type = this.options = this.enabled = this.timeout = this.hoverState = this.$element = null;
        this.init("tooltip", element, options);
    };
    Tooltip.DEFAULTS = {
        animation: true,
        placement: "top",
        selector: false,
        template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: false,
        container: false
    };
    Tooltip.prototype.init = function(type, element, options) {
        this.enabled = true;
        this.type = type;
        this.$element = $(element);
        this.options = this.getOptions(options);
        var triggers = this.options.trigger.split(" ");
        for (var i = triggers.length; i--; ) {
            var trigger = triggers[i];
            if (trigger == "click") {
                this.$element.on("click." + this.type, this.options.selector, $.proxy(this.toggle, this));
            } else if (trigger != "manual") {
                var eventIn = trigger == "hover" ? "mouseenter" : "focus";
                var eventOut = trigger == "hover" ? "mouseleave" : "blur";
                this.$element.on(eventIn + "." + this.type, this.options.selector, $.proxy(this.enter, this));
                this.$element.on(eventOut + "." + this.type, this.options.selector, $.proxy(this.leave, this));
            }
        }
        this.options.selector ? this._options = $.extend({}, this.options, {
            trigger: "manual",
            selector: ""
        }) : this.fixTitle();
    };
    Tooltip.prototype.getDefaults = function() {
        return Tooltip.DEFAULTS;
    };
    Tooltip.prototype.getOptions = function(options) {
        options = $.extend({}, this.getDefaults(), this.$element.data(), options);
        if (options.delay && typeof options.delay == "number") {
            options.delay = {
                show: options.delay,
                hide: options.delay
            };
        }
        return options;
    };
    Tooltip.prototype.getDelegateOptions = function() {
        var options = {};
        var defaults = this.getDefaults();
        this._options && $.each(this._options, function(key, value) {
            if (defaults[key] != value) options[key] = value;
        });
        return options;
    };
    Tooltip.prototype.enter = function(obj) {
        var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        clearTimeout(self.timeout);
        self.hoverState = "in";
        if (!self.options.delay || !self.options.delay.show) return self.show();
        self.timeout = setTimeout(function() {
            if (self.hoverState == "in") self.show();
        }, self.options.delay.show);
    };
    Tooltip.prototype.leave = function(obj) {
        var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        clearTimeout(self.timeout);
        self.hoverState = "out";
        if (!self.options.delay || !self.options.delay.hide) return self.hide();
        self.timeout = setTimeout(function() {
            if (self.hoverState == "out") self.hide();
        }, self.options.delay.hide);
    };
    Tooltip.prototype.show = function() {
        var e = $.Event("show.bs." + this.type);
        if (this.hasContent() && this.enabled) {
            this.$element.trigger(e);
            if (e.isDefaultPrevented()) return;
            var $tip = this.tip();
            this.setContent();
            if (this.options.animation) $tip.addClass("fade");
            var placement = typeof this.options.placement == "function" ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
            var autoToken = /\s?auto?\s?/i;
            var autoPlace = autoToken.test(placement);
            if (autoPlace) placement = placement.replace(autoToken, "") || "top";
            $tip.detach().css({
                top: 0,
                left: 0,
                display: "block"
            }).addClass(placement);
            this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
            var pos = this.getPosition();
            var actualWidth = $tip[0].offsetWidth;
            var actualHeight = $tip[0].offsetHeight;
            if (autoPlace) {
                var $parent = this.$element.parent();
                var orgPlacement = placement;
                var docScroll = document.documentElement.scrollTop || document.body.scrollTop;
                var parentWidth = this.options.container == "body" ? window.innerWidth : $parent.outerWidth();
                var parentHeight = this.options.container == "body" ? window.innerHeight : $parent.outerHeight();
                var parentLeft = this.options.container == "body" ? 0 : $parent.offset().left;
                placement = placement == "bottom" && pos.top + pos.height + actualHeight - docScroll > parentHeight ? "top" : placement == "top" && pos.top - docScroll - actualHeight < 0 ? "bottom" : placement == "right" && pos.right + actualWidth > parentWidth ? "left" : placement == "left" && pos.left - actualWidth < parentLeft ? "right" : placement;
                $tip.removeClass(orgPlacement).addClass(placement);
            }
            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
            this.applyPlacement(calculatedOffset, placement);
            this.$element.trigger("shown.bs." + this.type);
        }
    };
    Tooltip.prototype.applyPlacement = function(offset, placement) {
        var replace;
        var $tip = this.tip();
        var width = $tip[0].offsetWidth;
        var height = $tip[0].offsetHeight;
        var marginTop = parseInt($tip.css("margin-top"), 10);
        var marginLeft = parseInt($tip.css("margin-left"), 10);
        if (isNaN(marginTop)) marginTop = 0;
        if (isNaN(marginLeft)) marginLeft = 0;
        offset.top = offset.top + marginTop;
        offset.left = offset.left + marginLeft;
        $tip.offset(offset).addClass("in");
        var actualWidth = $tip[0].offsetWidth;
        var actualHeight = $tip[0].offsetHeight;
        if (placement == "top" && actualHeight != height) {
            replace = true;
            offset.top = offset.top + height - actualHeight;
        }
        if (/bottom|top/.test(placement)) {
            var delta = 0;
            if (offset.left < 0) {
                delta = offset.left * -2;
                offset.left = 0;
                $tip.offset(offset);
                actualWidth = $tip[0].offsetWidth;
                actualHeight = $tip[0].offsetHeight;
            }
            this.replaceArrow(delta - width + actualWidth, actualWidth, "left");
        } else {
            this.replaceArrow(actualHeight - height, actualHeight, "top");
        }
        if (replace) $tip.offset(offset);
    };
    Tooltip.prototype.replaceArrow = function(delta, dimension, position) {
        this.arrow().css(position, delta ? 50 * (1 - delta / dimension) + "%" : "");
    };
    Tooltip.prototype.setContent = function() {
        var $tip = this.tip();
        var title = this.getTitle();
        $tip.find(".tooltip-inner")[this.options.html ? "html" : "text"](title);
        $tip.removeClass("fade in top bottom left right");
    };
    Tooltip.prototype.hide = function() {
        var that = this;
        var $tip = this.tip();
        var e = $.Event("hide.bs." + this.type);
        function complete() {
            if (that.hoverState != "in") $tip.detach();
        }
        this.$element.trigger(e);
        if (e.isDefaultPrevented()) return;
        $tip.removeClass("in");
        $.support.transition && this.$tip.hasClass("fade") ? $tip.one($.support.transition.end, complete).emulateTransitionEnd(150) : complete();
        this.$element.trigger("hidden.bs." + this.type);
        return this;
    };
    Tooltip.prototype.fixTitle = function() {
        var $e = this.$element;
        if ($e.attr("title") || typeof $e.attr("data-original-title") != "string") {
            $e.attr("data-original-title", $e.attr("title") || "").attr("title", "");
        }
    };
    Tooltip.prototype.hasContent = function() {
        return this.getTitle();
    };
    Tooltip.prototype.getPosition = function() {
        var el = this.$element[0];
        return $.extend({}, typeof el.getBoundingClientRect == "function" ? el.getBoundingClientRect() : {
            width: el.offsetWidth,
            height: el.offsetHeight
        }, this.$element.offset());
    };
    Tooltip.prototype.getCalculatedOffset = function(placement, pos, actualWidth, actualHeight) {
        return placement == "bottom" ? {
            top: pos.top + pos.height,
            left: pos.left + pos.width / 2 - actualWidth / 2
        } : placement == "top" ? {
            top: pos.top - actualHeight,
            left: pos.left + pos.width / 2 - actualWidth / 2
        } : placement == "left" ? {
            top: pos.top + pos.height / 2 - actualHeight / 2,
            left: pos.left - actualWidth
        } : {
            top: pos.top + pos.height / 2 - actualHeight / 2,
            left: pos.left + pos.width
        };
    };
    Tooltip.prototype.getTitle = function() {
        var title;
        var $e = this.$element;
        var o = this.options;
        title = $e.attr("data-original-title") || (typeof o.title == "function" ? o.title.call($e[0]) : o.title);
        return title;
    };
    Tooltip.prototype.tip = function() {
        return this.$tip = this.$tip || $(this.options.template);
    };
    Tooltip.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow");
    };
    Tooltip.prototype.validate = function() {
        if (!this.$element[0].parentNode) {
            this.hide();
            this.$element = null;
            this.options = null;
        }
    };
    Tooltip.prototype.enable = function() {
        this.enabled = true;
    };
    Tooltip.prototype.disable = function() {
        this.enabled = false;
    };
    Tooltip.prototype.toggleEnabled = function() {
        this.enabled = !this.enabled;
    };
    Tooltip.prototype.toggle = function(e) {
        var self = e ? $(e.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type) : this;
        self.tip().hasClass("in") ? self.leave(self) : self.enter(self);
    };
    Tooltip.prototype.destroy = function() {
        this.hide().$element.off("." + this.type).removeData("bs." + this.type);
    };
    var old = $.fn.tooltip;
    $.fn.tooltip = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.tooltip");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.tooltip", data = new Tooltip(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.tooltip.Constructor = Tooltip;
    $.fn.tooltip.noConflict = function() {
        $.fn.tooltip = old;
        return this;
    };
}(jQuery);

+function($) {
    "use strict";
    var Popover = function(element, options) {
        this.init("popover", element, options);
    };
    if (!$.fn.tooltip) throw new Error("Popover requires tooltip.js");
    Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
    });
    Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);
    Popover.prototype.constructor = Popover;
    Popover.prototype.getDefaults = function() {
        return Popover.DEFAULTS;
    };
    Popover.prototype.setContent = function() {
        var $tip = this.tip();
        var title = this.getTitle();
        var content = this.getContent();
        $tip.find(".popover-title")[this.options.html ? "html" : "text"](title);
        $tip.find(".popover-content")[this.options.html ? "html" : "text"](content);
        $tip.removeClass("fade top bottom left right in");
        if (!$tip.find(".popover-title").html()) $tip.find(".popover-title").hide();
    };
    Popover.prototype.hasContent = function() {
        return this.getTitle() || this.getContent();
    };
    Popover.prototype.getContent = function() {
        var $e = this.$element;
        var o = this.options;
        return $e.attr("data-content") || (typeof o.content == "function" ? o.content.call($e[0]) : o.content);
    };
    Popover.prototype.arrow = function() {
        return this.$arrow = this.$arrow || this.tip().find(".arrow");
    };
    Popover.prototype.tip = function() {
        if (!this.$tip) this.$tip = $(this.options.template);
        return this.$tip;
    };
    var old = $.fn.popover;
    $.fn.popover = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.popover");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.popover", data = new Popover(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.popover.Constructor = Popover;
    $.fn.popover.noConflict = function() {
        $.fn.popover = old;
        return this;
    };
}(jQuery);

+function($) {
    "use strict";
    function ScrollSpy(element, options) {
        var href;
        var process = $.proxy(this.process, this);
        this.$element = $(element).is("body") ? $(window) : $(element);
        this.$body = $("body");
        this.$scrollElement = this.$element.on("scroll.bs.scroll-spy.data-api", process);
        this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
        this.selector = (this.options.target || (href = $(element).attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "") || "") + " .nav li > a";
        this.offsets = $([]);
        this.targets = $([]);
        this.activeTarget = null;
        this.refresh();
        this.process();
    }
    ScrollSpy.DEFAULTS = {
        offset: 10
    };
    ScrollSpy.prototype.refresh = function() {
        var offsetMethod = this.$element[0] == window ? "offset" : "position";
        this.offsets = $([]);
        this.targets = $([]);
        var self = this;
        var $targets = this.$body.find(this.selector).map(function() {
            var $el = $(this);
            var href = $el.data("target") || $el.attr("href");
            var $href = /^#\w/.test(href) && $(href);
            return $href && $href.length && [ [ $href[offsetMethod]().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href ] ] || null;
        }).sort(function(a, b) {
            return a[0] - b[0];
        }).each(function() {
            self.offsets.push(this[0]);
            self.targets.push(this[1]);
        });
    };
    ScrollSpy.prototype.process = function() {
        var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
        var scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight;
        var maxScroll = scrollHeight - this.$scrollElement.height();
        var offsets = this.offsets;
        var targets = this.targets;
        var activeTarget = this.activeTarget;
        var i;
        if (scrollTop >= maxScroll) {
            return activeTarget != (i = targets.last()[0]) && this.activate(i);
        }
        for (i = offsets.length; i--; ) {
            activeTarget != targets[i] && scrollTop >= offsets[i] && (!offsets[i + 1] || scrollTop <= offsets[i + 1]) && this.activate(targets[i]);
        }
    };
    ScrollSpy.prototype.activate = function(target) {
        this.activeTarget = target;
        $(this.selector).parents(".active").removeClass("active");
        var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
        var active = $(selector).parents("li").addClass("active");
        if (active.parent(".dropdown-menu").length) {
            active = active.closest("li.dropdown").addClass("active");
        }
        active.trigger("activate");
    };
    var old = $.fn.scrollspy;
    $.fn.scrollspy = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.scrollspy");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.scrollspy", data = new ScrollSpy(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.scrollspy.Constructor = ScrollSpy;
    $.fn.scrollspy.noConflict = function() {
        $.fn.scrollspy = old;
        return this;
    };
    $(window).on("load", function() {
        $('[data-spy="scroll"]').each(function() {
            var $spy = $(this);
            $spy.scrollspy($spy.data());
        });
    });
}(jQuery);

+function($) {
    "use strict";
    var Tab = function(element) {
        this.element = $(element);
    };
    Tab.prototype.show = function() {
        var $this = this.element;
        var $ul = $this.closest("ul:not(.dropdown-menu)");
        var selector = $this.data("target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
        }
        if ($this.parent("li").hasClass("active")) return;
        var previous = $ul.find(".active:last a")[0];
        var e = $.Event("show.bs.tab", {
            relatedTarget: previous
        });
        $this.trigger(e);
        if (e.isDefaultPrevented()) return;
        var $target = $(selector);
        this.activate($this.parent("li"), $ul);
        this.activate($target, $target.parent(), function() {
            $this.trigger({
                type: "shown.bs.tab",
                relatedTarget: previous
            });
        });
    };
    Tab.prototype.activate = function(element, container, callback) {
        var $active = container.find("> .active");
        var transition = callback && $.support.transition && $active.hasClass("fade");
        function next() {
            $active.removeClass("active").find("> .dropdown-menu > .active").removeClass("active");
            element.addClass("active");
            if (transition) {
                element[0].offsetWidth;
                element.addClass("in");
            } else {
                element.removeClass("fade");
            }
            if (element.parent(".dropdown-menu")) {
                element.closest("li.dropdown").addClass("active");
            }
            callback && callback();
        }
        transition ? $active.one($.support.transition.end, next).emulateTransitionEnd(150) : next();
        $active.removeClass("in");
    };
    var old = $.fn.tab;
    $.fn.tab = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.tab");
            if (!data) $this.data("bs.tab", data = new Tab(this));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.tab.Constructor = Tab;
    $.fn.tab.noConflict = function() {
        $.fn.tab = old;
        return this;
    };
    $(document).on("click.bs.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"]', function(e) {
        e.preventDefault();
        $(this).tab("show");
    });
}(jQuery);

+function($) {
    "use strict";
    var Affix = function(element, options) {
        this.options = $.extend({}, Affix.DEFAULTS, options);
        this.$window = $(window).on("scroll.bs.affix.data-api", $.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", $.proxy(this.checkPositionWithEventLoop, this));
        this.$element = $(element);
        this.affixed = this.unpin = null;
        this.checkPosition();
    };
    Affix.RESET = "affix affix-top affix-bottom";
    Affix.DEFAULTS = {
        offset: 0
    };
    Affix.prototype.checkPositionWithEventLoop = function() {
        setTimeout($.proxy(this.checkPosition, this), 1);
    };
    Affix.prototype.checkPosition = function() {
        if (!this.$element.is(":visible")) return;
        var scrollHeight = $(document).height();
        var scrollTop = this.$window.scrollTop();
        var position = this.$element.offset();
        var offset = this.options.offset;
        var offsetTop = offset.top;
        var offsetBottom = offset.bottom;
        if (typeof offset != "object") offsetBottom = offsetTop = offset;
        if (typeof offsetTop == "function") offsetTop = offset.top();
        if (typeof offsetBottom == "function") offsetBottom = offset.bottom();
        var affix = this.unpin != null && scrollTop + this.unpin <= position.top ? false : offsetBottom != null && position.top + this.$element.height() >= scrollHeight - offsetBottom ? "bottom" : offsetTop != null && scrollTop <= offsetTop ? "top" : false;
        if (this.affixed === affix) return;
        if (this.unpin) this.$element.css("top", "");
        this.affixed = affix;
        this.unpin = affix == "bottom" ? position.top - scrollTop : null;
        this.$element.removeClass(Affix.RESET).addClass("affix" + (affix ? "-" + affix : ""));
        if (affix == "bottom") {
            this.$element.offset({
                top: document.body.offsetHeight - offsetBottom - this.$element.height()
            });
        }
    };
    var old = $.fn.affix;
    $.fn.affix = function(option) {
        return this.each(function() {
            var $this = $(this);
            var data = $this.data("bs.affix");
            var options = typeof option == "object" && option;
            if (!data) $this.data("bs.affix", data = new Affix(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.affix.Constructor = Affix;
    $.fn.affix.noConflict = function() {
        $.fn.affix = old;
        return this;
    };
    $(window).on("load", function() {
        $('[data-spy="affix"]').each(function() {
            var $spy = $(this);
            var data = $spy.data();
            data.offset = data.offset || {};
            if (data.offsetBottom) data.offset.bottom = data.offsetBottom;
            if (data.offsetTop) data.offset.top = data.offsetTop;
            $spy.affix(data);
        });
    });
}(jQuery);

(function(window, angular) {
    "use strict";
    var $resourceMinErr = angular.$$minErr("$resource");
    var MEMBER_NAME_REGEX = /^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;
    function isValidDottedPath(path) {
        return path != null && path !== "" && path !== "hasOwnProperty" && MEMBER_NAME_REGEX.test("." + path);
    }
    function lookupDottedPath(obj, path) {
        if (!isValidDottedPath(path)) {
            throw $resourceMinErr("badmember", 'Dotted member path "@{0}" is invalid.', path);
        }
        var keys = path.split(".");
        for (var i = 0, ii = keys.length; i < ii && angular.isDefined(obj); i++) {
            var key = keys[i];
            obj = obj !== null ? obj[key] : undefined;
        }
        return obj;
    }
    function shallowClearAndCopy(src, dst) {
        dst = dst || {};
        angular.forEach(dst, function(value, key) {
            delete dst[key];
        });
        for (var key in src) {
            if (src.hasOwnProperty(key) && !(key.charAt(0) === "$" && key.charAt(1) === "$")) {
                dst[key] = src[key];
            }
        }
        return dst;
    }
    angular.module("ngResource", [ "ng" ]).info({
        angularVersion: "1.8.3"
    }).provider("$resource", function ResourceProvider() {
        var PROTOCOL_AND_IPV6_REGEX = /^https?:\/\/\[[^\]]*][^/]*/;
        var provider = this;
        this.defaults = {
            stripTrailingSlashes: true,
            cancellable: false,
            actions: {
                get: {
                    method: "GET"
                },
                save: {
                    method: "POST"
                },
                query: {
                    method: "GET",
                    isArray: true
                },
                remove: {
                    method: "DELETE"
                },
                delete: {
                    method: "DELETE"
                }
            }
        };
        this.$get = [ "$http", "$log", "$q", "$timeout", function($http, $log, $q, $timeout) {
            var noop = angular.noop, forEach = angular.forEach, extend = angular.extend, copy = angular.copy, isArray = angular.isArray, isDefined = angular.isDefined, isFunction = angular.isFunction, isNumber = angular.isNumber, encodeUriQuery = angular.$$encodeUriQuery, encodeUriSegment = angular.$$encodeUriSegment;
            function Route(template, defaults) {
                this.template = template;
                this.defaults = extend({}, provider.defaults, defaults);
                this.urlParams = {};
            }
            Route.prototype = {
                setUrlParams: function(config, params, actionUrl) {
                    var self = this, url = actionUrl || self.template, val, encodedVal, protocolAndIpv6 = "";
                    var urlParams = self.urlParams = Object.create(null);
                    forEach(url.split(/\W/), function(param) {
                        if (param === "hasOwnProperty") {
                            throw $resourceMinErr("badname", "hasOwnProperty is not a valid parameter name.");
                        }
                        if (!new RegExp("^\\d+$").test(param) && param && new RegExp("(^|[^\\\\]):" + param + "(\\W|$)").test(url)) {
                            urlParams[param] = {
                                isQueryParamValue: new RegExp("\\?.*=:" + param + "(?:\\W|$)").test(url)
                            };
                        }
                    });
                    url = url.replace(/\\:/g, ":");
                    url = url.replace(PROTOCOL_AND_IPV6_REGEX, function(match) {
                        protocolAndIpv6 = match;
                        return "";
                    });
                    params = params || {};
                    forEach(self.urlParams, function(paramInfo, urlParam) {
                        val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];
                        if (isDefined(val) && val !== null) {
                            if (paramInfo.isQueryParamValue) {
                                encodedVal = encodeUriQuery(val, true);
                            } else {
                                encodedVal = encodeUriSegment(val);
                            }
                            url = url.replace(new RegExp(":" + urlParam + "(\\W|$)", "g"), function(match, p1) {
                                return encodedVal + p1;
                            });
                        } else {
                            url = url.replace(new RegExp("(/?):" + urlParam + "(\\W|$)", "g"), function(match, leadingSlashes, tail) {
                                if (tail.charAt(0) === "/") {
                                    return tail;
                                } else {
                                    return leadingSlashes + tail;
                                }
                            });
                        }
                    });
                    if (self.defaults.stripTrailingSlashes) {
                        url = url.replace(/\/+$/, "") || "/";
                    }
                    url = url.replace(/\/\.(?=\w+($|\?))/, ".");
                    config.url = protocolAndIpv6 + url.replace(/\/(\\|%5C)\./, "/.");
                    forEach(params, function(value, key) {
                        if (!self.urlParams[key]) {
                            config.params = config.params || {};
                            config.params[key] = value;
                        }
                    });
                }
            };
            function resourceFactory(url, paramDefaults, actions, options) {
                var route = new Route(url, options);
                actions = extend({}, provider.defaults.actions, actions);
                function extractParams(data, actionParams) {
                    var ids = {};
                    actionParams = extend({}, paramDefaults, actionParams);
                    forEach(actionParams, function(value, key) {
                        if (isFunction(value)) {
                            value = value(data);
                        }
                        ids[key] = value && value.charAt && value.charAt(0) === "@" ? lookupDottedPath(data, value.substr(1)) : value;
                    });
                    return ids;
                }
                function defaultResponseInterceptor(response) {
                    return response.resource;
                }
                function Resource(value) {
                    shallowClearAndCopy(value || {}, this);
                }
                Resource.prototype.toJSON = function() {
                    var data = extend({}, this);
                    delete data.$promise;
                    delete data.$resolved;
                    delete data.$cancelRequest;
                    return data;
                };
                forEach(actions, function(action, name) {
                    var hasBody = action.hasBody === true || action.hasBody !== false && /^(POST|PUT|PATCH)$/i.test(action.method);
                    var numericTimeout = action.timeout;
                    var cancellable = isDefined(action.cancellable) ? action.cancellable : route.defaults.cancellable;
                    if (numericTimeout && !isNumber(numericTimeout)) {
                        $log.debug("ngResource:\n" + "  Only numeric values are allowed as `timeout`.\n" + "  Promises are not supported in $resource, because the same value would " + "be used for multiple requests. If you are looking for a way to cancel " + "requests, you should use the `cancellable` option.");
                        delete action.timeout;
                        numericTimeout = null;
                    }
                    Resource[name] = function(a1, a2, a3, a4) {
                        var params = {}, data, onSuccess, onError;
                        switch (arguments.length) {
                          case 4:
                            onError = a4;
                            onSuccess = a3;

                          case 3:
                          case 2:
                            if (isFunction(a2)) {
                                if (isFunction(a1)) {
                                    onSuccess = a1;
                                    onError = a2;
                                    break;
                                }
                                onSuccess = a2;
                                onError = a3;
                            } else {
                                params = a1;
                                data = a2;
                                onSuccess = a3;
                                break;
                            }

                          case 1:
                            if (isFunction(a1)) onSuccess = a1; else if (hasBody) data = a1; else params = a1;
                            break;

                          case 0:
                            break;

                          default:
                            throw $resourceMinErr("badargs", "Expected up to 4 arguments [params, data, success, error], got {0} arguments", arguments.length);
                        }
                        var isInstanceCall = this instanceof Resource;
                        var value = isInstanceCall ? data : action.isArray ? [] : new Resource(data);
                        var httpConfig = {};
                        var requestInterceptor = action.interceptor && action.interceptor.request || undefined;
                        var requestErrorInterceptor = action.interceptor && action.interceptor.requestError || undefined;
                        var responseInterceptor = action.interceptor && action.interceptor.response || defaultResponseInterceptor;
                        var responseErrorInterceptor = action.interceptor && action.interceptor.responseError || $q.reject;
                        var successCallback = onSuccess ? function(val) {
                            onSuccess(val, response.headers, response.status, response.statusText);
                        } : undefined;
                        var errorCallback = onError || undefined;
                        var timeoutDeferred;
                        var numericTimeoutPromise;
                        var response;
                        forEach(action, function(value, key) {
                            switch (key) {
                              default:
                                httpConfig[key] = copy(value);
                                break;

                              case "params":
                              case "isArray":
                              case "interceptor":
                              case "cancellable":
                                break;
                            }
                        });
                        if (!isInstanceCall && cancellable) {
                            timeoutDeferred = $q.defer();
                            httpConfig.timeout = timeoutDeferred.promise;
                            if (numericTimeout) {
                                numericTimeoutPromise = $timeout(timeoutDeferred.resolve, numericTimeout);
                            }
                        }
                        if (hasBody) httpConfig.data = data;
                        route.setUrlParams(httpConfig, extend({}, extractParams(data, action.params || {}), params), action.url);
                        var promise = $q.resolve(httpConfig).then(requestInterceptor).catch(requestErrorInterceptor).then($http);
                        promise = promise.then(function(resp) {
                            var data = resp.data;
                            if (data) {
                                if (isArray(data) !== !!action.isArray) {
                                    throw $resourceMinErr("badcfg", "Error in resource configuration for action `{0}`. Expected response to " + "contain an {1} but got an {2} (Request: {3} {4})", name, action.isArray ? "array" : "object", isArray(data) ? "array" : "object", httpConfig.method, httpConfig.url);
                                }
                                if (action.isArray) {
                                    value.length = 0;
                                    forEach(data, function(item) {
                                        if (typeof item === "object") {
                                            value.push(new Resource(item));
                                        } else {
                                            value.push(item);
                                        }
                                    });
                                } else {
                                    var promise = value.$promise;
                                    shallowClearAndCopy(data, value);
                                    value.$promise = promise;
                                }
                            }
                            resp.resource = value;
                            response = resp;
                            return responseInterceptor(resp);
                        }, function(rejectionOrResponse) {
                            rejectionOrResponse.resource = value;
                            response = rejectionOrResponse;
                            return responseErrorInterceptor(rejectionOrResponse);
                        });
                        promise = promise["finally"](function() {
                            value.$resolved = true;
                            if (!isInstanceCall && cancellable) {
                                value.$cancelRequest = noop;
                                $timeout.cancel(numericTimeoutPromise);
                                timeoutDeferred = numericTimeoutPromise = httpConfig.timeout = null;
                            }
                        });
                        promise.then(successCallback, errorCallback);
                        if (!isInstanceCall) {
                            value.$promise = promise;
                            value.$resolved = false;
                            if (cancellable) value.$cancelRequest = cancelRequest;
                            return value;
                        }
                        return promise;
                        function cancelRequest(value) {
                            promise.catch(noop);
                            if (timeoutDeferred !== null) {
                                timeoutDeferred.resolve(value);
                            }
                        }
                    };
                    Resource.prototype["$" + name] = function(params, success, error) {
                        if (isFunction(params)) {
                            error = success;
                            success = params;
                            params = {};
                        }
                        var result = Resource[name].call(this, params, this, success, error);
                        return result.$promise || result;
                    };
                });
                return Resource;
            }
            return resourceFactory;
        } ];
    });
})(window, window.angular);

(function(window, angular, undefined) {
    "use strict";
    angular.module("ngCookies", [ "ng" ]).provider("$cookies", [ function $CookiesProvider() {
        var defaults = this.defaults = {};
        function calcOptions(options) {
            return options ? angular.extend({}, defaults, options) : defaults;
        }
        this.$get = [ "$$cookieReader", "$$cookieWriter", function($$cookieReader, $$cookieWriter) {
            return {
                get: function(key) {
                    return $$cookieReader()[key];
                },
                getObject: function(key) {
                    var value = this.get(key);
                    return value ? angular.fromJson(value) : value;
                },
                getAll: function() {
                    return $$cookieReader();
                },
                put: function(key, value, options) {
                    $$cookieWriter(key, value, calcOptions(options));
                },
                putObject: function(key, value, options) {
                    this.put(key, angular.toJson(value), options);
                },
                remove: function(key, options) {
                    $$cookieWriter(key, undefined, calcOptions(options));
                }
            };
        } ];
    } ]);
    angular.module("ngCookies").factory("$cookieStore", [ "$cookies", function($cookies) {
        return {
            get: function(key) {
                return $cookies.getObject(key);
            },
            put: function(key, value) {
                $cookies.putObject(key, value);
            },
            remove: function(key) {
                $cookies.remove(key);
            }
        };
    } ]);
    function $$CookieWriter($document, $log, $browser) {
        var cookiePath = $browser.baseHref();
        var rawDocument = $document[0];
        function buildCookieString(name, value, options) {
            var path, expires;
            options = options || {};
            expires = options.expires;
            path = angular.isDefined(options.path) ? options.path : cookiePath;
            if (angular.isUndefined(value)) {
                expires = "Thu, 01 Jan 1970 00:00:00 GMT";
                value = "";
            }
            if (angular.isString(expires)) {
                expires = new Date(expires);
            }
            var str = encodeURIComponent(name) + "=" + encodeURIComponent(value);
            str += path ? ";path=" + path : "";
            str += options.domain ? ";domain=" + options.domain : "";
            str += expires ? ";expires=" + expires.toUTCString() : "";
            str += options.secure ? ";secure" : "";
            var cookieLength = str.length + 1;
            if (cookieLength > 4096) {
                $log.warn("Cookie '" + name + "' possibly not set or overflowed because it was too large (" + cookieLength + " > 4096 bytes)!");
            }
            return str;
        }
        return function(name, value, options) {
            rawDocument.cookie = buildCookieString(name, value, options);
        };
    }
    $$CookieWriter.$inject = [ "$document", "$log", "$browser" ];
    angular.module("ngCookies").provider("$$cookieWriter", function $$CookieWriterProvider() {
        this.$get = $$CookieWriter;
    });
})(window, window.angular);

(function(window, angular) {
    "use strict";
    var $sanitizeMinErr = angular.$$minErr("$sanitize");
    var bind;
    var extend;
    var forEach;
    var isArray;
    var isDefined;
    var lowercase;
    var noop;
    var nodeContains;
    var htmlParser;
    var htmlSanitizeWriter;
    function $SanitizeProvider() {
        var hasBeenInstantiated = false;
        var svgEnabled = false;
        this.$get = [ "$$sanitizeUri", function($$sanitizeUri) {
            hasBeenInstantiated = true;
            if (svgEnabled) {
                extend(validElements, svgElements);
            }
            return function(html) {
                var buf = [];
                htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {
                    return !/^unsafe:/.test($$sanitizeUri(uri, isImage));
                }));
                return buf.join("");
            };
        } ];
        this.enableSvg = function(enableSvg) {
            if (isDefined(enableSvg)) {
                svgEnabled = enableSvg;
                return this;
            } else {
                return svgEnabled;
            }
        };
        this.addValidElements = function(elements) {
            if (!hasBeenInstantiated) {
                if (isArray(elements)) {
                    elements = {
                        htmlElements: elements
                    };
                }
                addElementsTo(svgElements, elements.svgElements);
                addElementsTo(voidElements, elements.htmlVoidElements);
                addElementsTo(validElements, elements.htmlVoidElements);
                addElementsTo(validElements, elements.htmlElements);
            }
            return this;
        };
        this.addValidAttrs = function(attrs) {
            if (!hasBeenInstantiated) {
                extend(validAttrs, arrayToMap(attrs, true));
            }
            return this;
        };
        bind = angular.bind;
        extend = angular.extend;
        forEach = angular.forEach;
        isArray = angular.isArray;
        isDefined = angular.isDefined;
        lowercase = angular.$$lowercase;
        noop = angular.noop;
        htmlParser = htmlParserImpl;
        htmlSanitizeWriter = htmlSanitizeWriterImpl;
        nodeContains = window.Node.prototype.contains || function(arg) {
            return !!(this.compareDocumentPosition(arg) & 16);
        };
        var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g, NON_ALPHANUMERIC_REGEXP = /([^#-~ |!])/g;
        var voidElements = stringToMap("area,br,col,hr,img,wbr");
        var optionalEndTagBlockElements = stringToMap("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"), optionalEndTagInlineElements = stringToMap("rp,rt"), optionalEndTagElements = extend({}, optionalEndTagInlineElements, optionalEndTagBlockElements);
        var blockElements = extend({}, optionalEndTagBlockElements, stringToMap("address,article," + "aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5," + "h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul"));
        var inlineElements = extend({}, optionalEndTagInlineElements, stringToMap("a,abbr,acronym,b," + "bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s," + "samp,small,span,strike,strong,sub,sup,time,tt,u,var"));
        var svgElements = stringToMap("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph," + "hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline," + "radialGradient,rect,stop,svg,switch,text,title,tspan");
        var blockedElements = stringToMap("script,style");
        var validElements = extend({}, voidElements, blockElements, inlineElements, optionalEndTagElements);
        var uriAttrs = stringToMap("background,cite,href,longdesc,src,xlink:href,xml:base");
        var htmlAttrs = stringToMap("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear," + "color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace," + "ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules," + "scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type," + "valign,value,vspace,width");
        var svgAttrs = stringToMap("accent-height,accumulate,additive,alphabetic,arabic-form,ascent," + "baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content," + "cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch," + "font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging," + "height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang," + "marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical," + "max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1," + "path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur," + "requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color," + "stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray," + "stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity," + "stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position," + "underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility," + "width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title," + "xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan", true);
        var validAttrs = extend({}, uriAttrs, svgAttrs, htmlAttrs);
        function stringToMap(str, lowercaseKeys) {
            return arrayToMap(str.split(","), lowercaseKeys);
        }
        function arrayToMap(items, lowercaseKeys) {
            var obj = {}, i;
            for (i = 0; i < items.length; i++) {
                obj[lowercaseKeys ? lowercase(items[i]) : items[i]] = true;
            }
            return obj;
        }
        function addElementsTo(elementsMap, newElements) {
            if (newElements && newElements.length) {
                extend(elementsMap, arrayToMap(newElements));
            }
        }
        var getInertBodyElement = function(window, document) {
            if (isDOMParserAvailable()) {
                return getInertBodyElement_DOMParser;
            }
            if (!document || !document.implementation) {
                throw $sanitizeMinErr("noinert", "Can't create an inert html document");
            }
            var inertDocument = document.implementation.createHTMLDocument("inert");
            var inertBodyElement = (inertDocument.documentElement || inertDocument.getDocumentElement()).querySelector("body");
            return getInertBodyElement_InertDocument;
            function isDOMParserAvailable() {
                try {
                    return !!getInertBodyElement_DOMParser("");
                } catch (e) {
                    return false;
                }
            }
            function getInertBodyElement_DOMParser(html) {
                html = "<remove></remove>" + html;
                try {
                    var body = new window.DOMParser().parseFromString(html, "text/html").body;
                    body.firstChild.remove();
                    return body;
                } catch (e) {
                    return undefined;
                }
            }
            function getInertBodyElement_InertDocument(html) {
                inertBodyElement.innerHTML = html;
                if (document.documentMode) {
                    stripCustomNsAttrs(inertBodyElement);
                }
                return inertBodyElement;
            }
        }(window, window.document);
        function htmlParserImpl(html, handler) {
            if (html === null || html === undefined) {
                html = "";
            } else if (typeof html !== "string") {
                html = "" + html;
            }
            var inertBodyElement = getInertBodyElement(html);
            if (!inertBodyElement) return "";
            var mXSSAttempts = 5;
            do {
                if (mXSSAttempts === 0) {
                    throw $sanitizeMinErr("uinput", "Failed to sanitize html because the input is unstable");
                }
                mXSSAttempts--;
                html = inertBodyElement.innerHTML;
                inertBodyElement = getInertBodyElement(html);
            } while (html !== inertBodyElement.innerHTML);
            var node = inertBodyElement.firstChild;
            while (node) {
                switch (node.nodeType) {
                  case 1:
                    handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));
                    break;

                  case 3:
                    handler.chars(node.textContent);
                    break;
                }
                var nextNode;
                if (!(nextNode = node.firstChild)) {
                    if (node.nodeType === 1) {
                        handler.end(node.nodeName.toLowerCase());
                    }
                    nextNode = getNonDescendant("nextSibling", node);
                    if (!nextNode) {
                        while (nextNode == null) {
                            node = getNonDescendant("parentNode", node);
                            if (node === inertBodyElement) break;
                            nextNode = getNonDescendant("nextSibling", node);
                            if (node.nodeType === 1) {
                                handler.end(node.nodeName.toLowerCase());
                            }
                        }
                    }
                }
                node = nextNode;
            }
            while (node = inertBodyElement.firstChild) {
                inertBodyElement.removeChild(node);
            }
        }
        function attrToMap(attrs) {
            var map = {};
            for (var i = 0, ii = attrs.length; i < ii; i++) {
                var attr = attrs[i];
                map[attr.name] = attr.value;
            }
            return map;
        }
        function encodeEntities(value) {
            return value.replace(/&/g, "&amp;").replace(SURROGATE_PAIR_REGEXP, function(value) {
                var hi = value.charCodeAt(0);
                var low = value.charCodeAt(1);
                return "&#" + ((hi - 55296) * 1024 + (low - 56320) + 65536) + ";";
            }).replace(NON_ALPHANUMERIC_REGEXP, function(value) {
                return "&#" + value.charCodeAt(0) + ";";
            }).replace(/</g, "&lt;").replace(/>/g, "&gt;");
        }
        function htmlSanitizeWriterImpl(buf, uriValidator) {
            var ignoreCurrentElement = false;
            var out = bind(buf, buf.push);
            return {
                start: function(tag, attrs) {
                    tag = lowercase(tag);
                    if (!ignoreCurrentElement && blockedElements[tag]) {
                        ignoreCurrentElement = tag;
                    }
                    if (!ignoreCurrentElement && validElements[tag] === true) {
                        out("<");
                        out(tag);
                        forEach(attrs, function(value, key) {
                            var lkey = lowercase(key);
                            var isImage = tag === "img" && lkey === "src" || lkey === "background";
                            if (validAttrs[lkey] === true && (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
                                out(" ");
                                out(key);
                                out('="');
                                out(encodeEntities(value));
                                out('"');
                            }
                        });
                        out(">");
                    }
                },
                end: function(tag) {
                    tag = lowercase(tag);
                    if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {
                        out("</");
                        out(tag);
                        out(">");
                    }
                    if (tag == ignoreCurrentElement) {
                        ignoreCurrentElement = false;
                    }
                },
                chars: function(chars) {
                    if (!ignoreCurrentElement) {
                        out(encodeEntities(chars));
                    }
                }
            };
        }
        function stripCustomNsAttrs(node) {
            while (node) {
                if (node.nodeType === window.Node.ELEMENT_NODE) {
                    var attrs = node.attributes;
                    for (var i = 0, l = attrs.length; i < l; i++) {
                        var attrNode = attrs[i];
                        var attrName = attrNode.name.toLowerCase();
                        if (attrName === "xmlns:ns1" || attrName.lastIndexOf("ns1:", 0) === 0) {
                            node.removeAttributeNode(attrNode);
                            i--;
                            l--;
                        }
                    }
                }
                var nextNode = node.firstChild;
                if (nextNode) {
                    stripCustomNsAttrs(nextNode);
                }
                node = getNonDescendant("nextSibling", node);
            }
        }
        function getNonDescendant(propName, node) {
            var nextNode = node[propName];
            if (nextNode && nodeContains.call(node, nextNode)) {
                throw $sanitizeMinErr("elclob", "Failed to sanitize html because the element is clobbered: {0}", node.outerHTML || node.outerText);
            }
            return nextNode;
        }
    }
    function sanitizeText(chars) {
        var buf = [];
        var writer = htmlSanitizeWriter(buf, noop);
        writer.chars(chars);
        return buf.join("");
    }
    angular.module("ngSanitize", []).provider("$sanitize", $SanitizeProvider).info({
        angularVersion: "1.8.3"
    });
    angular.module("ngSanitize").filter("linky", [ "$sanitize", function($sanitize) {
        var LINKY_URL_REGEXP = /((s?ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i, MAILTO_REGEXP = /^mailto:/i;
        var linkyMinErr = angular.$$minErr("linky");
        var isDefined = angular.isDefined;
        var isFunction = angular.isFunction;
        var isObject = angular.isObject;
        var isString = angular.isString;
        return function(text, target, attributes) {
            if (text == null || text === "") return text;
            if (!isString(text)) throw linkyMinErr("notstring", "Expected string but received: {0}", text);
            var attributesFn = isFunction(attributes) ? attributes : isObject(attributes) ? function getAttributesObject() {
                return attributes;
            } : function getEmptyAttributesObject() {
                return {};
            };
            var match;
            var raw = text;
            var html = [];
            var url;
            var i;
            while (match = raw.match(LINKY_URL_REGEXP)) {
                url = match[0];
                if (!match[2] && !match[4]) {
                    url = (match[3] ? "http://" : "mailto:") + url;
                }
                i = match.index;
                addText(raw.substr(0, i));
                addLink(url, match[0].replace(MAILTO_REGEXP, ""));
                raw = raw.substring(i + match[0].length);
            }
            addText(raw);
            return $sanitize(html.join(""));
            function addText(text) {
                if (!text) {
                    return;
                }
                html.push(sanitizeText(text));
            }
            function addLink(url, text) {
                var key, linkAttributes = attributesFn(url);
                html.push("<a ");
                for (key in linkAttributes) {
                    html.push(key + '="' + linkAttributes[key] + '" ');
                }
                if (isDefined(target) && !("target" in linkAttributes)) {
                    html.push('target="', target, '" ');
                }
                html.push('href="', url.replace(/"/g, "&quot;"), '">');
                addText(text);
                html.push("</a>");
            }
        };
    } ]);
})(window, window.angular);

(function(window, angular) {
    "use strict";
    function shallowCopy(src, dst) {
        if (isArray(src)) {
            dst = dst || [];
            for (var i = 0, ii = src.length; i < ii; i++) {
                dst[i] = src[i];
            }
        } else if (isObject(src)) {
            dst = dst || {};
            for (var key in src) {
                if (!(key.charAt(0) === "$" && key.charAt(1) === "$")) {
                    dst[key] = src[key];
                }
            }
        }
        return dst || src;
    }
    function routeToRegExp(path, opts) {
        var keys = [];
        var pattern = path.replace(/([().])/g, "\\$1").replace(/(\/)?:(\w+)(\*\?|[?*])?/g, function(_, slash, key, option) {
            var optional = option === "?" || option === "*?";
            var star = option === "*" || option === "*?";
            keys.push({
                name: key,
                optional: optional
            });
            slash = slash || "";
            return (optional ? "(?:" + slash : slash + "(?:") + (star ? "(.+?)" : "([^/]+)") + (optional ? "?)?" : ")");
        }).replace(/([/$*])/g, "\\$1");
        if (opts.ignoreTrailingSlashes) {
            pattern = pattern.replace(/\/+$/, "") + "/*";
        }
        return {
            keys: keys,
            regexp: new RegExp("^" + pattern + "(?:[?#]|$)", opts.caseInsensitiveMatch ? "i" : "")
        };
    }
    var isArray;
    var isObject;
    var isDefined;
    var noop;
    var ngRouteModule = angular.module("ngRoute", []).info({
        angularVersion: "1.8.3"
    }).provider("$route", $RouteProvider).run(instantiateRoute);
    var $routeMinErr = angular.$$minErr("ngRoute");
    var isEagerInstantiationEnabled;
    function $RouteProvider() {
        isArray = angular.isArray;
        isObject = angular.isObject;
        isDefined = angular.isDefined;
        noop = angular.noop;
        function inherit(parent, extra) {
            return angular.extend(Object.create(parent), extra);
        }
        var routes = {};
        this.when = function(path, route) {
            var routeCopy = shallowCopy(route);
            if (angular.isUndefined(routeCopy.reloadOnUrl)) {
                routeCopy.reloadOnUrl = true;
            }
            if (angular.isUndefined(routeCopy.reloadOnSearch)) {
                routeCopy.reloadOnSearch = true;
            }
            if (angular.isUndefined(routeCopy.caseInsensitiveMatch)) {
                routeCopy.caseInsensitiveMatch = this.caseInsensitiveMatch;
            }
            routes[path] = angular.extend(routeCopy, {
                originalPath: path
            }, path && routeToRegExp(path, routeCopy));
            if (path) {
                var redirectPath = path[path.length - 1] === "/" ? path.substr(0, path.length - 1) : path + "/";
                routes[redirectPath] = angular.extend({
                    originalPath: path,
                    redirectTo: path
                }, routeToRegExp(redirectPath, routeCopy));
            }
            return this;
        };
        this.caseInsensitiveMatch = false;
        this.otherwise = function(params) {
            if (typeof params === "string") {
                params = {
                    redirectTo: params
                };
            }
            this.when(null, params);
            return this;
        };
        isEagerInstantiationEnabled = true;
        this.eagerInstantiationEnabled = function eagerInstantiationEnabled(enabled) {
            if (isDefined(enabled)) {
                isEagerInstantiationEnabled = enabled;
                return this;
            }
            return isEagerInstantiationEnabled;
        };
        this.$get = [ "$rootScope", "$location", "$routeParams", "$q", "$injector", "$templateRequest", "$sce", "$browser", function($rootScope, $location, $routeParams, $q, $injector, $templateRequest, $sce, $browser) {
            var forceReload = false, preparedRoute, preparedRouteIsUpdateOnly, $route = {
                routes: routes,
                reload: function() {
                    forceReload = true;
                    var fakeLocationEvent = {
                        defaultPrevented: false,
                        preventDefault: function fakePreventDefault() {
                            this.defaultPrevented = true;
                            forceReload = false;
                        }
                    };
                    $rootScope.$evalAsync(function() {
                        prepareRoute(fakeLocationEvent);
                        if (!fakeLocationEvent.defaultPrevented) commitRoute();
                    });
                },
                updateParams: function(newParams) {
                    if (this.current && this.current.$$route) {
                        newParams = angular.extend({}, this.current.params, newParams);
                        $location.path(interpolate(this.current.$$route.originalPath, newParams));
                        $location.search(newParams);
                    } else {
                        throw $routeMinErr("norout", "Tried updating route with no current route");
                    }
                }
            };
            $rootScope.$on("$locationChangeStart", prepareRoute);
            $rootScope.$on("$locationChangeSuccess", commitRoute);
            return $route;
            function switchRouteMatcher(on, route) {
                var keys = route.keys, params = {};
                if (!route.regexp) return null;
                var m = route.regexp.exec(on);
                if (!m) return null;
                for (var i = 1, len = m.length; i < len; ++i) {
                    var key = keys[i - 1];
                    var val = m[i];
                    if (key && val) {
                        params[key.name] = val;
                    }
                }
                return params;
            }
            function prepareRoute($locationEvent) {
                var lastRoute = $route.current;
                preparedRoute = parseRoute();
                preparedRouteIsUpdateOnly = isNavigationUpdateOnly(preparedRoute, lastRoute);
                if (!preparedRouteIsUpdateOnly && (lastRoute || preparedRoute)) {
                    if ($rootScope.$broadcast("$routeChangeStart", preparedRoute, lastRoute).defaultPrevented) {
                        if ($locationEvent) {
                            $locationEvent.preventDefault();
                        }
                    }
                }
            }
            function commitRoute() {
                var lastRoute = $route.current;
                var nextRoute = preparedRoute;
                if (preparedRouteIsUpdateOnly) {
                    lastRoute.params = nextRoute.params;
                    angular.copy(lastRoute.params, $routeParams);
                    $rootScope.$broadcast("$routeUpdate", lastRoute);
                } else if (nextRoute || lastRoute) {
                    forceReload = false;
                    $route.current = nextRoute;
                    var nextRoutePromise = $q.resolve(nextRoute);
                    $browser.$$incOutstandingRequestCount("$route");
                    nextRoutePromise.then(getRedirectionData).then(handlePossibleRedirection).then(function(keepProcessingRoute) {
                        return keepProcessingRoute && nextRoutePromise.then(resolveLocals).then(function(locals) {
                            if (nextRoute === $route.current) {
                                if (nextRoute) {
                                    nextRoute.locals = locals;
                                    angular.copy(nextRoute.params, $routeParams);
                                }
                                $rootScope.$broadcast("$routeChangeSuccess", nextRoute, lastRoute);
                            }
                        });
                    }).catch(function(error) {
                        if (nextRoute === $route.current) {
                            $rootScope.$broadcast("$routeChangeError", nextRoute, lastRoute, error);
                        }
                    }).finally(function() {
                        $browser.$$completeOutstandingRequest(noop, "$route");
                    });
                }
            }
            function getRedirectionData(route) {
                var data = {
                    route: route,
                    hasRedirection: false
                };
                if (route) {
                    if (route.redirectTo) {
                        if (angular.isString(route.redirectTo)) {
                            data.path = interpolate(route.redirectTo, route.params);
                            data.search = route.params;
                            data.hasRedirection = true;
                        } else {
                            var oldPath = $location.path();
                            var oldSearch = $location.search();
                            var newUrl = route.redirectTo(route.pathParams, oldPath, oldSearch);
                            if (angular.isDefined(newUrl)) {
                                data.url = newUrl;
                                data.hasRedirection = true;
                            }
                        }
                    } else if (route.resolveRedirectTo) {
                        return $q.resolve($injector.invoke(route.resolveRedirectTo)).then(function(newUrl) {
                            if (angular.isDefined(newUrl)) {
                                data.url = newUrl;
                                data.hasRedirection = true;
                            }
                            return data;
                        });
                    }
                }
                return data;
            }
            function handlePossibleRedirection(data) {
                var keepProcessingRoute = true;
                if (data.route !== $route.current) {
                    keepProcessingRoute = false;
                } else if (data.hasRedirection) {
                    var oldUrl = $location.url();
                    var newUrl = data.url;
                    if (newUrl) {
                        $location.url(newUrl).replace();
                    } else {
                        newUrl = $location.path(data.path).search(data.search).replace().url();
                    }
                    if (newUrl !== oldUrl) {
                        keepProcessingRoute = false;
                    }
                }
                return keepProcessingRoute;
            }
            function resolveLocals(route) {
                if (route) {
                    var locals = angular.extend({}, route.resolve);
                    angular.forEach(locals, function(value, key) {
                        locals[key] = angular.isString(value) ? $injector.get(value) : $injector.invoke(value, null, null, key);
                    });
                    var template = getTemplateFor(route);
                    if (angular.isDefined(template)) {
                        locals["$template"] = template;
                    }
                    return $q.all(locals);
                }
            }
            function getTemplateFor(route) {
                var template, templateUrl;
                if (angular.isDefined(template = route.template)) {
                    if (angular.isFunction(template)) {
                        template = template(route.params);
                    }
                } else if (angular.isDefined(templateUrl = route.templateUrl)) {
                    if (angular.isFunction(templateUrl)) {
                        templateUrl = templateUrl(route.params);
                    }
                    if (angular.isDefined(templateUrl)) {
                        route.loadedTemplateUrl = $sce.valueOf(templateUrl);
                        template = $templateRequest(templateUrl);
                    }
                }
                return template;
            }
            function parseRoute() {
                var params, match;
                angular.forEach(routes, function(route, path) {
                    if (!match && (params = switchRouteMatcher($location.path(), route))) {
                        match = inherit(route, {
                            params: angular.extend({}, $location.search(), params),
                            pathParams: params
                        });
                        match.$$route = route;
                    }
                });
                return match || routes[null] && inherit(routes[null], {
                    params: {},
                    pathParams: {}
                });
            }
            function isNavigationUpdateOnly(newRoute, oldRoute) {
                return !forceReload && newRoute && oldRoute && newRoute.$$route === oldRoute.$$route && (!newRoute.reloadOnUrl || !newRoute.reloadOnSearch && angular.equals(newRoute.pathParams, oldRoute.pathParams));
            }
            function interpolate(string, params) {
                var result = [];
                angular.forEach((string || "").split(":"), function(segment, i) {
                    if (i === 0) {
                        result.push(segment);
                    } else {
                        var segmentMatch = segment.match(/(\w+)(?:[?*])?(.*)/);
                        var key = segmentMatch[1];
                        result.push(params[key]);
                        result.push(segmentMatch[2] || "");
                        delete params[key];
                    }
                });
                return result.join("");
            }
        } ];
    }
    instantiateRoute.$inject = [ "$injector" ];
    function instantiateRoute($injector) {
        if (isEagerInstantiationEnabled) {
            $injector.get("$route");
        }
    }
    ngRouteModule.provider("$routeParams", $RouteParamsProvider);
    function $RouteParamsProvider() {
        this.$get = function() {
            return {};
        };
    }
    ngRouteModule.directive("ngView", ngViewFactory);
    ngRouteModule.directive("ngView", ngViewFillContentFactory);
    ngViewFactory.$inject = [ "$route", "$anchorScroll", "$animate" ];
    function ngViewFactory($route, $anchorScroll, $animate) {
        return {
            restrict: "ECA",
            terminal: true,
            priority: 400,
            transclude: "element",
            link: function(scope, $element, attr, ctrl, $transclude) {
                var currentScope, currentElement, previousLeaveAnimation, autoScrollExp = attr.autoscroll, onloadExp = attr.onload || "";
                scope.$on("$routeChangeSuccess", update);
                update();
                function cleanupLastView() {
                    if (previousLeaveAnimation) {
                        $animate.cancel(previousLeaveAnimation);
                        previousLeaveAnimation = null;
                    }
                    if (currentScope) {
                        currentScope.$destroy();
                        currentScope = null;
                    }
                    if (currentElement) {
                        previousLeaveAnimation = $animate.leave(currentElement);
                        previousLeaveAnimation.done(function(response) {
                            if (response !== false) previousLeaveAnimation = null;
                        });
                        currentElement = null;
                    }
                }
                function update() {
                    var locals = $route.current && $route.current.locals, template = locals && locals.$template;
                    if (angular.isDefined(template)) {
                        var newScope = scope.$new();
                        var current = $route.current;
                        var clone = $transclude(newScope, function(clone) {
                            $animate.enter(clone, null, currentElement || $element).done(function onNgViewEnter(response) {
                                if (response !== false && angular.isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                                    $anchorScroll();
                                }
                            });
                            cleanupLastView();
                        });
                        currentElement = clone;
                        currentScope = current.scope = newScope;
                        currentScope.$emit("$viewContentLoaded");
                        currentScope.$eval(onloadExp);
                    } else {
                        cleanupLastView();
                    }
                }
            }
        };
    }
    ngViewFillContentFactory.$inject = [ "$compile", "$controller", "$route" ];
    function ngViewFillContentFactory($compile, $controller, $route) {
        return {
            restrict: "ECA",
            priority: -400,
            link: function(scope, $element) {
                var current = $route.current, locals = current.locals;
                $element.html(locals.$template);
                var link = $compile($element.contents());
                if (current.controller) {
                    locals.$scope = scope;
                    var controller = $controller(current.controller, locals);
                    if (current.controllerAs) {
                        scope[current.controllerAs] = controller;
                    }
                    $element.data("$ngControllerController", controller);
                    $element.children().data("$ngControllerController", controller);
                }
                scope[current.resolveAs || "$resolve"] = locals;
                link(scope);
            }
        };
    }
})(window, window.angular);

angular.module("ui.bootstrap", [ "ui.bootstrap.tpls", "ui.bootstrap.collapse", "ui.bootstrap.accordion", "ui.bootstrap.alert", "ui.bootstrap.bindHtml", "ui.bootstrap.buttons", "ui.bootstrap.carousel", "ui.bootstrap.dateparser", "ui.bootstrap.position", "ui.bootstrap.datepicker", "ui.bootstrap.dropdown", "ui.bootstrap.modal", "ui.bootstrap.pagination", "ui.bootstrap.tooltip", "ui.bootstrap.popover", "ui.bootstrap.progressbar", "ui.bootstrap.rating", "ui.bootstrap.tabs", "ui.bootstrap.timepicker", "ui.bootstrap.transition", "ui.bootstrap.typeahead" ]);

angular.module("ui.bootstrap.tpls", [ "template/accordion/accordion-group.html", "template/accordion/accordion.html", "template/alert/alert.html", "template/carousel/carousel.html", "template/carousel/slide.html", "template/datepicker/datepicker.html", "template/datepicker/day.html", "template/datepicker/month.html", "template/datepicker/popup.html", "template/datepicker/year.html", "template/modal/backdrop.html", "template/modal/window.html", "template/pagination/pager.html", "template/pagination/pagination.html", "template/tooltip/tooltip-html-popup.html", "template/tooltip/tooltip-html-unsafe-popup.html", "template/tooltip/tooltip-popup.html", "template/tooltip/tooltip-template-popup.html", "template/popover/popover-html.html", "template/popover/popover-template.html", "template/popover/popover.html", "template/progressbar/bar.html", "template/progressbar/progress.html", "template/progressbar/progressbar.html", "template/rating/rating.html", "template/tabs/tab.html", "template/tabs/tabset.html", "template/timepicker/timepicker.html", "template/typeahead/typeahead-match.html", "template/typeahead/typeahead-popup.html" ]);

angular.module("ui.bootstrap.collapse", []).directive("collapse", [ "$animate", function($animate) {
    return {
        link: function(scope, element, attrs) {
            function expand() {
                element.removeClass("collapse").addClass("collapsing").attr("aria-expanded", true).attr("aria-hidden", false);
                $animate.addClass(element, "in", {
                    to: {
                        height: element[0].scrollHeight + "px"
                    }
                }).then(expandDone);
            }
            function expandDone() {
                element.removeClass("collapsing");
                element.css({
                    height: "auto"
                });
            }
            function collapse() {
                if (!element.hasClass("collapse") && !element.hasClass("in")) {
                    return collapseDone();
                }
                element.css({
                    height: element[0].scrollHeight + "px"
                }).removeClass("collapse").addClass("collapsing").attr("aria-expanded", false).attr("aria-hidden", true);
                $animate.removeClass(element, "in", {
                    to: {
                        height: "0"
                    }
                }).then(collapseDone);
            }
            function collapseDone() {
                element.css({
                    height: "0"
                });
                element.removeClass("collapsing");
                element.addClass("collapse");
            }
            scope.$watch(attrs.collapse, function(shouldCollapse) {
                if (shouldCollapse) {
                    collapse();
                } else {
                    expand();
                }
            });
        }
    };
} ]);

angular.module("ui.bootstrap.accordion", [ "ui.bootstrap.collapse" ]).constant("accordionConfig", {
    closeOthers: true
}).controller("AccordionController", [ "$scope", "$attrs", "accordionConfig", function($scope, $attrs, accordionConfig) {
    this.groups = [];
    this.closeOthers = function(openGroup) {
        var closeOthers = angular.isDefined($attrs.closeOthers) ? $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
        if (closeOthers) {
            angular.forEach(this.groups, function(group) {
                if (group !== openGroup) {
                    group.isOpen = false;
                }
            });
        }
    };
    this.addGroup = function(groupScope) {
        var that = this;
        this.groups.push(groupScope);
        groupScope.$on("$destroy", function(event) {
            that.removeGroup(groupScope);
        });
    };
    this.removeGroup = function(group) {
        var index = this.groups.indexOf(group);
        if (index !== -1) {
            this.groups.splice(index, 1);
        }
    };
} ]).directive("accordion", function() {
    return {
        restrict: "EA",
        controller: "AccordionController",
        controllerAs: "accordion",
        transclude: true,
        replace: false,
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "template/accordion/accordion.html";
        }
    };
}).directive("accordionGroup", function() {
    return {
        require: "^accordion",
        restrict: "EA",
        transclude: true,
        replace: true,
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "template/accordion/accordion-group.html";
        },
        scope: {
            heading: "@",
            isOpen: "=?",
            isDisabled: "=?"
        },
        controller: function() {
            this.setHeading = function(element) {
                this.heading = element;
            };
        },
        link: function(scope, element, attrs, accordionCtrl) {
            accordionCtrl.addGroup(scope);
            scope.openClass = attrs.openClass || "panel-open";
            scope.panelClass = attrs.panelClass;
            scope.$watch("isOpen", function(value) {
                element.toggleClass(scope.openClass, value);
                if (value) {
                    accordionCtrl.closeOthers(scope);
                }
            });
            scope.toggleOpen = function($event) {
                if (!scope.isDisabled) {
                    if (!$event || $event.which === 32) {
                        scope.isOpen = !scope.isOpen;
                    }
                }
            };
        }
    };
}).directive("accordionHeading", function() {
    return {
        restrict: "EA",
        transclude: true,
        template: "",
        replace: true,
        require: "^accordionGroup",
        link: function(scope, element, attr, accordionGroupCtrl, transclude) {
            accordionGroupCtrl.setHeading(transclude(scope, angular.noop));
        }
    };
}).directive("accordionTransclude", function() {
    return {
        require: "^accordionGroup",
        link: function(scope, element, attr, controller) {
            scope.$watch(function() {
                return controller[attr.accordionTransclude];
            }, function(heading) {
                if (heading) {
                    element.find("span").html("");
                    element.find("span").append(heading);
                }
            });
        }
    };
});

angular.module("ui.bootstrap.alert", []).controller("AlertController", [ "$scope", "$attrs", function($scope, $attrs) {
    $scope.closeable = !!$attrs.close;
    this.close = $scope.close;
} ]).directive("alert", function() {
    return {
        controller: "AlertController",
        controllerAs: "alert",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "template/alert/alert.html";
        },
        transclude: true,
        replace: true,
        scope: {
            type: "@",
            close: "&"
        }
    };
}).directive("dismissOnTimeout", [ "$timeout", function($timeout) {
    return {
        require: "alert",
        link: function(scope, element, attrs, alertCtrl) {
            $timeout(function() {
                alertCtrl.close();
            }, parseInt(attrs.dismissOnTimeout, 10));
        }
    };
} ]);

angular.module("ui.bootstrap.bindHtml", []).value("$bindHtmlUnsafeSuppressDeprecated", false).directive("bindHtmlUnsafe", [ "$log", "$bindHtmlUnsafeSuppressDeprecated", function($log, $bindHtmlUnsafeSuppressDeprecated) {
    return function(scope, element, attr) {
        if (!$bindHtmlUnsafeSuppressDeprecated) {
            $log.warn("bindHtmlUnsafe is now deprecated. Use ngBindHtml instead");
        }
        element.addClass("ng-binding").data("$binding", attr.bindHtmlUnsafe);
        scope.$watch(attr.bindHtmlUnsafe, function bindHtmlUnsafeWatchAction(value) {
            element.html(value || "");
        });
    };
} ]);

angular.module("ui.bootstrap.buttons", []).constant("buttonConfig", {
    activeClass: "active",
    toggleEvent: "click"
}).controller("ButtonsController", [ "buttonConfig", function(buttonConfig) {
    this.activeClass = buttonConfig.activeClass || "active";
    this.toggleEvent = buttonConfig.toggleEvent || "click";
} ]).directive("btnRadio", function() {
    return {
        require: [ "btnRadio", "ngModel" ],
        controller: "ButtonsController",
        controllerAs: "buttons",
        link: function(scope, element, attrs, ctrls) {
            var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            element.find("input").css({
                display: "none"
            });
            ngModelCtrl.$render = function() {
                element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.btnRadio)));
            };
            element.bind(buttonsCtrl.toggleEvent, function() {
                if (attrs.disabled) {
                    return;
                }
                var isActive = element.hasClass(buttonsCtrl.activeClass);
                if (!isActive || angular.isDefined(attrs.uncheckable)) {
                    scope.$apply(function() {
                        ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.btnRadio));
                        ngModelCtrl.$render();
                    });
                }
            });
        }
    };
}).directive("btnCheckbox", [ "$document", function($document) {
    return {
        require: [ "btnCheckbox", "ngModel" ],
        controller: "ButtonsController",
        controllerAs: "button",
        link: function(scope, element, attrs, ctrls) {
            var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            element.find("input").css({
                display: "none"
            });
            function getTrueValue() {
                return getCheckboxValue(attrs.btnCheckboxTrue, true);
            }
            function getFalseValue() {
                return getCheckboxValue(attrs.btnCheckboxFalse, false);
            }
            function getCheckboxValue(attributeValue, defaultValue) {
                var val = scope.$eval(attributeValue);
                return angular.isDefined(val) ? val : defaultValue;
            }
            ngModelCtrl.$render = function() {
                element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
            };
            element.bind(buttonsCtrl.toggleEvent, function() {
                if (attrs.disabled) {
                    return;
                }
                scope.$apply(function() {
                    ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
                    ngModelCtrl.$render();
                });
            });
            element.on("keypress", function(e) {
                if (attrs.disabled || e.which !== 32 || $document[0].activeElement !== element[0]) {
                    return;
                }
                scope.$apply(function() {
                    ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
                    ngModelCtrl.$render();
                });
            });
        }
    };
} ]);

angular.module("ui.bootstrap.carousel", []).controller("CarouselController", [ "$scope", "$element", "$interval", "$animate", function($scope, $element, $interval, $animate) {
    var self = this, slides = self.slides = $scope.slides = [], NEW_ANIMATE = angular.version.minor >= 4, NO_TRANSITION = "uib-noTransition", SLIDE_DIRECTION = "uib-slideDirection", currentIndex = -1, currentInterval, isPlaying;
    self.currentSlide = null;
    var destroyed = false;
    self.select = $scope.select = function(nextSlide, direction) {
        var nextIndex = $scope.indexOfSlide(nextSlide);
        if (direction === undefined) {
            direction = nextIndex > self.getCurrentIndex() ? "next" : "prev";
        }
        if (nextSlide && nextSlide !== self.currentSlide && !$scope.$currentTransition) {
            goNext(nextSlide, nextIndex, direction);
        }
    };
    function goNext(slide, index, direction) {
        if (destroyed) {
            return;
        }
        angular.extend(slide, {
            direction: direction,
            active: true
        });
        angular.extend(self.currentSlide || {}, {
            direction: direction,
            active: false
        });
        if ($animate.enabled() && !$scope.noTransition && !$scope.$currentTransition && slide.$element && self.slides.length > 1) {
            slide.$element.data(SLIDE_DIRECTION, slide.direction);
            if (self.currentSlide && self.currentSlide.$element) {
                self.currentSlide.$element.data(SLIDE_DIRECTION, slide.direction);
            }
            $scope.$currentTransition = true;
            if (NEW_ANIMATE) {
                $animate.on("addClass", slide.$element, function(element, phase) {
                    if (phase === "close") {
                        $scope.$currentTransition = null;
                        $animate.off("addClass", element);
                    }
                });
            } else {
                slide.$element.one("$animate:close", function closeFn() {
                    $scope.$currentTransition = null;
                });
            }
        }
        self.currentSlide = slide;
        currentIndex = index;
        restartTimer();
    }
    $scope.$on("$destroy", function() {
        destroyed = true;
    });
    function getSlideByIndex(index) {
        if (angular.isUndefined(slides[index].index)) {
            return slides[index];
        }
        var i, len = slides.length;
        for (i = 0; i < slides.length; ++i) {
            if (slides[i].index == index) {
                return slides[i];
            }
        }
    }
    self.getCurrentIndex = function() {
        if (self.currentSlide && angular.isDefined(self.currentSlide.index)) {
            return +self.currentSlide.index;
        }
        return currentIndex;
    };
    $scope.indexOfSlide = function(slide) {
        return angular.isDefined(slide.index) ? +slide.index : slides.indexOf(slide);
    };
    $scope.next = function() {
        var newIndex = (self.getCurrentIndex() + 1) % slides.length;
        if (newIndex === 0 && $scope.noWrap()) {
            $scope.pause();
            return;
        }
        return self.select(getSlideByIndex(newIndex), "next");
    };
    $scope.prev = function() {
        var newIndex = self.getCurrentIndex() - 1 < 0 ? slides.length - 1 : self.getCurrentIndex() - 1;
        if ($scope.noWrap() && newIndex === slides.length - 1) {
            $scope.pause();
            return;
        }
        return self.select(getSlideByIndex(newIndex), "prev");
    };
    $scope.isActive = function(slide) {
        return self.currentSlide === slide;
    };
    $scope.$watch("interval", restartTimer);
    $scope.$on("$destroy", resetTimer);
    function restartTimer() {
        resetTimer();
        var interval = +$scope.interval;
        if (!isNaN(interval) && interval > 0) {
            currentInterval = $interval(timerFn, interval);
        }
    }
    function resetTimer() {
        if (currentInterval) {
            $interval.cancel(currentInterval);
            currentInterval = null;
        }
    }
    function timerFn() {
        var interval = +$scope.interval;
        if (isPlaying && !isNaN(interval) && interval > 0 && slides.length) {
            $scope.next();
        } else {
            $scope.pause();
        }
    }
    $scope.play = function() {
        if (!isPlaying) {
            isPlaying = true;
            restartTimer();
        }
    };
    $scope.pause = function() {
        if (!$scope.noPause) {
            isPlaying = false;
            resetTimer();
        }
    };
    self.addSlide = function(slide, element) {
        slide.$element = element;
        slides.push(slide);
        if (slides.length === 1 || slide.active) {
            self.select(slides[slides.length - 1]);
            if (slides.length == 1) {
                $scope.play();
            }
        } else {
            slide.active = false;
        }
    };
    self.removeSlide = function(slide) {
        if (angular.isDefined(slide.index)) {
            slides.sort(function(a, b) {
                return +a.index > +b.index;
            });
        }
        var index = slides.indexOf(slide);
        slides.splice(index, 1);
        if (slides.length > 0 && slide.active) {
            if (index >= slides.length) {
                self.select(slides[index - 1]);
            } else {
                self.select(slides[index]);
            }
        } else if (currentIndex > index) {
            currentIndex--;
        }
        if (slides.length === 0) {
            self.currentSlide = null;
        }
    };
    $scope.$watch("noTransition", function(noTransition) {
        $element.data(NO_TRANSITION, noTransition);
    });
} ]).directive("carousel", [ function() {
    return {
        restrict: "EA",
        transclude: true,
        replace: true,
        controller: "CarouselController",
        controllerAs: "carousel",
        require: "carousel",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "template/carousel/carousel.html";
        },
        scope: {
            interval: "=",
            noTransition: "=",
            noPause: "=",
            noWrap: "&"
        }
    };
} ]).directive("slide", function() {
    return {
        require: "^carousel",
        restrict: "EA",
        transclude: true,
        replace: true,
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "template/carousel/slide.html";
        },
        scope: {
            active: "=?",
            actual: "=?",
            index: "=?"
        },
        link: function(scope, element, attrs, carouselCtrl) {
            carouselCtrl.addSlide(scope, element);
            scope.$on("$destroy", function() {
                carouselCtrl.removeSlide(scope);
            });
            scope.$watch("active", function(active) {
                if (active) {
                    carouselCtrl.select(scope);
                }
            });
        }
    };
}).animation(".item", [ "$injector", "$animate", function($injector, $animate) {
    var NO_TRANSITION = "uib-noTransition", SLIDE_DIRECTION = "uib-slideDirection", $animateCss = null;
    if ($injector.has("$animateCss")) {
        $animateCss = $injector.get("$animateCss");
    }
    function removeClass(element, className, callback) {
        element.removeClass(className);
        if (callback) {
            callback();
        }
    }
    return {
        beforeAddClass: function(element, className, done) {
            if (className == "active" && element.parent() && !element.parent().data(NO_TRANSITION)) {
                var stopped = false;
                var direction = element.data(SLIDE_DIRECTION);
                var directionClass = direction == "next" ? "left" : "right";
                var removeClassFn = removeClass.bind(this, element, directionClass + " " + direction, done);
                element.addClass(direction);
                if ($animateCss) {
                    $animateCss(element, {
                        addClass: directionClass
                    }).start().done(removeClassFn);
                } else {
                    $animate.addClass(element, directionClass).then(function() {
                        if (!stopped) {
                            removeClassFn();
                        }
                        done();
                    });
                }
                return function() {
                    stopped = true;
                };
            }
            done();
        },
        beforeRemoveClass: function(element, className, done) {
            if (className === "active" && element.parent() && !element.parent().data(NO_TRANSITION)) {
                var stopped = false;
                var direction = element.data(SLIDE_DIRECTION);
                var directionClass = direction == "next" ? "left" : "right";
                var removeClassFn = removeClass.bind(this, element, directionClass, done);
                if ($animateCss) {
                    $animateCss(element, {
                        addClass: directionClass
                    }).start().done(removeClassFn);
                } else {
                    $animate.addClass(element, directionClass).then(function() {
                        if (!stopped) {
                            removeClassFn();
                        }
                        done();
                    });
                }
                return function() {
                    stopped = true;
                };
            }
            done();
        }
    };
} ]);

angular.module("ui.bootstrap.dateparser", []).service("dateParser", [ "$log", "$locale", "orderByFilter", function($log, $locale, orderByFilter) {
    var SPECIAL_CHARACTERS_REGEXP = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
    this.parsers = {};
    var formatCodeToRegex = {
        yyyy: {
            regex: "\\d{4}",
            apply: function(value) {
                this.year = +value;
            }
        },
        yy: {
            regex: "\\d{2}",
            apply: function(value) {
                this.year = +value + 2e3;
            }
        },
        y: {
            regex: "\\d{1,4}",
            apply: function(value) {
                this.year = +value;
            }
        },
        MMMM: {
            regex: $locale.DATETIME_FORMATS.MONTH.join("|"),
            apply: function(value) {
                this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value);
            }
        },
        MMM: {
            regex: $locale.DATETIME_FORMATS.SHORTMONTH.join("|"),
            apply: function(value) {
                this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value);
            }
        },
        MM: {
            regex: "0[1-9]|1[0-2]",
            apply: function(value) {
                this.month = value - 1;
            }
        },
        M: {
            regex: "[1-9]|1[0-2]",
            apply: function(value) {
                this.month = value - 1;
            }
        },
        dd: {
            regex: "[0-2][0-9]{1}|3[0-1]{1}",
            apply: function(value) {
                this.date = +value;
            }
        },
        d: {
            regex: "[1-2]?[0-9]{1}|3[0-1]{1}",
            apply: function(value) {
                this.date = +value;
            }
        },
        EEEE: {
            regex: $locale.DATETIME_FORMATS.DAY.join("|")
        },
        EEE: {
            regex: $locale.DATETIME_FORMATS.SHORTDAY.join("|")
        },
        HH: {
            regex: "(?:0|1)[0-9]|2[0-3]",
            apply: function(value) {
                this.hours = +value;
            }
        },
        hh: {
            regex: "0[0-9]|1[0-2]",
            apply: function(value) {
                this.hours = +value;
            }
        },
        H: {
            regex: "1?[0-9]|2[0-3]",
            apply: function(value) {
                this.hours = +value;
            }
        },
        h: {
            regex: "[0-9]|1[0-2]",
            apply: function(value) {
                this.hours = +value;
            }
        },
        mm: {
            regex: "[0-5][0-9]",
            apply: function(value) {
                this.minutes = +value;
            }
        },
        m: {
            regex: "[0-9]|[1-5][0-9]",
            apply: function(value) {
                this.minutes = +value;
            }
        },
        sss: {
            regex: "[0-9][0-9][0-9]",
            apply: function(value) {
                this.milliseconds = +value;
            }
        },
        ss: {
            regex: "[0-5][0-9]",
            apply: function(value) {
                this.seconds = +value;
            }
        },
        s: {
            regex: "[0-9]|[1-5][0-9]",
            apply: function(value) {
                this.seconds = +value;
            }
        },
        a: {
            regex: $locale.DATETIME_FORMATS.AMPMS.join("|"),
            apply: function(value) {
                if (this.hours === 12) {
                    this.hours = 0;
                }
                if (value === "PM") {
                    this.hours += 12;
                }
            }
        }
    };
    function createParser(format) {
        var map = [], regex = format.split("");
        angular.forEach(formatCodeToRegex, function(data, code) {
            var index = format.indexOf(code);
            if (index > -1) {
                format = format.split("");
                regex[index] = "(" + data.regex + ")";
                format[index] = "$";
                for (var i = index + 1, n = index + code.length; i < n; i++) {
                    regex[i] = "";
                    format[i] = "$";
                }
                format = format.join("");
                map.push({
                    index: index,
                    apply: data.apply
                });
            }
        });
        return {
            regex: new RegExp("^" + regex.join("") + "$"),
            map: orderByFilter(map, "index")
        };
    }
    this.parse = function(input, format, baseDate) {
        if (!angular.isString(input) || !format) {
            return input;
        }
        format = $locale.DATETIME_FORMATS[format] || format;
        format = format.replace(SPECIAL_CHARACTERS_REGEXP, "\\$&");
        if (!this.parsers[format]) {
            this.parsers[format] = createParser(format);
        }
        var parser = this.parsers[format], regex = parser.regex, map = parser.map, results = input.match(regex);
        if (results && results.length) {
            var fields, dt;
            if (angular.isDate(baseDate) && !isNaN(baseDate.getTime())) {
                fields = {
                    year: baseDate.getFullYear(),
                    month: baseDate.getMonth(),
                    date: baseDate.getDate(),
                    hours: baseDate.getHours(),
                    minutes: baseDate.getMinutes(),
                    seconds: baseDate.getSeconds(),
                    milliseconds: baseDate.getMilliseconds()
                };
            } else {
                if (baseDate) {
                    $log.warn("dateparser:", "baseDate is not a valid date");
                }
                fields = {
                    year: 1900,
                    month: 0,
                    date: 1,
                    hours: 0,
                    minutes: 0,
                    seconds: 0,
                    milliseconds: 0
                };
            }
            for (var i = 1, n = results.length; i < n; i++) {
                var mapper = map[i - 1];
                if (mapper.apply) {
                    mapper.apply.call(fields, results[i]);
                }
            }
            if (isValid(fields.year, fields.month, fields.date)) {
                dt = new Date(fields.year, fields.month, fields.date, fields.hours, fields.minutes, fields.seconds, fields.milliseconds || 0);
            }
            return dt;
        }
    };
    function isValid(year, month, date) {
        if (date < 1) {
            return false;
        }
        if (month === 1 && date > 28) {
            return date === 29 && (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0);
        }
        if (month === 3 || month === 5 || month === 8 || month === 10) {
            return date < 31;
        }
        return true;
    }
} ]);

angular.module("ui.bootstrap.position", []).factory("$position", [ "$document", "$window", function($document, $window) {
    function getStyle(el, cssprop) {
        if (el.currentStyle) {
            return el.currentStyle[cssprop];
        } else if ($window.getComputedStyle) {
            return $window.getComputedStyle(el)[cssprop];
        }
        return el.style[cssprop];
    }
    function isStaticPositioned(element) {
        return (getStyle(element, "position") || "static") === "static";
    }
    var parentOffsetEl = function(element) {
        var docDomEl = $document[0];
        var offsetParent = element.offsetParent || docDomEl;
        while (offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent)) {
            offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || docDomEl;
    };
    return {
        position: function(element) {
            var elBCR = this.offset(element);
            var offsetParentBCR = {
                top: 0,
                left: 0
            };
            var offsetParentEl = parentOffsetEl(element[0]);
            if (offsetParentEl != $document[0]) {
                offsetParentBCR = this.offset(angular.element(offsetParentEl));
                offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
                offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
            }
            var boundingClientRect = element[0].getBoundingClientRect();
            return {
                width: boundingClientRect.width || element.prop("offsetWidth"),
                height: boundingClientRect.height || element.prop("offsetHeight"),
                top: elBCR.top - offsetParentBCR.top,
                left: elBCR.left - offsetParentBCR.left
            };
        },
        offset: function(element) {
            var boundingClientRect = element[0].getBoundingClientRect();
            return {
                width: boundingClientRect.width || element.prop("offsetWidth"),
                height: boundingClientRect.height || element.prop("offsetHeight"),
                top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
                left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
            };
        },
        positionElements: function(hostEl, targetEl, positionStr, appendToBody) {
            var positionStrParts = positionStr.split("-");
            var pos0 = positionStrParts[0], pos1 = positionStrParts[1] || "center";
            var hostElPos, targetElWidth, targetElHeight, targetElPos;
            hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);
            targetElWidth = targetEl.prop("offsetWidth");
            targetElHeight = targetEl.prop("offsetHeight");
            var shiftWidth = {
                center: function() {
                    return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;
                },
                left: function() {
                    return hostElPos.left;
                },
                right: function() {
                    return hostElPos.left + hostElPos.width;
                }
            };
            var shiftHeight = {
                center: function() {
                    return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;
                },
                top: function() {
                    return hostElPos.top;
                },
                bottom: function() {
                    return hostElPos.top + hostElPos.height;
                }
            };
            switch (pos0) {
              case "right":
                targetElPos = {
                    top: shiftHeight[pos1](),
                    left: shiftWidth[pos0]()
                };
                break;

              case "left":
                targetElPos = {
                    top: shiftHeight[pos1](),
                    left: hostElPos.left - targetElWidth
                };
                break;

              case "bottom":
                targetElPos = {
                    top: shiftHeight[pos0](),
                    left: shiftWidth[pos1]()
                };
                break;

              default:
                targetElPos = {
                    top: hostElPos.top - targetElHeight,
                    left: shiftWidth[pos1]()
                };
                break;
            }
            return targetElPos;
        }
    };
} ]);

angular.module("ui.bootstrap.datepicker", [ "ui.bootstrap.dateparser", "ui.bootstrap.position" ]).value("$datepickerSuppressError", false).constant("datepickerConfig", {
    formatDay: "dd",
    formatMonth: "MMMM",
    formatYear: "yyyy",
    formatDayHeader: "EEE",
    formatDayTitle: "MMMM yyyy",
    formatMonthTitle: "yyyy",
    datepickerMode: "day",
    minMode: "day",
    maxMode: "year",
    showWeeks: true,
    startingDay: 0,
    yearRange: 20,
    minDate: null,
    maxDate: null,
    shortcutPropagation: false
}).controller("DatepickerController", [ "$scope", "$attrs", "$parse", "$interpolate", "$log", "dateFilter", "datepickerConfig", "$datepickerSuppressError", function($scope, $attrs, $parse, $interpolate, $log, dateFilter, datepickerConfig, $datepickerSuppressError) {
    var self = this, ngModelCtrl = {
        $setViewValue: angular.noop
    };
    this.modes = [ "day", "month", "year" ];
    angular.forEach([ "formatDay", "formatMonth", "formatYear", "formatDayHeader", "formatDayTitle", "formatMonthTitle", "showWeeks", "startingDay", "yearRange", "shortcutPropagation" ], function(key, index) {
        self[key] = angular.isDefined($attrs[key]) ? index < 6 ? $interpolate($attrs[key])($scope.$parent) : $scope.$parent.$eval($attrs[key]) : datepickerConfig[key];
    });
    angular.forEach([ "minDate", "maxDate" ], function(key) {
        if ($attrs[key]) {
            $scope.$parent.$watch($parse($attrs[key]), function(value) {
                self[key] = value ? new Date(value) : null;
                self.refreshView();
            });
        } else {
            self[key] = datepickerConfig[key] ? new Date(datepickerConfig[key]) : null;
        }
    });
    angular.forEach([ "minMode", "maxMode" ], function(key) {
        if ($attrs[key]) {
            $scope.$parent.$watch($parse($attrs[key]), function(value) {
                self[key] = angular.isDefined(value) ? value : $attrs[key];
                $scope[key] = self[key];
                if (key == "minMode" && self.modes.indexOf($scope.datepickerMode) < self.modes.indexOf(self[key]) || key == "maxMode" && self.modes.indexOf($scope.datepickerMode) > self.modes.indexOf(self[key])) {
                    $scope.datepickerMode = self[key];
                }
            });
        } else {
            self[key] = datepickerConfig[key] || null;
            $scope[key] = self[key];
        }
    });
    $scope.datepickerMode = $scope.datepickerMode || datepickerConfig.datepickerMode;
    $scope.uniqueId = "datepicker-" + $scope.$id + "-" + Math.floor(Math.random() * 1e4);
    if (angular.isDefined($attrs.initDate)) {
        this.activeDate = $scope.$parent.$eval($attrs.initDate) || new Date();
        $scope.$parent.$watch($attrs.initDate, function(initDate) {
            if (initDate && (ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue) || ngModelCtrl.$invalid)) {
                self.activeDate = initDate;
                self.refreshView();
            }
        });
    } else {
        this.activeDate = new Date();
    }
    $scope.isActive = function(dateObject) {
        if (self.compare(dateObject.date, self.activeDate) === 0) {
            $scope.activeDateId = dateObject.uid;
            return true;
        }
        return false;
    };
    this.init = function(ngModelCtrl_) {
        ngModelCtrl = ngModelCtrl_;
        ngModelCtrl.$render = function() {
            self.render();
        };
    };
    this.render = function() {
        if (ngModelCtrl.$viewValue) {
            var date = new Date(ngModelCtrl.$viewValue), isValid = !isNaN(date);
            if (isValid) {
                this.activeDate = date;
            } else if (!$datepickerSuppressError) {
                $log.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
            }
        }
        this.refreshView();
    };
    this.refreshView = function() {
        if (this.element) {
            this._refreshView();
            var date = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
            ngModelCtrl.$setValidity("dateDisabled", !date || this.element && !this.isDisabled(date));
        }
    };
    this.createDateObject = function(date, format) {
        var model = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
        return {
            date: date,
            label: dateFilter(date, format),
            selected: model && this.compare(date, model) === 0,
            disabled: this.isDisabled(date),
            current: this.compare(date, new Date()) === 0,
            customClass: this.customClass(date)
        };
    };
    this.isDisabled = function(date) {
        return this.minDate && this.compare(date, this.minDate) < 0 || this.maxDate && this.compare(date, this.maxDate) > 0 || $attrs.dateDisabled && $scope.dateDisabled({
            date: date,
            mode: $scope.datepickerMode
        });
    };
    this.customClass = function(date) {
        return $scope.customClass({
            date: date,
            mode: $scope.datepickerMode
        });
    };
    this.split = function(arr, size) {
        var arrays = [];
        while (arr.length > 0) {
            arrays.push(arr.splice(0, size));
        }
        return arrays;
    };
    this.fixTimeZone = function(date) {
        var hours = date.getHours();
        date.setHours(hours === 23 ? hours + 2 : 0);
    };
    $scope.select = function(date) {
        if ($scope.datepickerMode === self.minMode) {
            var dt = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : new Date(0, 0, 0, 0, 0, 0, 0);
            dt.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
            ngModelCtrl.$setViewValue(dt);
            ngModelCtrl.$render();
        } else {
            self.activeDate = date;
            $scope.datepickerMode = self.modes[self.modes.indexOf($scope.datepickerMode) - 1];
        }
    };
    $scope.move = function(direction) {
        var year = self.activeDate.getFullYear() + direction * (self.step.years || 0), month = self.activeDate.getMonth() + direction * (self.step.months || 0);
        self.activeDate.setFullYear(year, month, 1);
        self.refreshView();
    };
    $scope.toggleMode = function(direction) {
        direction = direction || 1;
        if ($scope.datepickerMode === self.maxMode && direction === 1 || $scope.datepickerMode === self.minMode && direction === -1) {
            return;
        }
        $scope.datepickerMode = self.modes[self.modes.indexOf($scope.datepickerMode) + direction];
    };
    $scope.keys = {
        13: "enter",
        32: "space",
        33: "pageup",
        34: "pagedown",
        35: "end",
        36: "home",
        37: "left",
        38: "up",
        39: "right",
        40: "down"
    };
    var focusElement = function() {
        self.element[0].focus();
    };
    $scope.$on("datepicker.focus", focusElement);
    $scope.keydown = function(evt) {
        var key = $scope.keys[evt.which];
        if (!key || evt.shiftKey || evt.altKey) {
            return;
        }
        evt.preventDefault();
        if (!self.shortcutPropagation) {
            evt.stopPropagation();
        }
        if (key === "enter" || key === "space") {
            if (self.isDisabled(self.activeDate)) {
                return;
            }
            $scope.select(self.activeDate);
            focusElement();
        } else if (evt.ctrlKey && (key === "up" || key === "down")) {
            $scope.toggleMode(key === "up" ? 1 : -1);
            focusElement();
        } else {
            self.handleKeyDown(key, evt);
            self.refreshView();
        }
    };
} ]).directive("datepicker", function() {
    return {
        restrict: "EA",
        replace: true,
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "template/datepicker/datepicker.html";
        },
        scope: {
            datepickerMode: "=?",
            dateDisabled: "&",
            customClass: "&",
            shortcutPropagation: "&?"
        },
        require: [ "datepicker", "^ngModel" ],
        controller: "DatepickerController",
        controllerAs: "datepicker",
        link: function(scope, element, attrs, ctrls) {
            var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            datepickerCtrl.init(ngModelCtrl);
        }
    };
}).directive("daypicker", [ "dateFilter", function(dateFilter) {
    return {
        restrict: "EA",
        replace: true,
        templateUrl: "template/datepicker/day.html",
        require: "^datepicker",
        link: function(scope, element, attrs, ctrl) {
            scope.showWeeks = ctrl.showWeeks;
            ctrl.step = {
                months: 1
            };
            ctrl.element = element;
            var DAYS_IN_MONTH = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
            function getDaysInMonth(year, month) {
                return month === 1 && year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0) ? 29 : DAYS_IN_MONTH[month];
            }
            function getDates(startDate, n) {
                var dates = new Array(n), current = new Date(startDate), i = 0, date;
                while (i < n) {
                    date = new Date(current);
                    ctrl.fixTimeZone(date);
                    dates[i++] = date;
                    current.setDate(current.getDate() + 1);
                }
                return dates;
            }
            ctrl._refreshView = function() {
                var year = ctrl.activeDate.getFullYear(), month = ctrl.activeDate.getMonth(), firstDayOfMonth = new Date(year, month, 1), difference = ctrl.startingDay - firstDayOfMonth.getDay(), numDisplayedFromPreviousMonth = difference > 0 ? 7 - difference : -difference, firstDate = new Date(firstDayOfMonth);
                if (numDisplayedFromPreviousMonth > 0) {
                    firstDate.setDate(-numDisplayedFromPreviousMonth + 1);
                }
                var days = getDates(firstDate, 42);
                for (var i = 0; i < 42; i++) {
                    days[i] = angular.extend(ctrl.createDateObject(days[i], ctrl.formatDay), {
                        secondary: days[i].getMonth() !== month,
                        uid: scope.uniqueId + "-" + i
                    });
                }
                scope.labels = new Array(7);
                for (var j = 0; j < 7; j++) {
                    scope.labels[j] = {
                        abbr: dateFilter(days[j].date, ctrl.formatDayHeader),
                        full: dateFilter(days[j].date, "EEEE")
                    };
                }
                scope.title = dateFilter(ctrl.activeDate, ctrl.formatDayTitle);
                scope.rows = ctrl.split(days, 7);
                if (scope.showWeeks) {
                    scope.weekNumbers = [];
                    var thursdayIndex = (4 + 7 - ctrl.startingDay) % 7, numWeeks = scope.rows.length;
                    for (var curWeek = 0; curWeek < numWeeks; curWeek++) {
                        scope.weekNumbers.push(getISO8601WeekNumber(scope.rows[curWeek][thursdayIndex].date));
                    }
                }
            };
            ctrl.compare = function(date1, date2) {
                return new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
            };
            function getISO8601WeekNumber(date) {
                var checkDate = new Date(date);
                checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
                var time = checkDate.getTime();
                checkDate.setMonth(0);
                checkDate.setDate(1);
                return Math.floor(Math.round((time - checkDate) / 864e5) / 7) + 1;
            }
            ctrl.handleKeyDown = function(key, evt) {
                var date = ctrl.activeDate.getDate();
                if (key === "left") {
                    date = date - 1;
                } else if (key === "up") {
                    date = date - 7;
                } else if (key === "right") {
                    date = date + 1;
                } else if (key === "down") {
                    date = date + 7;
                } else if (key === "pageup" || key === "pagedown") {
                    var month = ctrl.activeDate.getMonth() + (key === "pageup" ? -1 : 1);
                    ctrl.activeDate.setMonth(month, 1);
                    date = Math.min(getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth()), date);
                } else if (key === "home") {
                    date = 1;
                } else if (key === "end") {
                    date = getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth());
                }
                ctrl.activeDate.setDate(date);
            };
            ctrl.refreshView();
        }
    };
} ]).directive("monthpicker", [ "dateFilter", function(dateFilter) {
    return {
        restrict: "EA",
        replace: true,
        templateUrl: "template/datepicker/month.html",
        require: "^datepicker",
        link: function(scope, element, attrs, ctrl) {
            ctrl.step = {
                years: 1
            };
            ctrl.element = element;
            ctrl._refreshView = function() {
                var months = new Array(12), year = ctrl.activeDate.getFullYear(), date;
                for (var i = 0; i < 12; i++) {
                    date = new Date(year, i, 1);
                    ctrl.fixTimeZone(date);
                    months[i] = angular.extend(ctrl.createDateObject(date, ctrl.formatMonth), {
                        uid: scope.uniqueId + "-" + i
                    });
                }
                scope.title = dateFilter(ctrl.activeDate, ctrl.formatMonthTitle);
                scope.rows = ctrl.split(months, 3);
            };
            ctrl.compare = function(date1, date2) {
                return new Date(date1.getFullYear(), date1.getMonth()) - new Date(date2.getFullYear(), date2.getMonth());
            };
            ctrl.handleKeyDown = function(key, evt) {
                var date = ctrl.activeDate.getMonth();
                if (key === "left") {
                    date = date - 1;
                } else if (key === "up") {
                    date = date - 3;
                } else if (key === "right") {
                    date = date + 1;
                } else if (key === "down") {
                    date = date + 3;
                } else if (key === "pageup" || key === "pagedown") {
                    var year = ctrl.activeDate.getFullYear() + (key === "pageup" ? -1 : 1);
                    ctrl.activeDate.setFullYear(year);
                } else if (key === "home") {
                    date = 0;
                } else if (key === "end") {
                    date = 11;
                }
                ctrl.activeDate.setMonth(date);
            };
            ctrl.refreshView();
        }
    };
} ]).directive("yearpicker", [ "dateFilter", function(dateFilter) {
    return {
        restrict: "EA",
        replace: true,
        templateUrl: "template/datepicker/year.html",
        require: "^datepicker",
        link: function(scope, element, attrs, ctrl) {
            var range = ctrl.yearRange;
            ctrl.step = {
                years: range
            };
            ctrl.element = element;
            function getStartingYear(year) {
                return parseInt((year - 1) / range, 10) * range + 1;
            }
            ctrl._refreshView = function() {
                var years = new Array(range), date;
                for (var i = 0, start = getStartingYear(ctrl.activeDate.getFullYear()); i < range; i++) {
                    date = new Date(start + i, 0, 1);
                    ctrl.fixTimeZone(date);
                    years[i] = angular.extend(ctrl.createDateObject(date, ctrl.formatYear), {
                        uid: scope.uniqueId + "-" + i
                    });
                }
                scope.title = [ years[0].label, years[range - 1].label ].join(" - ");
                scope.rows = ctrl.split(years, 5);
            };
            ctrl.compare = function(date1, date2) {
                return date1.getFullYear() - date2.getFullYear();
            };
            ctrl.handleKeyDown = function(key, evt) {
                var date = ctrl.activeDate.getFullYear();
                if (key === "left") {
                    date = date - 1;
                } else if (key === "up") {
                    date = date - 5;
                } else if (key === "right") {
                    date = date + 1;
                } else if (key === "down") {
                    date = date + 5;
                } else if (key === "pageup" || key === "pagedown") {
                    date += (key === "pageup" ? -1 : 1) * ctrl.step.years;
                } else if (key === "home") {
                    date = getStartingYear(ctrl.activeDate.getFullYear());
                } else if (key === "end") {
                    date = getStartingYear(ctrl.activeDate.getFullYear()) + range - 1;
                }
                ctrl.activeDate.setFullYear(date);
            };
            ctrl.refreshView();
        }
    };
} ]).constant("datepickerPopupConfig", {
    datepickerPopup: "yyyy-MM-dd",
    datepickerPopupTemplateUrl: "template/datepicker/popup.html",
    datepickerTemplateUrl: "template/datepicker/datepicker.html",
    html5Types: {
        date: "yyyy-MM-dd",
        "datetime-local": "yyyy-MM-ddTHH:mm:ss.sss",
        month: "yyyy-MM"
    },
    currentText: "Today",
    clearText: "Clear",
    closeText: "Done",
    closeOnDateSelection: true,
    appendToBody: false,
    showButtonBar: true,
    onOpenFocus: true
}).directive("datepickerPopup", [ "$compile", "$parse", "$document", "$rootScope", "$position", "dateFilter", "dateParser", "datepickerPopupConfig", "$timeout", function($compile, $parse, $document, $rootScope, $position, dateFilter, dateParser, datepickerPopupConfig, $timeout) {
    return {
        restrict: "EA",
        require: "ngModel",
        scope: {
            isOpen: "=?",
            currentText: "@",
            clearText: "@",
            closeText: "@",
            dateDisabled: "&",
            customClass: "&"
        },
        link: function(scope, element, attrs, ngModel) {
            var dateFormat, closeOnDateSelection = angular.isDefined(attrs.closeOnDateSelection) ? scope.$parent.$eval(attrs.closeOnDateSelection) : datepickerPopupConfig.closeOnDateSelection, appendToBody = angular.isDefined(attrs.datepickerAppendToBody) ? scope.$parent.$eval(attrs.datepickerAppendToBody) : datepickerPopupConfig.appendToBody, onOpenFocus = angular.isDefined(attrs.onOpenFocus) ? scope.$parent.$eval(attrs.onOpenFocus) : datepickerPopupConfig.onOpenFocus, datepickerPopupTemplateUrl = angular.isDefined(attrs.datepickerPopupTemplateUrl) ? attrs.datepickerPopupTemplateUrl : datepickerPopupConfig.datepickerPopupTemplateUrl, datepickerTemplateUrl = angular.isDefined(attrs.datepickerTemplateUrl) ? attrs.datepickerTemplateUrl : datepickerPopupConfig.datepickerTemplateUrl, cache = {};
            scope.showButtonBar = angular.isDefined(attrs.showButtonBar) ? scope.$parent.$eval(attrs.showButtonBar) : datepickerPopupConfig.showButtonBar;
            scope.getText = function(key) {
                return scope[key + "Text"] || datepickerPopupConfig[key + "Text"];
            };
            scope.isDisabled = function(date) {
                if (date === "today") {
                    date = new Date();
                }
                return scope.watchData.minDate && scope.compare(date, cache.minDate) < 0 || scope.watchData.maxDate && scope.compare(date, cache.maxDate) > 0;
            };
            scope.compare = function(date1, date2) {
                return new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) - new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
            };
            var isHtml5DateInput = false;
            if (datepickerPopupConfig.html5Types[attrs.type]) {
                dateFormat = datepickerPopupConfig.html5Types[attrs.type];
                isHtml5DateInput = true;
            } else {
                dateFormat = attrs.datepickerPopup || datepickerPopupConfig.datepickerPopup;
                attrs.$observe("datepickerPopup", function(value, oldValue) {
                    var newDateFormat = value || datepickerPopupConfig.datepickerPopup;
                    if (newDateFormat !== dateFormat) {
                        dateFormat = newDateFormat;
                        ngModel.$modelValue = null;
                        if (!dateFormat) {
                            throw new Error("datepickerPopup must have a date format specified.");
                        }
                    }
                });
            }
            if (!dateFormat) {
                throw new Error("datepickerPopup must have a date format specified.");
            }
            if (isHtml5DateInput && attrs.datepickerPopup) {
                throw new Error("HTML5 date input types do not support custom formats.");
            }
            var popupEl = angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");
            popupEl.attr({
                "ng-model": "date",
                "ng-change": "dateSelection(date)",
                "template-url": datepickerPopupTemplateUrl
            });
            function cameltoDash(string) {
                return string.replace(/([A-Z])/g, function($1) {
                    return "-" + $1.toLowerCase();
                });
            }
            var datepickerEl = angular.element(popupEl.children()[0]);
            datepickerEl.attr("template-url", datepickerTemplateUrl);
            if (isHtml5DateInput) {
                if (attrs.type === "month") {
                    datepickerEl.attr("datepicker-mode", '"month"');
                    datepickerEl.attr("min-mode", "month");
                }
            }
            if (attrs.datepickerOptions) {
                var options = scope.$parent.$eval(attrs.datepickerOptions);
                if (options && options.initDate) {
                    scope.initDate = options.initDate;
                    datepickerEl.attr("init-date", "initDate");
                    delete options.initDate;
                }
                angular.forEach(options, function(value, option) {
                    datepickerEl.attr(cameltoDash(option), value);
                });
            }
            scope.watchData = {};
            angular.forEach([ "minMode", "maxMode", "minDate", "maxDate", "datepickerMode", "initDate", "shortcutPropagation" ], function(key) {
                if (attrs[key]) {
                    var getAttribute = $parse(attrs[key]);
                    scope.$parent.$watch(getAttribute, function(value) {
                        scope.watchData[key] = value;
                        if (key === "minDate" || key === "maxDate") {
                            cache[key] = new Date(value);
                        }
                    });
                    datepickerEl.attr(cameltoDash(key), "watchData." + key);
                    if (key === "datepickerMode") {
                        var setAttribute = getAttribute.assign;
                        scope.$watch("watchData." + key, function(value, oldvalue) {
                            if (angular.isFunction(setAttribute) && value !== oldvalue) {
                                setAttribute(scope.$parent, value);
                            }
                        });
                    }
                }
            });
            if (attrs.dateDisabled) {
                datepickerEl.attr("date-disabled", "dateDisabled({ date: date, mode: mode })");
            }
            if (attrs.showWeeks) {
                datepickerEl.attr("show-weeks", attrs.showWeeks);
            }
            if (attrs.customClass) {
                datepickerEl.attr("custom-class", "customClass({ date: date, mode: mode })");
            }
            function parseDate(viewValue) {
                if (angular.isNumber(viewValue)) {
                    viewValue = new Date(viewValue);
                }
                if (!viewValue) {
                    return null;
                } else if (angular.isDate(viewValue) && !isNaN(viewValue)) {
                    return viewValue;
                } else if (angular.isString(viewValue)) {
                    var date = dateParser.parse(viewValue, dateFormat, scope.date);
                    if (isNaN(date)) {
                        return undefined;
                    } else {
                        return date;
                    }
                } else {
                    return undefined;
                }
            }
            function validator(modelValue, viewValue) {
                var value = modelValue || viewValue;
                if (!attrs.ngRequired && !value) {
                    return true;
                }
                if (angular.isNumber(value)) {
                    value = new Date(value);
                }
                if (!value) {
                    return true;
                } else if (angular.isDate(value) && !isNaN(value)) {
                    return true;
                } else if (angular.isString(value)) {
                    var date = dateParser.parse(value, dateFormat);
                    return !isNaN(date);
                } else {
                    return false;
                }
            }
            if (!isHtml5DateInput) {
                ngModel.$$parserName = "date";
                ngModel.$validators.date = validator;
                ngModel.$parsers.unshift(parseDate);
                ngModel.$formatters.push(function(value) {
                    scope.date = value;
                    return ngModel.$isEmpty(value) ? value : dateFilter(value, dateFormat);
                });
            } else {
                ngModel.$formatters.push(function(value) {
                    scope.date = value;
                    return value;
                });
            }
            scope.dateSelection = function(dt) {
                if (angular.isDefined(dt)) {
                    scope.date = dt;
                }
                var date = scope.date ? dateFilter(scope.date, dateFormat) : null;
                element.val(date);
                ngModel.$setViewValue(date);
                if (closeOnDateSelection) {
                    scope.isOpen = false;
                    element[0].focus();
                }
            };
            ngModel.$viewChangeListeners.push(function() {
                scope.date = dateParser.parse(ngModel.$viewValue, dateFormat, scope.date);
            });
            var documentClickBind = function(event) {
                if (scope.isOpen && !(element[0].contains(event.target) || popupEl[0].contains(event.target))) {
                    scope.$apply(function() {
                        scope.isOpen = false;
                    });
                }
            };
            var inputKeydownBind = function(evt) {
                if (evt.which === 27 && scope.isOpen) {
                    evt.preventDefault();
                    evt.stopPropagation();
                    scope.$apply(function() {
                        scope.isOpen = false;
                    });
                    element[0].focus();
                } else if (evt.which === 40 && !scope.isOpen) {
                    evt.preventDefault();
                    evt.stopPropagation();
                    scope.$apply(function() {
                        scope.isOpen = true;
                    });
                }
            };
            element.bind("keydown", inputKeydownBind);
            scope.keydown = function(evt) {
                if (evt.which === 27) {
                    scope.isOpen = false;
                    element[0].focus();
                }
            };
            scope.$watch("isOpen", function(value) {
                if (value) {
                    scope.position = appendToBody ? $position.offset(element) : $position.position(element);
                    scope.position.top = scope.position.top + element.prop("offsetHeight");
                    $timeout(function() {
                        if (onOpenFocus) {
                            scope.$broadcast("datepicker.focus");
                        }
                        $document.bind("click", documentClickBind);
                    }, 0, false);
                } else {
                    $document.unbind("click", documentClickBind);
                }
            });
            scope.select = function(date) {
                if (date === "today") {
                    var today = new Date();
                    if (angular.isDate(scope.date)) {
                        date = new Date(scope.date);
                        date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
                    } else {
                        date = new Date(today.setHours(0, 0, 0, 0));
                    }
                }
                scope.dateSelection(date);
            };
            scope.close = function() {
                scope.isOpen = false;
                element[0].focus();
            };
            var $popup = $compile(popupEl)(scope);
            popupEl.remove();
            if (appendToBody) {
                $document.find("body").append($popup);
            } else {
                element.after($popup);
            }
            scope.$on("$destroy", function() {
                if (scope.isOpen === true) {
                    if (!$rootScope.$$phase) {
                        scope.$apply(function() {
                            scope.isOpen = false;
                        });
                    }
                }
                $popup.remove();
                element.unbind("keydown", inputKeydownBind);
                $document.unbind("click", documentClickBind);
            });
        }
    };
} ]).directive("datepickerPopupWrap", function() {
    return {
        restrict: "EA",
        replace: true,
        transclude: true,
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "template/datepicker/popup.html";
        }
    };
});

angular.module("ui.bootstrap.dropdown", [ "ui.bootstrap.position" ]).constant("dropdownConfig", {
    openClass: "open"
}).service("dropdownService", [ "$document", "$rootScope", function($document, $rootScope) {
    var openScope = null;
    this.open = function(dropdownScope) {
        if (!openScope) {
            $document.bind("click", closeDropdown);
            $document.bind("keydown", keybindFilter);
        }
        if (openScope && openScope !== dropdownScope) {
            openScope.isOpen = false;
        }
        openScope = dropdownScope;
    };
    this.close = function(dropdownScope) {
        if (openScope === dropdownScope) {
            openScope = null;
            $document.unbind("click", closeDropdown);
            $document.unbind("keydown", keybindFilter);
        }
    };
    var closeDropdown = function(evt) {
        if (!openScope) {
            return;
        }
        if (evt && openScope.getAutoClose() === "disabled") {
            return;
        }
        var toggleElement = openScope.getToggleElement();
        if (evt && toggleElement && toggleElement[0].contains(evt.target)) {
            return;
        }
        var dropdownElement = openScope.getDropdownElement();
        if (evt && openScope.getAutoClose() === "outsideClick" && dropdownElement && dropdownElement[0].contains(evt.target)) {
            return;
        }
        openScope.isOpen = false;
        if (!$rootScope.$$phase) {
            openScope.$apply();
        }
    };
    var keybindFilter = function(evt) {
        if (evt.which === 27) {
            openScope.focusToggleElement();
            closeDropdown();
        } else if (openScope.isKeynavEnabled() && /(38|40)/.test(evt.which) && openScope.isOpen) {
            evt.preventDefault();
            evt.stopPropagation();
            openScope.focusDropdownEntry(evt.which);
        }
    };
} ]).controller("DropdownController", [ "$scope", "$attrs", "$parse", "dropdownConfig", "dropdownService", "$animate", "$position", "$document", "$compile", "$templateRequest", function($scope, $attrs, $parse, dropdownConfig, dropdownService, $animate, $position, $document, $compile, $templateRequest) {
    var self = this, scope = $scope.$new(), templateScope, openClass = dropdownConfig.openClass, getIsOpen, setIsOpen = angular.noop, toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop, appendToBody = false, keynavEnabled = false, selectedOption = null, body = $document.find("body");
    this.init = function(element) {
        self.$element = element;
        if ($attrs.isOpen) {
            getIsOpen = $parse($attrs.isOpen);
            setIsOpen = getIsOpen.assign;
            $scope.$watch(getIsOpen, function(value) {
                scope.isOpen = !!value;
            });
        }
        appendToBody = angular.isDefined($attrs.dropdownAppendToBody);
        keynavEnabled = angular.isDefined($attrs.keyboardNav);
        if (appendToBody && self.dropdownMenu) {
            body.append(self.dropdownMenu);
            body.addClass("dropdown");
            element.on("$destroy", function handleDestroyEvent() {
                self.dropdownMenu.remove();
            });
        }
    };
    this.toggle = function(open) {
        return scope.isOpen = arguments.length ? !!open : !scope.isOpen;
    };
    this.isOpen = function() {
        return scope.isOpen;
    };
    scope.getToggleElement = function() {
        return self.toggleElement;
    };
    scope.getAutoClose = function() {
        return $attrs.autoClose || "always";
    };
    scope.getElement = function() {
        return self.$element;
    };
    scope.isKeynavEnabled = function() {
        return keynavEnabled;
    };
    scope.focusDropdownEntry = function(keyCode) {
        var elems = self.dropdownMenu ? angular.element(self.dropdownMenu).find("a") : angular.element(self.$element).find("ul").eq(0).find("a");
        switch (keyCode) {
          case 40:
            {
                if (!angular.isNumber(self.selectedOption)) {
                    self.selectedOption = 0;
                } else {
                    self.selectedOption = self.selectedOption === elems.length - 1 ? self.selectedOption : self.selectedOption + 1;
                }
                break;
            }

          case 38:
            {
                if (!angular.isNumber(self.selectedOption)) {
                    self.selectedOption = elems.length - 1;
                } else {
                    self.selectedOption = self.selectedOption === 0 ? 0 : self.selectedOption - 1;
                }
                break;
            }
        }
        elems[self.selectedOption].focus();
    };
    scope.getDropdownElement = function() {
        return self.dropdownMenu;
    };
    scope.focusToggleElement = function() {
        if (self.toggleElement) {
            self.toggleElement[0].focus();
        }
    };
    scope.$watch("isOpen", function(isOpen, wasOpen) {
        if (appendToBody && self.dropdownMenu) {
            var pos = $position.positionElements(self.$element, self.dropdownMenu, "bottom-left", true);
            var css = {
                top: pos.top + "px",
                display: isOpen ? "block" : "none"
            };
            var rightalign = self.dropdownMenu.hasClass("dropdown-menu-right");
            if (!rightalign) {
                css.left = pos.left + "px";
                css.right = "auto";
            } else {
                css.left = "auto";
                css.right = window.innerWidth - (pos.left + self.$element.prop("offsetWidth")) + "px";
            }
            self.dropdownMenu.css(css);
        }
        var openContainer = appendToBody ? body : self.$element;
        $animate[isOpen ? "addClass" : "removeClass"](openContainer, openClass).then(function() {
            if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
                toggleInvoker($scope, {
                    open: !!isOpen
                });
            }
        });
        if (isOpen) {
            if (self.dropdownMenuTemplateUrl) {
                $templateRequest(self.dropdownMenuTemplateUrl).then(function(tplContent) {
                    templateScope = scope.$new();
                    $compile(tplContent.trim())(templateScope, function(dropdownElement) {
                        var newEl = dropdownElement;
                        self.dropdownMenu.replaceWith(newEl);
                        self.dropdownMenu = newEl;
                    });
                });
            }
            scope.focusToggleElement();
            dropdownService.open(scope);
        } else {
            if (self.dropdownMenuTemplateUrl) {
                if (templateScope) {
                    templateScope.$destroy();
                }
                var newEl = angular.element('<ul class="dropdown-menu"></ul>');
                self.dropdownMenu.replaceWith(newEl);
                self.dropdownMenu = newEl;
            }
            dropdownService.close(scope);
            self.selectedOption = null;
        }
        if (angular.isFunction(setIsOpen)) {
            setIsOpen($scope, isOpen);
        }
    });
    $scope.$on("$locationChangeSuccess", function() {
        if (scope.getAutoClose() !== "disabled") {
            scope.isOpen = false;
        }
    });
    var offDestroy = $scope.$on("$destroy", function() {
        scope.$destroy();
    });
    scope.$on("$destroy", offDestroy);
} ]).directive("dropdown", function() {
    return {
        controller: "DropdownController",
        link: function(scope, element, attrs, dropdownCtrl) {
            dropdownCtrl.init(element);
            element.addClass("dropdown");
        }
    };
}).directive("dropdownMenu", function() {
    return {
        restrict: "AC",
        require: "?^dropdown",
        link: function(scope, element, attrs, dropdownCtrl) {
            if (!dropdownCtrl) {
                return;
            }
            var tplUrl = attrs.templateUrl;
            if (tplUrl) {
                dropdownCtrl.dropdownMenuTemplateUrl = tplUrl;
            }
            if (!dropdownCtrl.dropdownMenu) {
                dropdownCtrl.dropdownMenu = element;
            }
        }
    };
}).directive("keyboardNav", function() {
    return {
        restrict: "A",
        require: "?^dropdown",
        link: function(scope, element, attrs, dropdownCtrl) {
            element.bind("keydown", function(e) {
                if ([ 38, 40 ].indexOf(e.which) !== -1) {
                    e.preventDefault();
                    e.stopPropagation();
                    var elems = dropdownCtrl.dropdownMenu.find("a");
                    switch (e.which) {
                      case 40:
                        {
                            if (!angular.isNumber(dropdownCtrl.selectedOption)) {
                                dropdownCtrl.selectedOption = 0;
                            } else {
                                dropdownCtrl.selectedOption = dropdownCtrl.selectedOption === elems.length - 1 ? dropdownCtrl.selectedOption : dropdownCtrl.selectedOption + 1;
                            }
                            break;
                        }

                      case 38:
                        {
                            if (!angular.isNumber(dropdownCtrl.selectedOption)) {
                                dropdownCtrl.selectedOption = elems.length - 1;
                            } else {
                                dropdownCtrl.selectedOption = dropdownCtrl.selectedOption === 0 ? 0 : dropdownCtrl.selectedOption - 1;
                            }
                            break;
                        }
                    }
                    elems[dropdownCtrl.selectedOption].focus();
                }
            });
        }
    };
}).directive("dropdownToggle", function() {
    return {
        require: "?^dropdown",
        link: function(scope, element, attrs, dropdownCtrl) {
            if (!dropdownCtrl) {
                return;
            }
            element.addClass("dropdown-toggle");
            dropdownCtrl.toggleElement = element;
            var toggleDropdown = function(event) {
                event.preventDefault();
                if (!element.hasClass("disabled") && !attrs.disabled) {
                    scope.$apply(function() {
                        dropdownCtrl.toggle();
                    });
                }
            };
            element.bind("click", toggleDropdown);
            element.attr({
                "aria-haspopup": true,
                "aria-expanded": false
            });
            scope.$watch(dropdownCtrl.isOpen, function(isOpen) {
                element.attr("aria-expanded", !!isOpen);
            });
            scope.$on("$destroy", function() {
                element.unbind("click", toggleDropdown);
            });
        }
    };
});

angular.module("ui.bootstrap.modal", []).factory("$$stackedMap", function() {
    return {
        createNew: function() {
            var stack = [];
            return {
                add: function(key, value) {
                    stack.push({
                        key: key,
                        value: value
                    });
                },
                get: function(key) {
                    for (var i = 0; i < stack.length; i++) {
                        if (key == stack[i].key) {
                            return stack[i];
                        }
                    }
                },
                keys: function() {
                    var keys = [];
                    for (var i = 0; i < stack.length; i++) {
                        keys.push(stack[i].key);
                    }
                    return keys;
                },
                top: function() {
                    return stack[stack.length - 1];
                },
                remove: function(key) {
                    var idx = -1;
                    for (var i = 0; i < stack.length; i++) {
                        if (key == stack[i].key) {
                            idx = i;
                            break;
                        }
                    }
                    return stack.splice(idx, 1)[0];
                },
                removeTop: function() {
                    return stack.splice(stack.length - 1, 1)[0];
                },
                length: function() {
                    return stack.length;
                }
            };
        }
    };
}).factory("$$multiMap", function() {
    return {
        createNew: function() {
            var map = {};
            return {
                entries: function() {
                    return Object.keys(map).map(function(key) {
                        return {
                            key: key,
                            value: map[key]
                        };
                    });
                },
                get: function(key) {
                    return map[key];
                },
                hasKey: function(key) {
                    return !!map[key];
                },
                keys: function() {
                    return Object.keys(map);
                },
                put: function(key, value) {
                    if (!map[key]) {
                        map[key] = [];
                    }
                    map[key].push(value);
                },
                remove: function(key, value) {
                    var values = map[key];
                    if (!values) {
                        return;
                    }
                    var idx = values.indexOf(value);
                    if (idx !== -1) {
                        values.splice(idx, 1);
                    }
                    if (!values.length) {
                        delete map[key];
                    }
                }
            };
        }
    };
}).directive("modalBackdrop", [ "$animate", "$injector", "$modalStack", function($animate, $injector, $modalStack) {
    var $animateCss = null;
    if ($injector.has("$animateCss")) {
        $animateCss = $injector.get("$animateCss");
    }
    return {
        restrict: "EA",
        replace: true,
        templateUrl: "template/modal/backdrop.html",
        compile: function(tElement, tAttrs) {
            tElement.addClass(tAttrs.backdropClass);
            return linkFn;
        }
    };
    function linkFn(scope, element, attrs) {
        if (attrs.modalInClass) {
            if ($animateCss) {
                $animateCss(element, {
                    addClass: attrs.modalInClass
                }).start();
            } else {
                $animate.addClass(element, attrs.modalInClass);
            }
            scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
                var done = setIsAsync();
                if ($animateCss) {
                    $animateCss(element, {
                        removeClass: attrs.modalInClass
                    }).start().then(done);
                } else {
                    $animate.removeClass(element, attrs.modalInClass).then(done);
                }
            });
        }
    }
} ]).directive("modalWindow", [ "$modalStack", "$q", "$animate", "$injector", function($modalStack, $q, $animate, $injector) {
    var $animateCss = null;
    if ($injector.has("$animateCss")) {
        $animateCss = $injector.get("$animateCss");
    }
    return {
        restrict: "EA",
        scope: {
            index: "@"
        },
        replace: true,
        transclude: true,
        templateUrl: function(tElement, tAttrs) {
            return tAttrs.templateUrl || "template/modal/window.html";
        },
        link: function(scope, element, attrs) {
            element.addClass(attrs.windowClass || "");
            scope.size = attrs.size;
            scope.close = function(evt) {
                var modal = $modalStack.getTop();
                if (modal && modal.value.backdrop && modal.value.backdrop !== "static" && evt.target === evt.currentTarget) {
                    evt.preventDefault();
                    evt.stopPropagation();
                    $modalStack.dismiss(modal.key, "backdrop click");
                }
            };
            scope.$isRendered = true;
            var modalRenderDeferObj = $q.defer();
            attrs.$observe("modalRender", function(value) {
                if (value == "true") {
                    modalRenderDeferObj.resolve();
                }
            });
            modalRenderDeferObj.promise.then(function() {
                var animationPromise = null;
                if (attrs.modalInClass) {
                    if ($animateCss) {
                        animationPromise = $animateCss(element, {
                            addClass: attrs.modalInClass
                        }).start();
                    } else {
                        animationPromise = $animate.addClass(element, attrs.modalInClass);
                    }
                    scope.$on($modalStack.NOW_CLOSING_EVENT, function(e, setIsAsync) {
                        var done = setIsAsync();
                        if ($animateCss) {
                            $animateCss(element, {
                                removeClass: attrs.modalInClass
                            }).start().then(done);
                        } else {
                            $animate.removeClass(element, attrs.modalInClass).then(done);
                        }
                    });
                }
                $q.when(animationPromise).then(function() {
                    var inputsWithAutofocus = element[0].querySelectorAll("[autofocus]");
                    if (inputsWithAutofocus.length) {
                        inputsWithAutofocus[0].focus();
                    } else {
                        element[0].focus();
                    }
                });
                var modal = $modalStack.getTop();
                if (modal) {
                    $modalStack.modalRendered(modal.key);
                }
            });
        }
    };
} ]).directive("modalAnimationClass", [ function() {
    return {
        compile: function(tElement, tAttrs) {
            if (tAttrs.modalAnimation) {
                tElement.addClass(tAttrs.modalAnimationClass);
            }
        }
    };
} ]).directive("modalTransclude", function() {
    return {
        link: function($scope, $element, $attrs, controller, $transclude) {
            $transclude($scope.$parent, function(clone) {
                $element.empty();
                $element.append(clone);
            });
        }
    };
}).factory("$modalStack", [ "$animate", "$timeout", "$document", "$compile", "$rootScope", "$q", "$injector", "$$multiMap", "$$stackedMap", function($animate, $timeout, $document, $compile, $rootScope, $q, $injector, $$multiMap, $$stackedMap) {
    var $animateCss = null;
    if ($injector.has("$animateCss")) {
        $animateCss = $injector.get("$animateCss");
    }
    var OPENED_MODAL_CLASS = "modal-open";
    var backdropDomEl, backdropScope;
    var openedWindows = $$stackedMap.createNew();
    var openedClasses = $$multiMap.createNew();
    var $modalStack = {
        NOW_CLOSING_EVENT: "modal.stack.now-closing"
    };
    var focusableElementList;
    var focusIndex = 0;
    var tababbleSelector = "a[href], area[href], input:not([disabled]), " + "button:not([disabled]),select:not([disabled]), textarea:not([disabled]), " + "iframe, object, embed, *[tabindex], *[contenteditable=true]";
    function backdropIndex() {
        var topBackdropIndex = -1;
        var opened = openedWindows.keys();
        for (var i = 0; i < opened.length; i++) {
            if (openedWindows.get(opened[i]).value.backdrop) {
                topBackdropIndex = i;
            }
        }
        return topBackdropIndex;
    }
    $rootScope.$watch(backdropIndex, function(newBackdropIndex) {
        if (backdropScope) {
            backdropScope.index = newBackdropIndex;
        }
    });
    function removeModalWindow(modalInstance, elementToReceiveFocus) {
        var body = $document.find("body").eq(0);
        var modalWindow = openedWindows.get(modalInstance).value;
        openedWindows.remove(modalInstance);
        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, function() {
            var modalBodyClass = modalWindow.openedClass || OPENED_MODAL_CLASS;
            openedClasses.remove(modalBodyClass, modalInstance);
            body.toggleClass(modalBodyClass, openedClasses.hasKey(modalBodyClass));
        });
        checkRemoveBackdrop();
        if (elementToReceiveFocus && elementToReceiveFocus.focus) {
            elementToReceiveFocus.focus();
        } else {
            body.focus();
        }
    }
    function checkRemoveBackdrop() {
        if (backdropDomEl && backdropIndex() == -1) {
            var backdropScopeRef = backdropScope;
            removeAfterAnimate(backdropDomEl, backdropScope, function() {
                backdropScopeRef = null;
            });
            backdropDomEl = undefined;
            backdropScope = undefined;
        }
    }
    function removeAfterAnimate(domEl, scope, done) {
        var asyncDeferred;
        var asyncPromise = null;
        var setIsAsync = function() {
            if (!asyncDeferred) {
                asyncDeferred = $q.defer();
                asyncPromise = asyncDeferred.promise;
            }
            return function asyncDone() {
                asyncDeferred.resolve();
            };
        };
        scope.$broadcast($modalStack.NOW_CLOSING_EVENT, setIsAsync);
        return $q.when(asyncPromise).then(afterAnimating);
        function afterAnimating() {
            if (afterAnimating.done) {
                return;
            }
            afterAnimating.done = true;
            if ($animateCss) {
                $animateCss(domEl, {
                    event: "leave"
                }).start().then(function() {
                    domEl.remove();
                });
            } else {
                $animate.leave(domEl);
            }
            scope.$destroy();
            if (done) {
                done();
            }
        }
    }
    $document.bind("keydown", function(evt) {
        if (evt.isDefaultPrevented()) {
            return evt;
        }
        var modal = openedWindows.top();
        if (modal && modal.value.keyboard) {
            switch (evt.which) {
              case 27:
                {
                    evt.preventDefault();
                    $rootScope.$apply(function() {
                        $modalStack.dismiss(modal.key, "escape key press");
                    });
                    break;
                }

              case 9:
                {
                    $modalStack.loadFocusElementList(modal);
                    var focusChanged = false;
                    if (evt.shiftKey) {
                        if ($modalStack.isFocusInFirstItem(evt)) {
                            focusChanged = $modalStack.focusLastFocusableElement();
                        }
                    } else {
                        if ($modalStack.isFocusInLastItem(evt)) {
                            focusChanged = $modalStack.focusFirstFocusableElement();
                        }
                    }
                    if (focusChanged) {
                        evt.preventDefault();
                        evt.stopPropagation();
                    }
                    break;
                }
            }
        }
    });
    $modalStack.open = function(modalInstance, modal) {
        var modalOpener = $document[0].activeElement, modalBodyClass = modal.openedClass || OPENED_MODAL_CLASS;
        openedWindows.add(modalInstance, {
            deferred: modal.deferred,
            renderDeferred: modal.renderDeferred,
            modalScope: modal.scope,
            backdrop: modal.backdrop,
            keyboard: modal.keyboard,
            openedClass: modal.openedClass
        });
        openedClasses.put(modalBodyClass, modalInstance);
        var body = $document.find("body").eq(0), currBackdropIndex = backdropIndex();
        if (currBackdropIndex >= 0 && !backdropDomEl) {
            backdropScope = $rootScope.$new(true);
            backdropScope.index = currBackdropIndex;
            var angularBackgroundDomEl = angular.element('<div modal-backdrop="modal-backdrop"></div>');
            angularBackgroundDomEl.attr("backdrop-class", modal.backdropClass);
            if (modal.animation) {
                angularBackgroundDomEl.attr("modal-animation", "true");
            }
            backdropDomEl = $compile(angularBackgroundDomEl)(backdropScope);
            body.append(backdropDomEl);
        }
        var angularDomEl = angular.element('<div modal-window="modal-window"></div>');
        angularDomEl.attr({
            "template-url": modal.windowTemplateUrl,
            "window-class": modal.windowClass,
            size: modal.size,
            index: openedWindows.length() - 1,
            animate: "animate"
        }).html(modal.content);
        if (modal.animation) {
            angularDomEl.attr("modal-animation", "true");
        }
        var modalDomEl = $compile(angularDomEl)(modal.scope);
        openedWindows.top().value.modalDomEl = modalDomEl;
        openedWindows.top().value.modalOpener = modalOpener;
        body.append(modalDomEl);
        body.addClass(modalBodyClass);
        $modalStack.clearFocusListCache();
    };
    function broadcastClosing(modalWindow, resultOrReason, closing) {
        return !modalWindow.value.modalScope.$broadcast("modal.closing", resultOrReason, closing).defaultPrevented;
    }
    $modalStack.close = function(modalInstance, result) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow && broadcastClosing(modalWindow, result, true)) {
            modalWindow.value.modalScope.$$uibDestructionScheduled = true;
            modalWindow.value.deferred.resolve(result);
            removeModalWindow(modalInstance, modalWindow.value.modalOpener);
            return true;
        }
        return !modalWindow;
    };
    $modalStack.dismiss = function(modalInstance, reason) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow && broadcastClosing(modalWindow, reason, false)) {
            modalWindow.value.modalScope.$$uibDestructionScheduled = true;
            modalWindow.value.deferred.reject(reason);
            removeModalWindow(modalInstance, modalWindow.value.modalOpener);
            return true;
        }
        return !modalWindow;
    };
    $modalStack.dismissAll = function(reason) {
        var topModal = this.getTop();
        while (topModal && this.dismiss(topModal.key, reason)) {
            topModal = this.getTop();
        }
    };
    $modalStack.getTop = function() {
        return openedWindows.top();
    };
    $modalStack.modalRendered = function(modalInstance) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow) {
            modalWindow.value.renderDeferred.resolve();
        }
    };
    $modalStack.focusFirstFocusableElement = function() {
        if (focusableElementList.length > 0) {
            focusableElementList[0].focus();
            return true;
        }
        return false;
    };
    $modalStack.focusLastFocusableElement = function() {
        if (focusableElementList.length > 0) {
            focusableElementList[focusableElementList.length - 1].focus();
            return true;
        }
        return false;
    };
    $modalStack.isFocusInFirstItem = function(evt) {
        if (focusableElementList.length > 0) {
            return (evt.target || evt.srcElement) == focusableElementList[0];
        }
        return false;
    };
    $modalStack.isFocusInLastItem = function(evt) {
        if (focusableElementList.length > 0) {
            return (evt.target || evt.srcElement) == focusableElementList[focusableElementList.length - 1];
        }
        return false;
    };
    $modalStack.clearFocusListCache = function() {
        focusableElementList = [];
        focusIndex = 0;
    };
    $modalStack.loadFocusElementList = function(modalWindow) {
        if (focusableElementList === undefined || !focusableElementList.length0) {
            if (modalWindow) {
                var modalDomE1 = modalWindow.value.modalDomEl;
                if (modalDomE1 && modalDomE1.length) {
                    focusableElementList = modalDomE1[0].querySelectorAll(tababbleSelector);
                }
            }
        }
    };
    return $modalStack;
} ]).provider("$modal", function() {
    var $modalProvider = {
        options: {
            animation: true,
            backdrop: true,
            keyboard: true
        },
        $get: [ "$injector", "$rootScope", "$q", "$templateRequest", "$controller", "$modalStack", function($injector, $rootScope, $q, $templateRequest, $controller, $modalStack) {
            var $modal = {};
            function getTemplatePromise(options) {
                return options.template ? $q.when(options.template) : $templateRequest(angular.isFunction(options.templateUrl) ? options.templateUrl() : options.templateUrl);
            }
            function getResolvePromises(resolves) {
                var promisesArr = [];
                angular.forEach(resolves, function(value) {
                    if (angular.isFunction(value) || angular.isArray(value)) {
                        promisesArr.push($q.when($injector.invoke(value)));
                    } else if (angular.isString(value)) {
                        promisesArr.push($q.when($injector.get(value)));
                    } else {
                        promisesArr.push($q.when(value));
                    }
                });
                return promisesArr;
            }
            var promiseChain = null;
            $modal.getPromiseChain = function() {
                return promiseChain;
            };
            $modal.open = function(modalOptions) {
                var modalResultDeferred = $q.defer();
                var modalOpenedDeferred = $q.defer();
                var modalRenderDeferred = $q.defer();
                var modalInstance = {
                    result: modalResultDeferred.promise,
                    opened: modalOpenedDeferred.promise,
                    rendered: modalRenderDeferred.promise,
                    close: function(result) {
                        return $modalStack.close(modalInstance, result);
                    },
                    dismiss: function(reason) {
                        return $modalStack.dismiss(modalInstance, reason);
                    }
                };
                modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
                modalOptions.resolve = modalOptions.resolve || {};
                if (!modalOptions.template && !modalOptions.templateUrl) {
                    throw new Error("One of template or templateUrl options is required.");
                }
                var templateAndResolvePromise = $q.all([ getTemplatePromise(modalOptions) ].concat(getResolvePromises(modalOptions.resolve)));
                var samePromise;
                samePromise = promiseChain = $q.all([ promiseChain ]).then(function() {
                    return templateAndResolvePromise;
                }, function() {
                    return templateAndResolvePromise;
                }).then(function resolveSuccess(tplAndVars) {
                    var modalScope = (modalOptions.scope || $rootScope).$new();
                    modalScope.$close = modalInstance.close;
                    modalScope.$dismiss = modalInstance.dismiss;
                    modalScope.$on("$destroy", function() {
                        if (!modalScope.$$uibDestructionScheduled) {
                            modalScope.$dismiss("$uibUnscheduledDestruction");
                        }
                    });
                    var ctrlInstance, ctrlLocals = {};
                    var resolveIter = 1;
                    if (modalOptions.controller) {
                        ctrlLocals.$scope = modalScope;
                        ctrlLocals.$modalInstance = modalInstance;
                        angular.forEach(modalOptions.resolve, function(value, key) {
                            ctrlLocals[key] = tplAndVars[resolveIter++];
                        });
                        ctrlInstance = $controller(modalOptions.controller, ctrlLocals);
                        if (modalOptions.controllerAs) {
                            if (modalOptions.bindToController) {
                                angular.extend(ctrlInstance, modalScope);
                            }
                            modalScope[modalOptions.controllerAs] = ctrlInstance;
                        }
                    }
                    $modalStack.open(modalInstance, {
                        scope: modalScope,
                        deferred: modalResultDeferred,
                        renderDeferred: modalRenderDeferred,
                        content: tplAndVars[0],
                        animation: modalOptions.animation,
                        backdrop: modalOptions.backdrop,
                        keyboard: modalOptions.keyboard,
                        backdropClass: modalOptions.backdropClass,
                        windowClass: modalOptions.windowClass,
                        windowTemplateUrl: modalOptions.windowTemplateUrl,
                        size: modalOptions.size,
                        openedClass: modalOptions.openedClass
                    });
                    modalOpenedDeferred.resolve(true);
                }, function resolveError(reason) {
                    modalOpenedDeferred.reject(reason);
                    modalResultDeferred.reject(reason);
                }).finally(function() {
                    if (promiseChain === samePromise) {
                        promiseChain = null;
                    }
                });
                return modalInstance;
            };
            return $modal;
        } ]
    };
    return $modalProvider;
});

angular.module("ui.bootstrap.pagination", []).controller("PaginationController", [ "$scope", "$attrs", "$parse", function($scope, $attrs, $parse) {
    var self = this, ngModelCtrl = {
        $setViewValue: angular.noop
    }, setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;
    this.init = function(ngModelCtrl_, config) {
        ngModelCtrl = ngModelCtrl_;
        this.config = config;
        ngModelCtrl.$render = function() {
            self.render();
        };
        if ($attrs.itemsPerPage) {
            $scope.$parent.$watch($parse($attrs.itemsPerPage), function(value) {
                self.itemsPerPage = parseInt(value, 10);
                $scope.totalPages = self.calculateTotalPages();
            });
        } else {
            this.itemsPerPage = config.itemsPerPage;
        }
        $scope.$watch("totalItems", function() {
            $scope.totalPages = self.calculateTotalPages();
        });
        $scope.$watch("totalPages", function(value) {
            setNumPages($scope.$parent, value);
            if ($scope.page > value) {
                $scope.selectPage(value);
            } else {
                ngModelCtrl.$render();
            }
        });
    };
    this.calculateTotalPages = function() {
        var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / this.itemsPerPage);
        return Math.max(totalPages || 0, 1);
    };
    this.render = function() {
        $scope.page = parseInt(ngModelCtrl.$viewValue, 10) || 1;
    };
    $scope.selectPage = function(page, evt) {
        if (evt) {
            evt.preventDefault();
        }
        var clickAllowed = !$scope.ngDisabled || !evt;
        if (clickAllowed && $scope.page !== page && page > 0 && page <= $scope.totalPages) {
            if (evt && evt.target) {
                evt.target.blur();
            }
            ngModelCtrl.$setViewValue(page);
            ngModelCtrl.$render();
        }
    };
    $scope.getText = function(key) {
        return $scope[key + "Text"] || self.config[key + "Text"];
    };
    $scope.noPrevious = function() {
        return $scope.page === 1;
    };
    $scope.noNext = function() {
        return $scope.page === $scope.totalPages;
    };
} ]).constant("paginationConfig", {
    itemsPerPage: 10,
    boundaryLinks: false,
    directionLinks: true,
    firstText: "First",
    previousText: "Previous",
    nextText: "Next",
    lastText: "Last",
    rotate: true
}).directive("pagination", [ "$parse", "paginationConfig", function($parse, paginationConfig) {
    return {
        restrict: "EA",
        scope: {
            totalItems: "=",
            firstText: "@",
            previousText: "@",
            nextText: "@",
            lastText: "@",
            ngDisabled: "="
        },
        require: [ "pagination", "?ngModel" ],
        controller: "PaginationController",
        controllerAs: "pagination",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "template/pagination/pagination.html";
        },
        replace: true,
        link: function(scope, element, attrs, ctrls) {
            var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            if (!ngModelCtrl) {
                return;
            }
            var maxSize = angular.isDefined(attrs.maxSize) ? scope.$parent.$eval(attrs.maxSize) : paginationConfig.maxSize, rotate = angular.isDefined(attrs.rotate) ? scope.$parent.$eval(attrs.rotate) : paginationConfig.rotate;
            scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : paginationConfig.boundaryLinks;
            scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : paginationConfig.directionLinks;
            paginationCtrl.init(ngModelCtrl, paginationConfig);
            if (attrs.maxSize) {
                scope.$parent.$watch($parse(attrs.maxSize), function(value) {
                    maxSize = parseInt(value, 10);
                    paginationCtrl.render();
                });
            }
            function makePage(number, text, isActive) {
                return {
                    number: number,
                    text: text,
                    active: isActive
                };
            }
            function getPages(currentPage, totalPages) {
                var pages = [];
                var startPage = 1, endPage = totalPages;
                var isMaxSized = angular.isDefined(maxSize) && maxSize < totalPages;
                if (isMaxSized) {
                    if (rotate) {
                        startPage = Math.max(currentPage - Math.floor(maxSize / 2), 1);
                        endPage = startPage + maxSize - 1;
                        if (endPage > totalPages) {
                            endPage = totalPages;
                            startPage = endPage - maxSize + 1;
                        }
                    } else {
                        startPage = (Math.ceil(currentPage / maxSize) - 1) * maxSize + 1;
                        endPage = Math.min(startPage + maxSize - 1, totalPages);
                    }
                }
                for (var number = startPage; number <= endPage; number++) {
                    var page = makePage(number, number, number === currentPage);
                    pages.push(page);
                }
                if (isMaxSized && !rotate) {
                    if (startPage > 1) {
                        var previousPageSet = makePage(startPage - 1, "...", false);
                        pages.unshift(previousPageSet);
                    }
                    if (endPage < totalPages) {
                        var nextPageSet = makePage(endPage + 1, "...", false);
                        pages.push(nextPageSet);
                    }
                }
                return pages;
            }
            var originalRender = paginationCtrl.render;
            paginationCtrl.render = function() {
                originalRender();
                if (scope.page > 0 && scope.page <= scope.totalPages) {
                    scope.pages = getPages(scope.page, scope.totalPages);
                }
            };
        }
    };
} ]).constant("pagerConfig", {
    itemsPerPage: 10,
    previousText: "Â« Previous",
    nextText: "Next Â»",
    align: true
}).directive("pager", [ "pagerConfig", function(pagerConfig) {
    return {
        restrict: "EA",
        scope: {
            totalItems: "=",
            previousText: "@",
            nextText: "@",
            ngDisabled: "="
        },
        require: [ "pager", "?ngModel" ],
        controller: "PaginationController",
        controllerAs: "pagination",
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "template/pagination/pager.html";
        },
        replace: true,
        link: function(scope, element, attrs, ctrls) {
            var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            if (!ngModelCtrl) {
                return;
            }
            scope.align = angular.isDefined(attrs.align) ? scope.$parent.$eval(attrs.align) : pagerConfig.align;
            paginationCtrl.init(ngModelCtrl, pagerConfig);
        }
    };
} ]);

angular.module("ui.bootstrap.tooltip", [ "ui.bootstrap.position", "ui.bootstrap.bindHtml" ]).provider("$tooltip", function() {
    var defaultOptions = {
        placement: "top",
        animation: true,
        popupDelay: 0,
        useContentExp: false
    };
    var triggerMap = {
        mouseenter: "mouseleave",
        click: "click",
        focus: "blur",
        none: ""
    };
    var globalOptions = {};
    this.options = function(value) {
        angular.extend(globalOptions, value);
    };
    this.setTriggers = function setTriggers(triggers) {
        angular.extend(triggerMap, triggers);
    };
    function snake_case(name) {
        var regexp = /[A-Z]/g;
        var separator = "-";
        return name.replace(regexp, function(letter, pos) {
            return (pos ? separator : "") + letter.toLowerCase();
        });
    }
    this.$get = [ "$window", "$compile", "$timeout", "$document", "$position", "$interpolate", "$rootScope", "$parse", function($window, $compile, $timeout, $document, $position, $interpolate, $rootScope, $parse) {
        return function $tooltip(type, prefix, defaultTriggerShow, options) {
            options = angular.extend({}, defaultOptions, globalOptions, options);
            function getTriggers(trigger) {
                var show = (trigger || options.trigger || defaultTriggerShow).split(" ");
                var hide = show.map(function(trigger) {
                    return triggerMap[trigger] || trigger;
                });
                return {
                    show: show,
                    hide: hide
                };
            }
            var directiveName = snake_case(type);
            var startSym = $interpolate.startSymbol();
            var endSym = $interpolate.endSymbol();
            var template = "<div " + directiveName + "-popup " + 'title="' + startSym + "title" + endSym + '" ' + (options.useContentExp ? 'content-exp="contentExp()" ' : 'content="' + startSym + "content" + endSym + '" ') + 'placement="' + startSym + "placement" + endSym + '" ' + 'popup-class="' + startSym + "popupClass" + endSym + '" ' + 'animation="animation" ' + 'is-open="isOpen"' + 'origin-scope="origScope" ' + ">" + "</div>";
            return {
                restrict: "EA",
                compile: function(tElem, tAttrs) {
                    var tooltipLinker = $compile(template);
                    return function link(scope, element, attrs, tooltipCtrl) {
                        var tooltip;
                        var tooltipLinkedScope;
                        var transitionTimeout;
                        var popupTimeout;
                        var positionTimeout;
                        var appendToBody = angular.isDefined(options.appendToBody) ? options.appendToBody : false;
                        var triggers = getTriggers(undefined);
                        var hasEnableExp = angular.isDefined(attrs[prefix + "Enable"]);
                        var ttScope = scope.$new(true);
                        var repositionScheduled = false;
                        var isOpenExp = angular.isDefined(attrs[prefix + "IsOpen"]) ? $parse(attrs[prefix + "IsOpen"]) : false;
                        var positionTooltip = function() {
                            if (!tooltip) {
                                return;
                            }
                            if (!positionTimeout) {
                                positionTimeout = $timeout(function() {
                                    tooltip.css({
                                        top: 0,
                                        left: 0,
                                        width: "auto",
                                        height: "auto"
                                    });
                                    var ttBox = $position.position(tooltip);
                                    var ttCss = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);
                                    ttCss.top += "px";
                                    ttCss.left += "px";
                                    ttCss.width = ttBox.width + "px";
                                    ttCss.height = ttBox.height + "px";
                                    tooltip.css(ttCss);
                                    positionTimeout = null;
                                }, 0, false);
                            }
                        };
                        ttScope.origScope = scope;
                        ttScope.isOpen = false;
                        function toggleTooltipBind() {
                            if (!ttScope.isOpen) {
                                showTooltipBind();
                            } else {
                                hideTooltipBind();
                            }
                        }
                        function showTooltipBind() {
                            if (hasEnableExp && !scope.$eval(attrs[prefix + "Enable"])) {
                                return;
                            }
                            prepareTooltip();
                            if (ttScope.popupDelay) {
                                if (!popupTimeout) {
                                    popupTimeout = $timeout(show, ttScope.popupDelay, false);
                                }
                            } else {
                                show();
                            }
                        }
                        function hideTooltipBind() {
                            hide();
                            if (!$rootScope.$$phase) {
                                $rootScope.$digest();
                            }
                        }
                        function show() {
                            popupTimeout = null;
                            if (transitionTimeout) {
                                $timeout.cancel(transitionTimeout);
                                transitionTimeout = null;
                            }
                            if (!(options.useContentExp ? ttScope.contentExp() : ttScope.content)) {
                                return angular.noop;
                            }
                            createTooltip();
                            ttScope.isOpen = true;
                            if (isOpenExp) {
                                isOpenExp.assign(ttScope.origScope, ttScope.isOpen);
                            }
                            if (!$rootScope.$$phase) {
                                ttScope.$apply();
                            }
                            tooltip.css({
                                display: "block"
                            });
                            positionTooltip();
                        }
                        function hide() {
                            ttScope.isOpen = false;
                            if (isOpenExp) {
                                isOpenExp.assign(ttScope.origScope, ttScope.isOpen);
                            }
                            $timeout.cancel(popupTimeout);
                            popupTimeout = null;
                            $timeout.cancel(positionTimeout);
                            positionTimeout = null;
                            if (ttScope.animation) {
                                if (!transitionTimeout) {
                                    transitionTimeout = $timeout(removeTooltip, 500);
                                }
                            } else {
                                removeTooltip();
                            }
                        }
                        function createTooltip() {
                            if (tooltip) {
                                removeTooltip();
                            }
                            tooltipLinkedScope = ttScope.$new();
                            tooltip = tooltipLinker(tooltipLinkedScope, function(tooltip) {
                                if (appendToBody) {
                                    $document.find("body").append(tooltip);
                                } else {
                                    element.after(tooltip);
                                }
                            });
                            if (options.useContentExp) {
                                tooltipLinkedScope.$watch("contentExp()", function(val) {
                                    if (!val && ttScope.isOpen) {
                                        hide();
                                    }
                                });
                                tooltipLinkedScope.$watch(function() {
                                    if (!repositionScheduled) {
                                        repositionScheduled = true;
                                        tooltipLinkedScope.$$postDigest(function() {
                                            repositionScheduled = false;
                                            if (ttScope.isOpen) {
                                                positionTooltip();
                                            }
                                        });
                                    }
                                });
                            }
                        }
                        function removeTooltip() {
                            transitionTimeout = null;
                            if (tooltip) {
                                tooltip.remove();
                                tooltip = null;
                            }
                            if (tooltipLinkedScope) {
                                tooltipLinkedScope.$destroy();
                                tooltipLinkedScope = null;
                            }
                        }
                        function prepareTooltip() {
                            prepPopupClass();
                            prepPlacement();
                            prepPopupDelay();
                        }
                        ttScope.contentExp = function() {
                            return scope.$eval(attrs[type]);
                        };
                        if (!options.useContentExp) {
                            attrs.$observe(type, function(val) {
                                ttScope.content = val;
                                if (!val && ttScope.isOpen) {
                                    hide();
                                } else {
                                    positionTooltip();
                                }
                            });
                        }
                        attrs.$observe("disabled", function(val) {
                            if (popupTimeout && val) {
                                $timeout.cancel(popupTimeout);
                                popupTimeout = null;
                            }
                            if (val && ttScope.isOpen) {
                                hide();
                            }
                        });
                        attrs.$observe(prefix + "Title", function(val) {
                            ttScope.title = val;
                            positionTooltip();
                        });
                        attrs.$observe(prefix + "Placement", function() {
                            if (ttScope.isOpen) {
                                prepPlacement();
                                positionTooltip();
                            }
                        });
                        if (isOpenExp) {
                            scope.$watch(isOpenExp, function(val) {
                                if (val !== ttScope.isOpen) {
                                    toggleTooltipBind();
                                }
                            });
                        }
                        function prepPopupClass() {
                            ttScope.popupClass = attrs[prefix + "Class"];
                        }
                        function prepPlacement() {
                            var val = attrs[prefix + "Placement"];
                            ttScope.placement = angular.isDefined(val) ? val : options.placement;
                        }
                        function prepPopupDelay() {
                            var val = attrs[prefix + "PopupDelay"];
                            var delay = parseInt(val, 10);
                            ttScope.popupDelay = !isNaN(delay) ? delay : options.popupDelay;
                        }
                        var unregisterTriggers = function() {
                            triggers.show.forEach(function(trigger) {
                                element.unbind(trigger, showTooltipBind);
                            });
                            triggers.hide.forEach(function(trigger) {
                                element.unbind(trigger, hideTooltipBind);
                            });
                        };
                        function prepTriggers() {
                            var val = attrs[prefix + "Trigger"];
                            unregisterTriggers();
                            triggers = getTriggers(val);
                            if (triggers.show !== "none") {
                                triggers.show.forEach(function(trigger, idx) {
                                    if (trigger === triggers.hide[idx]) {
                                        element[0].addEventListener(trigger, toggleTooltipBind);
                                    } else if (trigger) {
                                        element[0].addEventListener(trigger, showTooltipBind);
                                        element[0].addEventListener(triggers.hide[idx], hideTooltipBind);
                                    }
                                });
                            }
                        }
                        prepTriggers();
                        var animation = scope.$eval(attrs[prefix + "Animation"]);
                        ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;
                        var appendToBodyVal = scope.$eval(attrs[prefix + "AppendToBody"]);
                        appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;
                        if (appendToBody) {
                            scope.$on("$locationChangeSuccess", function closeTooltipOnLocationChangeSuccess() {
                                if (ttScope.isOpen) {
                                    hide();
                                }
                            });
                        }
                        scope.$on("$destroy", function onDestroyTooltip() {
                            $timeout.cancel(transitionTimeout);
                            $timeout.cancel(popupTimeout);
                            $timeout.cancel(positionTimeout);
                            unregisterTriggers();
                            removeTooltip();
                            ttScope = null;
                        });
                    };
                }
            };
        };
    } ];
}).directive("tooltipTemplateTransclude", [ "$animate", "$sce", "$compile", "$templateRequest", function($animate, $sce, $compile, $templateRequest) {
    return {
        link: function(scope, elem, attrs) {
            var origScope = scope.$eval(attrs.tooltipTemplateTranscludeScope);
            var changeCounter = 0, currentScope, previousElement, currentElement;
            var cleanupLastIncludeContent = function() {
                if (previousElement) {
                    previousElement.remove();
                    previousElement = null;
                }
                if (currentScope) {
                    currentScope.$destroy();
                    currentScope = null;
                }
                if (currentElement) {
                    $animate.leave(currentElement).then(function() {
                        previousElement = null;
                    });
                    previousElement = currentElement;
                    currentElement = null;
                }
            };
            scope.$watch($sce.parseAsResourceUrl(attrs.tooltipTemplateTransclude), function(src) {
                var thisChangeId = ++changeCounter;
                if (src) {
                    $templateRequest(src, true).then(function(response) {
                        if (thisChangeId !== changeCounter) {
                            return;
                        }
                        var newScope = origScope.$new();
                        var template = response;
                        var clone = $compile(template)(newScope, function(clone) {
                            cleanupLastIncludeContent();
                            $animate.enter(clone, elem);
                        });
                        currentScope = newScope;
                        currentElement = clone;
                        currentScope.$emit("$includeContentLoaded", src);
                    }, function() {
                        if (thisChangeId === changeCounter) {
                            cleanupLastIncludeContent();
                            scope.$emit("$includeContentError", src);
                        }
                    });
                    scope.$emit("$includeContentRequested", src);
                } else {
                    cleanupLastIncludeContent();
                }
            });
            scope.$on("$destroy", cleanupLastIncludeContent);
        }
    };
} ]).directive("tooltipClasses", function() {
    return {
        restrict: "A",
        link: function(scope, element, attrs) {
            if (scope.placement) {
                element.addClass(scope.placement);
            }
            if (scope.popupClass) {
                element.addClass(scope.popupClass);
            }
            if (scope.animation()) {
                element.addClass(attrs.tooltipAnimationClass);
            }
        }
    };
}).directive("tooltipPopup", function() {
    return {
        restrict: "EA",
        replace: true,
        scope: {
            content: "@",
            placement: "@",
            popupClass: "@",
            animation: "&",
            isOpen: "&"
        },
        templateUrl: "template/tooltip/tooltip-popup.html"
    };
}).directive("tooltip", [ "$tooltip", function($tooltip) {
    return $tooltip("tooltip", "tooltip", "mouseenter");
} ]).directive("tooltipTemplatePopup", function() {
    return {
        restrict: "EA",
        replace: true,
        scope: {
            contentExp: "&",
            placement: "@",
            popupClass: "@",
            animation: "&",
            isOpen: "&",
            originScope: "&"
        },
        templateUrl: "template/tooltip/tooltip-template-popup.html"
    };
}).directive("tooltipTemplate", [ "$tooltip", function($tooltip) {
    return $tooltip("tooltipTemplate", "tooltip", "mouseenter", {
        useContentExp: true
    });
} ]).directive("tooltipHtmlPopup", function() {
    return {
        restrict: "EA",
        replace: true,
        scope: {
            contentExp: "&",
            placement: "@",
            popupClass: "@",
            animation: "&",
            isOpen: "&"
        },
        templateUrl: "template/tooltip/tooltip-html-popup.html"
    };
}).directive("tooltipHtml", [ "$tooltip", function($tooltip) {
    return $tooltip("tooltipHtml", "tooltip", "mouseenter", {
        useContentExp: true
    });
} ]).directive("tooltipHtmlUnsafePopup", function() {
    return {
        restrict: "EA",
        replace: true,
        scope: {
            content: "@",
            placement: "@",
            popupClass: "@",
            animation: "&",
            isOpen: "&"
        },
        templateUrl: "template/tooltip/tooltip-html-unsafe-popup.html"
    };
}).value("tooltipHtmlUnsafeSuppressDeprecated", false).directive("tooltipHtmlUnsafe", [ "$tooltip", "tooltipHtmlUnsafeSuppressDeprecated", "$log", function($tooltip, tooltipHtmlUnsafeSuppressDeprecated, $log) {
    if (!tooltipHtmlUnsafeSuppressDeprecated) {
        $log.warn("tooltip-html-unsafe is now deprecated. Use tooltip-html or tooltip-template instead.");
    }
    return $tooltip("tooltipHtmlUnsafe", "tooltip", "mouseenter");
} ]);

angular.module("ui.bootstrap.popover", [ "ui.bootstrap.tooltip" ]).directive("popoverTemplatePopup", function() {
    return {
        restrict: "EA",
        replace: true,
        scope: {
            title: "@",
            contentExp: "&",
            placement: "@",
            popupClass: "@",
            animation: "&",
            isOpen: "&",
            originScope: "&"
        },
        templateUrl: "template/popover/popover-template.html"
    };
}).directive("popoverTemplate", [ "$tooltip", function($tooltip) {
    return $tooltip("popoverTemplate", "popover", "click", {
        useContentExp: true
    });
} ]).directive("popoverHtmlPopup", function() {
    return {
        restrict: "EA",
        replace: true,
        scope: {
            contentExp: "&",
            title: "@",
            placement: "@",
            popupClass: "@",
            animation: "&",
            isOpen: "&"
        },
        templateUrl: "template/popover/popover-html.html"
    };
}).directive("popoverHtml", [ "$tooltip", function($tooltip) {
    return $tooltip("popoverHtml", "popover", "click", {
        useContentExp: true
    });
} ]).directive("popoverPopup", function() {
    return {
        restrict: "EA",
        replace: true,
        scope: {
            title: "@",
            content: "@",
            placement: "@",
            popupClass: "@",
            animation: "&",
            isOpen: "&"
        },
        templateUrl: "template/popover/popover.html"
    };
}).directive("popover", [ "$tooltip", function($tooltip) {
    return $tooltip("popover", "popover", "click");
} ]);

angular.module("ui.bootstrap.progressbar", []).constant("progressConfig", {
    animate: true,
    max: 100
}).value("$progressSuppressWarning", false).controller("ProgressController", [ "$scope", "$attrs", "progressConfig", function($scope, $attrs, progressConfig) {
    var self = this, animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;
    this.bars = [];
    $scope.max = angular.isDefined($scope.max) ? $scope.max : progressConfig.max;
    this.addBar = function(bar, element) {
        if (!animate) {
            element.css({
                transition: "none"
            });
        }
        this.bars.push(bar);
        bar.max = $scope.max;
        bar.$watch("value", function(value) {
            bar.recalculatePercentage();
        });
        bar.recalculatePercentage = function() {
            bar.percent = +(100 * bar.value / bar.max).toFixed(2);
            var totalPercentage = self.bars.reduce(function(total, bar) {
                return total + bar.percent;
            }, 0);
            if (totalPercentage > 100) {
                bar.percent -= totalPercentage - 100;
            }
        };
        bar.$on("$destroy", function() {
            element = null;
            self.removeBar(bar);
        });
    };
    this.removeBar = function(bar) {
        this.bars.splice(this.bars.indexOf(bar), 1);
    };
    $scope.$watch("max", function(max) {
        self.bars.forEach(function(bar) {
            bar.max = $scope.max;
            bar.recalculatePercentage();
        });
    });
} ]).directive("uibProgress", function() {
    return {
        restrict: "EA",
        replace: true,
        transclude: true,
        controller: "ProgressController",
        require: "uibProgress",
        scope: {
            max: "=?"
        },
        templateUrl: "template/progressbar/progress.html"
    };
}).directive("progress", [ "$log", "$progressSuppressWarning", function($log, $progressSuppressWarning) {
    return {
        restrict: "EA",
        replace: true,
        transclude: true,
        controller: "ProgressController",
        require: "progress",
        scope: {
            max: "=?"
        },
        templateUrl: "template/progressbar/progress.html",
        link: function() {
            if ($progressSuppressWarning) {
                $log.warn("progress is now deprecated. Use uib-progress instead");
            }
        }
    };
} ]).directive("uibBar", function() {
    return {
        restrict: "EA",
        replace: true,
        transclude: true,
        require: "^uibProgress",
        scope: {
            value: "=",
            type: "@"
        },
        templateUrl: "template/progressbar/bar.html",
        link: function(scope, element, attrs, progressCtrl) {
            progressCtrl.addBar(scope, element);
        }
    };
}).directive("bar", [ "$log", "$progressSuppressWarning", function($log, $progressSuppressWarning) {
    return {
        restrict: "EA",
        replace: true,
        transclude: true,
        require: "^progress",
        scope: {
            value: "=",
            type: "@"
        },
        templateUrl: "template/progressbar/bar.html",
        link: function(scope, element, attrs, progressCtrl) {
            if ($progressSuppressWarning) {
                $log.warn("bar is now deprecated. Use uib-bar instead");
            }
            progressCtrl.addBar(scope, element);
        }
    };
} ]).directive("progressbar", function() {
    return {
        restrict: "EA",
        replace: true,
        transclude: true,
        controller: "ProgressController",
        scope: {
            value: "=",
            max: "=?",
            type: "@"
        },
        templateUrl: "template/progressbar/progressbar.html",
        link: function(scope, element, attrs, progressCtrl) {
            progressCtrl.addBar(scope, angular.element(element.children()[0]));
        }
    };
});

angular.module("ui.bootstrap.rating", []).constant("ratingConfig", {
    max: 5,
    stateOn: null,
    stateOff: null,
    titles: [ "one", "two", "three", "four", "five" ]
}).controller("RatingController", [ "$scope", "$attrs", "ratingConfig", function($scope, $attrs, ratingConfig) {
    var ngModelCtrl = {
        $setViewValue: angular.noop
    };
    this.init = function(ngModelCtrl_) {
        ngModelCtrl = ngModelCtrl_;
        ngModelCtrl.$render = this.render;
        ngModelCtrl.$formatters.push(function(value) {
            if (angular.isNumber(value) && value << 0 !== value) {
                value = Math.round(value);
            }
            return value;
        });
        this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;
        this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;
        var tmpTitles = angular.isDefined($attrs.titles) ? $scope.$parent.$eval($attrs.titles) : ratingConfig.titles;
        this.titles = angular.isArray(tmpTitles) && tmpTitles.length > 0 ? tmpTitles : ratingConfig.titles;
        var ratingStates = angular.isDefined($attrs.ratingStates) ? $scope.$parent.$eval($attrs.ratingStates) : new Array(angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max);
        $scope.range = this.buildTemplateObjects(ratingStates);
    };
    this.buildTemplateObjects = function(states) {
        for (var i = 0, n = states.length; i < n; i++) {
            states[i] = angular.extend({
                index: i
            }, {
                stateOn: this.stateOn,
                stateOff: this.stateOff,
                title: this.getTitle(i)
            }, states[i]);
        }
        return states;
    };
    this.getTitle = function(index) {
        if (index >= this.titles.length) {
            return index + 1;
        } else {
            return this.titles[index];
        }
    };
    $scope.rate = function(value) {
        if (!$scope.readonly && value >= 0 && value <= $scope.range.length) {
            ngModelCtrl.$setViewValue(ngModelCtrl.$viewValue === value ? 0 : value);
            ngModelCtrl.$render();
        }
    };
    $scope.enter = function(value) {
        if (!$scope.readonly) {
            $scope.value = value;
        }
        $scope.onHover({
            value: value
        });
    };
    $scope.reset = function() {
        $scope.value = ngModelCtrl.$viewValue;
        $scope.onLeave();
    };
    $scope.onKeydown = function(evt) {
        if (/(37|38|39|40)/.test(evt.which)) {
            evt.preventDefault();
            evt.stopPropagation();
            $scope.rate($scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1));
        }
    };
    this.render = function() {
        $scope.value = ngModelCtrl.$viewValue;
    };
} ]).directive("rating", function() {
    return {
        restrict: "EA",
        require: [ "rating", "ngModel" ],
        scope: {
            readonly: "=?",
            onHover: "&",
            onLeave: "&"
        },
        controller: "RatingController",
        templateUrl: "template/rating/rating.html",
        replace: true,
        link: function(scope, element, attrs, ctrls) {
            var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            ratingCtrl.init(ngModelCtrl);
        }
    };
});

angular.module("ui.bootstrap.tabs", []).controller("TabsetController", [ "$scope", function TabsetCtrl($scope) {
    var ctrl = this, tabs = ctrl.tabs = $scope.tabs = [];
    ctrl.select = function(selectedTab) {
        angular.forEach(tabs, function(tab) {
            if (tab.active && tab !== selectedTab) {
                tab.active = false;
                tab.onDeselect();
                selectedTab.selectCalled = false;
            }
        });
        selectedTab.active = true;
        if (!selectedTab.selectCalled) {
            selectedTab.onSelect();
            selectedTab.selectCalled = true;
        }
    };
    ctrl.addTab = function addTab(tab) {
        tabs.push(tab);
        if (tabs.length === 1 && tab.active !== false) {
            tab.active = true;
        } else if (tab.active) {
            ctrl.select(tab);
        } else {
            tab.active = false;
        }
    };
    ctrl.removeTab = function removeTab(tab) {
        var index = tabs.indexOf(tab);
        if (tab.active && tabs.length > 1 && !destroyed) {
            var newActiveIndex = index == tabs.length - 1 ? index - 1 : index + 1;
            ctrl.select(tabs[newActiveIndex]);
        }
        tabs.splice(index, 1);
    };
    var destroyed;
    $scope.$on("$destroy", function() {
        destroyed = true;
    });
} ]).directive("tabset", function() {
    return {
        restrict: "EA",
        transclude: true,
        replace: true,
        scope: {
            type: "@"
        },
        controller: "TabsetController",
        templateUrl: "template/tabs/tabset.html",
        link: function(scope, element, attrs) {
            scope.vertical = angular.isDefined(attrs.vertical) ? scope.$parent.$eval(attrs.vertical) : false;
            scope.justified = angular.isDefined(attrs.justified) ? scope.$parent.$eval(attrs.justified) : false;
        }
    };
}).directive("tab", [ "$parse", "$log", function($parse, $log) {
    return {
        require: "^tabset",
        restrict: "EA",
        replace: true,
        templateUrl: "template/tabs/tab.html",
        transclude: true,
        scope: {
            active: "=?",
            heading: "@",
            onSelect: "&select",
            onDeselect: "&deselect"
        },
        controller: function() {},
        link: function(scope, elm, attrs, tabsetCtrl, transclude) {
            scope.$watch("active", function(active) {
                if (active) {
                    tabsetCtrl.select(scope);
                }
            });
            scope.disabled = false;
            if (attrs.disable) {
                scope.$parent.$watch($parse(attrs.disable), function(value) {
                    scope.disabled = !!value;
                });
            }
            if (attrs.disabled) {
                $log.warn('Use of "disabled" attribute has been deprecated, please use "disable"');
                scope.$parent.$watch($parse(attrs.disabled), function(value) {
                    scope.disabled = !!value;
                });
            }
            scope.select = function() {
                if (!scope.disabled) {
                    scope.active = true;
                }
            };
            tabsetCtrl.addTab(scope);
            scope.$on("$destroy", function() {
                tabsetCtrl.removeTab(scope);
            });
            scope.$transcludeFn = transclude;
        }
    };
} ]).directive("tabHeadingTransclude", function() {
    return {
        restrict: "A",
        require: "^tab",
        link: function(scope, elm, attrs, tabCtrl) {
            scope.$watch("headingElement", function updateHeadingElement(heading) {
                if (heading) {
                    elm.html("");
                    elm.append(heading);
                }
            });
        }
    };
}).directive("tabContentTransclude", function() {
    return {
        restrict: "A",
        require: "^tabset",
        link: function(scope, elm, attrs) {
            var tab = scope.$eval(attrs.tabContentTransclude);
            tab.$transcludeFn(tab.$parent, function(contents) {
                angular.forEach(contents, function(node) {
                    if (isTabHeading(node)) {
                        tab.headingElement = node;
                    } else {
                        elm.append(node);
                    }
                });
            });
        }
    };
    function isTabHeading(node) {
        return node.tagName && (node.hasAttribute("tab-heading") || node.hasAttribute("data-tab-heading") || node.hasAttribute("x-tab-heading") || node.tagName.toLowerCase() === "tab-heading" || node.tagName.toLowerCase() === "data-tab-heading" || node.tagName.toLowerCase() === "x-tab-heading");
    }
});

angular.module("ui.bootstrap.timepicker", []).constant("timepickerConfig", {
    hourStep: 1,
    minuteStep: 1,
    showMeridian: true,
    meridians: null,
    readonlyInput: false,
    mousewheel: true,
    arrowkeys: true,
    showSpinners: true
}).controller("TimepickerController", [ "$scope", "$attrs", "$parse", "$log", "$locale", "timepickerConfig", function($scope, $attrs, $parse, $log, $locale, timepickerConfig) {
    var selected = new Date(), ngModelCtrl = {
        $setViewValue: angular.noop
    }, meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS;
    this.init = function(ngModelCtrl_, inputs) {
        ngModelCtrl = ngModelCtrl_;
        ngModelCtrl.$render = this.render;
        ngModelCtrl.$formatters.unshift(function(modelValue) {
            return modelValue ? new Date(modelValue) : null;
        });
        var hoursInputEl = inputs.eq(0), minutesInputEl = inputs.eq(1);
        var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;
        if (mousewheel) {
            this.setupMousewheelEvents(hoursInputEl, minutesInputEl);
        }
        var arrowkeys = angular.isDefined($attrs.arrowkeys) ? $scope.$parent.$eval($attrs.arrowkeys) : timepickerConfig.arrowkeys;
        if (arrowkeys) {
            this.setupArrowkeyEvents(hoursInputEl, minutesInputEl);
        }
        $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;
        this.setupInputEvents(hoursInputEl, minutesInputEl);
    };
    var hourStep = timepickerConfig.hourStep;
    if ($attrs.hourStep) {
        $scope.$parent.$watch($parse($attrs.hourStep), function(value) {
            hourStep = parseInt(value, 10);
        });
    }
    var minuteStep = timepickerConfig.minuteStep;
    if ($attrs.minuteStep) {
        $scope.$parent.$watch($parse($attrs.minuteStep), function(value) {
            minuteStep = parseInt(value, 10);
        });
    }
    var min;
    $scope.$parent.$watch($parse($attrs.min), function(value) {
        var dt = new Date(value);
        min = isNaN(dt) ? undefined : dt;
    });
    var max;
    $scope.$parent.$watch($parse($attrs.max), function(value) {
        var dt = new Date(value);
        max = isNaN(dt) ? undefined : dt;
    });
    $scope.noIncrementHours = function() {
        var incrementedSelected = addMinutes(selected, hourStep * 60);
        return incrementedSelected > max || incrementedSelected < selected && incrementedSelected < min;
    };
    $scope.noDecrementHours = function() {
        var decrementedSelected = addMinutes(selected, -hourStep * 60);
        return decrementedSelected < min || decrementedSelected > selected && decrementedSelected > max;
    };
    $scope.noIncrementMinutes = function() {
        var incrementedSelected = addMinutes(selected, minuteStep);
        return incrementedSelected > max || incrementedSelected < selected && incrementedSelected < min;
    };
    $scope.noDecrementMinutes = function() {
        var decrementedSelected = addMinutes(selected, -minuteStep);
        return decrementedSelected < min || decrementedSelected > selected && decrementedSelected > max;
    };
    $scope.noToggleMeridian = function() {
        if (selected.getHours() < 13) {
            return addMinutes(selected, 12 * 60) > max;
        } else {
            return addMinutes(selected, -12 * 60) < min;
        }
    };
    $scope.showMeridian = timepickerConfig.showMeridian;
    if ($attrs.showMeridian) {
        $scope.$parent.$watch($parse($attrs.showMeridian), function(value) {
            $scope.showMeridian = !!value;
            if (ngModelCtrl.$error.time) {
                var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
                if (angular.isDefined(hours) && angular.isDefined(minutes)) {
                    selected.setHours(hours);
                    refresh();
                }
            } else {
                updateTemplate();
            }
        });
    }
    function getHoursFromTemplate() {
        var hours = parseInt($scope.hours, 10);
        var valid = $scope.showMeridian ? hours > 0 && hours < 13 : hours >= 0 && hours < 24;
        if (!valid) {
            return undefined;
        }
        if ($scope.showMeridian) {
            if (hours === 12) {
                hours = 0;
            }
            if ($scope.meridian === meridians[1]) {
                hours = hours + 12;
            }
        }
        return hours;
    }
    function getMinutesFromTemplate() {
        var minutes = parseInt($scope.minutes, 10);
        return minutes >= 0 && minutes < 60 ? minutes : undefined;
    }
    function pad(value) {
        return angular.isDefined(value) && value.toString().length < 2 ? "0" + value : value.toString();
    }
    this.setupMousewheelEvents = function(hoursInputEl, minutesInputEl) {
        var isScrollingUp = function(e) {
            if (e.originalEvent) {
                e = e.originalEvent;
            }
            var delta = e.wheelDelta ? e.wheelDelta : -e.deltaY;
            return e.detail || delta > 0;
        };
        hoursInputEl.bind("mousewheel wheel", function(e) {
            $scope.$apply(isScrollingUp(e) ? $scope.incrementHours() : $scope.decrementHours());
            e.preventDefault();
        });
        minutesInputEl.bind("mousewheel wheel", function(e) {
            $scope.$apply(isScrollingUp(e) ? $scope.incrementMinutes() : $scope.decrementMinutes());
            e.preventDefault();
        });
    };
    this.setupArrowkeyEvents = function(hoursInputEl, minutesInputEl) {
        hoursInputEl.bind("keydown", function(e) {
            if (e.which === 38) {
                e.preventDefault();
                $scope.incrementHours();
                $scope.$apply();
            } else if (e.which === 40) {
                e.preventDefault();
                $scope.decrementHours();
                $scope.$apply();
            }
        });
        minutesInputEl.bind("keydown", function(e) {
            if (e.which === 38) {
                e.preventDefault();
                $scope.incrementMinutes();
                $scope.$apply();
            } else if (e.which === 40) {
                e.preventDefault();
                $scope.decrementMinutes();
                $scope.$apply();
            }
        });
    };
    this.setupInputEvents = function(hoursInputEl, minutesInputEl) {
        if ($scope.readonlyInput) {
            $scope.updateHours = angular.noop;
            $scope.updateMinutes = angular.noop;
            return;
        }
        var invalidate = function(invalidHours, invalidMinutes) {
            ngModelCtrl.$setViewValue(null);
            ngModelCtrl.$setValidity("time", false);
            if (angular.isDefined(invalidHours)) {
                $scope.invalidHours = invalidHours;
            }
            if (angular.isDefined(invalidMinutes)) {
                $scope.invalidMinutes = invalidMinutes;
            }
        };
        $scope.updateHours = function() {
            var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
            if (angular.isDefined(hours) && angular.isDefined(minutes)) {
                selected.setHours(hours);
                if (selected < min || selected > max) {
                    invalidate(true);
                } else {
                    refresh("h");
                }
            } else {
                invalidate(true);
            }
        };
        hoursInputEl.bind("blur", function(e) {
            if (!$scope.invalidHours && $scope.hours < 10) {
                $scope.$apply(function() {
                    $scope.hours = pad($scope.hours);
                });
            }
        });
        $scope.updateMinutes = function() {
            var minutes = getMinutesFromTemplate(), hours = getHoursFromTemplate();
            if (angular.isDefined(minutes) && angular.isDefined(hours)) {
                selected.setMinutes(minutes);
                if (selected < min || selected > max) {
                    invalidate(undefined, true);
                } else {
                    refresh("m");
                }
            } else {
                invalidate(undefined, true);
            }
        };
        minutesInputEl.bind("blur", function(e) {
            if (!$scope.invalidMinutes && $scope.minutes < 10) {
                $scope.$apply(function() {
                    $scope.minutes = pad($scope.minutes);
                });
            }
        });
    };
    this.render = function() {
        var date = ngModelCtrl.$viewValue;
        if (isNaN(date)) {
            ngModelCtrl.$setValidity("time", false);
            $log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
        } else {
            if (date) {
                selected = date;
            }
            if (selected < min || selected > max) {
                ngModelCtrl.$setValidity("time", false);
                $scope.invalidHours = true;
                $scope.invalidMinutes = true;
            } else {
                makeValid();
            }
            updateTemplate();
        }
    };
    function refresh(keyboardChange) {
        makeValid();
        ngModelCtrl.$setViewValue(new Date(selected));
        updateTemplate(keyboardChange);
    }
    function makeValid() {
        ngModelCtrl.$setValidity("time", true);
        $scope.invalidHours = false;
        $scope.invalidMinutes = false;
    }
    function updateTemplate(keyboardChange) {
        var hours = selected.getHours(), minutes = selected.getMinutes();
        if ($scope.showMeridian) {
            hours = hours === 0 || hours === 12 ? 12 : hours % 12;
        }
        $scope.hours = keyboardChange === "h" ? hours : pad(hours);
        if (keyboardChange !== "m") {
            $scope.minutes = pad(minutes);
        }
        $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
    }
    function addMinutes(date, minutes) {
        var dt = new Date(date.getTime() + minutes * 6e4);
        var newDate = new Date(date);
        newDate.setHours(dt.getHours(), dt.getMinutes());
        return newDate;
    }
    function addMinutesToSelected(minutes) {
        selected = addMinutes(selected, minutes);
        refresh();
    }
    $scope.showSpinners = angular.isDefined($attrs.showSpinners) ? $scope.$parent.$eval($attrs.showSpinners) : timepickerConfig.showSpinners;
    $scope.incrementHours = function() {
        if (!$scope.noIncrementHours()) {
            addMinutesToSelected(hourStep * 60);
        }
    };
    $scope.decrementHours = function() {
        if (!$scope.noDecrementHours()) {
            addMinutesToSelected(-hourStep * 60);
        }
    };
    $scope.incrementMinutes = function() {
        if (!$scope.noIncrementMinutes()) {
            addMinutesToSelected(minuteStep);
        }
    };
    $scope.decrementMinutes = function() {
        if (!$scope.noDecrementMinutes()) {
            addMinutesToSelected(-minuteStep);
        }
    };
    $scope.toggleMeridian = function() {
        if (!$scope.noToggleMeridian()) {
            addMinutesToSelected(12 * 60 * (selected.getHours() < 12 ? 1 : -1));
        }
    };
} ]).directive("timepicker", function() {
    return {
        restrict: "EA",
        require: [ "timepicker", "?^ngModel" ],
        controller: "TimepickerController",
        controllerAs: "timepicker",
        replace: true,
        scope: {},
        templateUrl: function(element, attrs) {
            return attrs.templateUrl || "template/timepicker/timepicker.html";
        },
        link: function(scope, element, attrs, ctrls) {
            var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];
            if (ngModelCtrl) {
                timepickerCtrl.init(ngModelCtrl, element.find("input"));
            }
        }
    };
});

angular.module("ui.bootstrap.transition", []).value("$transitionSuppressDeprecated", false).factory("$transition", [ "$q", "$timeout", "$rootScope", "$log", "$transitionSuppressDeprecated", function($q, $timeout, $rootScope, $log, $transitionSuppressDeprecated) {
    if (!$transitionSuppressDeprecated) {
        $log.warn("$transition is now deprecated. Use $animate from ngAnimate instead.");
    }
    var $transition = function(element, trigger, options) {
        options = options || {};
        var deferred = $q.defer();
        var endEventName = $transition[options.animation ? "animationEndEventName" : "transitionEndEventName"];
        var transitionEndHandler = function(event) {
            $rootScope.$apply(function() {
                element.unbind(endEventName, transitionEndHandler);
                deferred.resolve(element);
            });
        };
        if (endEventName) {
            element.bind(endEventName, transitionEndHandler);
        }
        $timeout(function() {
            if (angular.isString(trigger)) {
                element.addClass(trigger);
            } else if (angular.isFunction(trigger)) {
                trigger(element);
            } else if (angular.isObject(trigger)) {
                element.css(trigger);
            }
            if (!endEventName) {
                deferred.resolve(element);
            }
        });
        deferred.promise.cancel = function() {
            if (endEventName) {
                element.unbind(endEventName, transitionEndHandler);
            }
            deferred.reject("Transition cancelled");
        };
        return deferred.promise;
    };
    var transElement = document.createElement("trans");
    var transitionEndEventNames = {
        WebkitTransition: "webkitTransitionEnd",
        MozTransition: "transitionend",
        OTransition: "oTransitionEnd",
        transition: "transitionend"
    };
    var animationEndEventNames = {
        WebkitTransition: "webkitAnimationEnd",
        MozTransition: "animationend",
        OTransition: "oAnimationEnd",
        transition: "animationend"
    };
    function findEndEventName(endEventNames) {
        for (var name in endEventNames) {
            if (transElement.style[name] !== undefined) {
                return endEventNames[name];
            }
        }
    }
    $transition.transitionEndEventName = findEndEventName(transitionEndEventNames);
    $transition.animationEndEventName = findEndEventName(animationEndEventNames);
    return $transition;
} ]);

angular.module("ui.bootstrap.typeahead", [ "ui.bootstrap.position" ]).factory("typeaheadParser", [ "$parse", function($parse) {
    var TYPEAHEAD_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;
    return {
        parse: function(input) {
            var match = input.match(TYPEAHEAD_REGEXP);
            if (!match) {
                throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_"' + ' but got "' + input + '".');
            }
            return {
                itemName: match[3],
                source: $parse(match[4]),
                viewMapper: $parse(match[2] || match[1]),
                modelMapper: $parse(match[1])
            };
        }
    };
} ]).directive("typeahead", [ "$compile", "$parse", "$q", "$timeout", "$document", "$window", "$rootScope", "$position", "typeaheadParser", function($compile, $parse, $q, $timeout, $document, $window, $rootScope, $position, typeaheadParser) {
    var HOT_KEYS = [ 9, 13, 27, 38, 40 ];
    var eventDebounceTime = 200;
    return {
        require: [ "ngModel", "^?ngModelOptions" ],
        link: function(originalScope, element, attrs, ctrls) {
            var modelCtrl = ctrls[0];
            var ngModelOptions = ctrls[1];
            var minLength = originalScope.$eval(attrs.typeaheadMinLength);
            if (!minLength && minLength !== 0) {
                minLength = 1;
            }
            var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;
            var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;
            var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;
            var onSelectCallback = $parse(attrs.typeaheadOnSelect);
            var isSelectOnBlur = angular.isDefined(attrs.typeaheadSelectOnBlur) ? originalScope.$eval(attrs.typeaheadSelectOnBlur) : false;
            var isNoResultsSetter = $parse(attrs.typeaheadNoResults).assign || angular.noop;
            var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;
            var appendToBody = attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;
            var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;
            var selectOnExact = attrs.typeaheadSelectOnExact ? originalScope.$eval(attrs.typeaheadSelectOnExact) : false;
            var parsedModel = $parse(attrs.ngModel);
            var invokeModelSetter = $parse(attrs.ngModel + "($$$p)");
            var $setModelValue = function(scope, newValue) {
                if (angular.isFunction(parsedModel(originalScope)) && ngModelOptions && ngModelOptions.$options && ngModelOptions.$options.getterSetter) {
                    return invokeModelSetter(scope, {
                        $$$p: newValue
                    });
                } else {
                    return parsedModel.assign(scope, newValue);
                }
            };
            var parserResult = typeaheadParser.parse(attrs.typeahead);
            var hasFocus;
            var selected;
            var scope = originalScope.$new();
            var offDestroy = originalScope.$on("$destroy", function() {
                scope.$destroy();
            });
            scope.$on("$destroy", offDestroy);
            var popupId = "typeahead-" + scope.$id + "-" + Math.floor(Math.random() * 1e4);
            element.attr({
                "aria-autocomplete": "list",
                "aria-expanded": false,
                "aria-owns": popupId
            });
            var popUpEl = angular.element("<div typeahead-popup></div>");
            popUpEl.attr({
                id: popupId,
                matches: "matches",
                active: "activeIdx",
                select: "select(activeIdx)",
                "move-in-progress": "moveInProgress",
                query: "query",
                position: "position"
            });
            if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
                popUpEl.attr("template-url", attrs.typeaheadTemplateUrl);
            }
            if (angular.isDefined(attrs.typeaheadPopupTemplateUrl)) {
                popUpEl.attr("popup-template-url", attrs.typeaheadPopupTemplateUrl);
            }
            var resetMatches = function() {
                scope.matches = [];
                scope.activeIdx = -1;
                element.attr("aria-expanded", false);
            };
            var getMatchId = function(index) {
                return popupId + "-option-" + index;
            };
            scope.$watch("activeIdx", function(index) {
                if (index < 0) {
                    element.removeAttr("aria-activedescendant");
                } else {
                    element.attr("aria-activedescendant", getMatchId(index));
                }
            });
            var inputIsExactMatch = function(inputValue, index) {
                if (scope.matches.length > index && inputValue) {
                    return inputValue.toUpperCase() === scope.matches[index].label.toUpperCase();
                }
                return false;
            };
            var getMatchesAsync = function(inputValue) {
                var locals = {
                    $viewValue: inputValue
                };
                isLoadingSetter(originalScope, true);
                isNoResultsSetter(originalScope, false);
                $q.when(parserResult.source(originalScope, locals)).then(function(matches) {
                    var onCurrentRequest = inputValue === modelCtrl.$viewValue;
                    if (onCurrentRequest && hasFocus) {
                        if (matches && matches.length > 0) {
                            scope.activeIdx = focusFirst ? 0 : -1;
                            isNoResultsSetter(originalScope, false);
                            scope.matches.length = 0;
                            for (var i = 0; i < matches.length; i++) {
                                locals[parserResult.itemName] = matches[i];
                                scope.matches.push({
                                    id: getMatchId(i),
                                    label: parserResult.viewMapper(scope, locals),
                                    model: matches[i]
                                });
                            }
                            scope.query = inputValue;
                            recalculatePosition();
                            element.attr("aria-expanded", true);
                            if (selectOnExact && scope.matches.length === 1 && inputIsExactMatch(inputValue, 0)) {
                                scope.select(0);
                            }
                        } else {
                            resetMatches();
                            isNoResultsSetter(originalScope, true);
                        }
                    }
                    if (onCurrentRequest) {
                        isLoadingSetter(originalScope, false);
                    }
                }, function() {
                    resetMatches();
                    isLoadingSetter(originalScope, false);
                    isNoResultsSetter(originalScope, true);
                });
            };
            if (appendToBody) {
                angular.element($window).bind("resize", fireRecalculating);
                $document.find("body").bind("scroll", fireRecalculating);
            }
            var timeoutEventPromise;
            scope.moveInProgress = false;
            function fireRecalculating() {
                if (!scope.moveInProgress) {
                    scope.moveInProgress = true;
                    scope.$digest();
                }
                if (timeoutEventPromise) {
                    $timeout.cancel(timeoutEventPromise);
                }
                timeoutEventPromise = $timeout(function() {
                    if (scope.matches.length) {
                        recalculatePosition();
                    }
                    scope.moveInProgress = false;
                    scope.$digest();
                }, eventDebounceTime);
            }
            function recalculatePosition() {
                scope.position = appendToBody ? $position.offset(element) : $position.position(element);
                scope.position.top += element.prop("offsetHeight");
            }
            resetMatches();
            scope.query = undefined;
            var timeoutPromise;
            var scheduleSearchWithTimeout = function(inputValue) {
                timeoutPromise = $timeout(function() {
                    getMatchesAsync(inputValue);
                }, waitTime);
            };
            var cancelPreviousTimeout = function() {
                if (timeoutPromise) {
                    $timeout.cancel(timeoutPromise);
                }
            };
            modelCtrl.$parsers.unshift(function(inputValue) {
                hasFocus = true;
                if (minLength === 0 || inputValue && inputValue.length >= minLength) {
                    if (waitTime > 0) {
                        cancelPreviousTimeout();
                        scheduleSearchWithTimeout(inputValue);
                    } else {
                        getMatchesAsync(inputValue);
                    }
                } else {
                    isLoadingSetter(originalScope, false);
                    cancelPreviousTimeout();
                    resetMatches();
                }
                if (isEditable) {
                    return inputValue;
                } else {
                    if (!inputValue) {
                        modelCtrl.$setValidity("editable", true);
                        return null;
                    } else {
                        modelCtrl.$setValidity("editable", false);
                        return undefined;
                    }
                }
            });
            modelCtrl.$formatters.push(function(modelValue) {
                var candidateViewValue, emptyViewValue;
                var locals = {};
                if (!isEditable) {
                    modelCtrl.$setValidity("editable", true);
                }
                if (inputFormatter) {
                    locals.$model = modelValue;
                    return inputFormatter(originalScope, locals);
                } else {
                    locals[parserResult.itemName] = modelValue;
                    candidateViewValue = parserResult.viewMapper(originalScope, locals);
                    locals[parserResult.itemName] = undefined;
                    emptyViewValue = parserResult.viewMapper(originalScope, locals);
                    return candidateViewValue !== emptyViewValue ? candidateViewValue : modelValue;
                }
            });
            scope.select = function(activeIdx) {
                var locals = {};
                var model, item;
                selected = true;
                locals[parserResult.itemName] = item = scope.matches[activeIdx].model;
                model = parserResult.modelMapper(originalScope, locals);
                $setModelValue(originalScope, model);
                modelCtrl.$setValidity("editable", true);
                modelCtrl.$setValidity("parse", true);
                onSelectCallback(originalScope, {
                    $item: item,
                    $model: model,
                    $label: parserResult.viewMapper(originalScope, locals)
                });
                resetMatches();
                if (scope.$eval(attrs.typeaheadFocusOnSelect) !== false) {
                    $timeout(function() {
                        element[0].focus();
                    }, 0, false);
                }
            };
            element.bind("keydown", function(evt) {
                if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
                    return;
                }
                if (scope.activeIdx === -1 && (evt.which === 9 || evt.which === 13)) {
                    resetMatches();
                    scope.$digest();
                    return;
                }
                evt.preventDefault();
                if (evt.which === 40) {
                    scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;
                    scope.$digest();
                } else if (evt.which === 38) {
                    scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;
                    scope.$digest();
                } else if (evt.which === 13 || evt.which === 9) {
                    scope.$apply(function() {
                        scope.select(scope.activeIdx);
                    });
                } else if (evt.which === 27) {
                    evt.stopPropagation();
                    resetMatches();
                    scope.$digest();
                }
            });
            element.bind("blur", function() {
                if (isSelectOnBlur && scope.matches.length && scope.activeIdx !== -1 && !selected) {
                    selected = true;
                    scope.$apply(function() {
                        scope.select(scope.activeIdx);
                    });
                }
                hasFocus = false;
                selected = false;
            });
            var dismissClickHandler = function(evt) {
                if (element[0] !== evt.target && evt.which !== 3 && scope.matches.length !== 0) {
                    resetMatches();
                    if (!$rootScope.$$phase) {
                        scope.$digest();
                    }
                }
            };
            $document.bind("click", dismissClickHandler);
            originalScope.$on("$destroy", function() {
                $document.unbind("click", dismissClickHandler);
                if (appendToBody) {
                    $popup.remove();
                }
                popUpEl.remove();
            });
            var $popup = $compile(popUpEl)(scope);
            if (appendToBody) {
                $document.find("body").append($popup);
            } else {
                element.after($popup);
            }
        }
    };
} ]).directive("typeaheadPopup", function() {
    return {
        restrict: "EA",
        scope: {
            matches: "=",
            query: "=",
            active: "=",
            position: "&",
            moveInProgress: "=",
            select: "&"
        },
        replace: true,
        templateUrl: function(element, attrs) {
            return attrs.popupTemplateUrl || "template/typeahead/typeahead-popup.html";
        },
        link: function(scope, element, attrs) {
            scope.templateUrl = attrs.templateUrl;
            scope.isOpen = function() {
                return scope.matches.length > 0;
            };
            scope.isActive = function(matchIdx) {
                return scope.active == matchIdx;
            };
            scope.selectActive = function(matchIdx) {
                scope.active = matchIdx;
            };
            scope.selectMatch = function(activeIdx) {
                scope.select({
                    activeIdx: activeIdx
                });
            };
        }
    };
}).directive("typeaheadMatch", [ "$templateRequest", "$compile", "$parse", function($templateRequest, $compile, $parse) {
    return {
        restrict: "EA",
        scope: {
            index: "=",
            match: "=",
            query: "="
        },
        link: function(scope, element, attrs) {
            var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || "template/typeahead/typeahead-match.html";
            $templateRequest(tplUrl).then(function(tplContent) {
                $compile(tplContent.trim())(scope, function(clonedElement) {
                    element.replaceWith(clonedElement);
                });
            });
        }
    };
} ]).filter("typeaheadHighlight", [ "$sce", "$injector", "$log", function($sce, $injector, $log) {
    var isSanitizePresent;
    isSanitizePresent = $injector.has("$sanitize");
    function escapeRegexp(queryToEscape) {
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
    }
    function containsHtml(matchItem) {
        return /<.*>/g.test(matchItem);
    }
    return function(matchItem, query) {
        if (!isSanitizePresent && containsHtml(matchItem)) {
            $log.warn("Unsafe use of typeahead please use ngSanitize");
        }
        matchItem = query ? ("" + matchItem).replace(new RegExp(escapeRegexp(query), "gi"), "<strong>$&</strong>") : matchItem;
        if (!isSanitizePresent) {
            matchItem = $sce.trustAsHtml(matchItem);
        }
        return matchItem;
    };
} ]);

angular.module("template/accordion/accordion-group.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/accordion/accordion-group.html", "<div class=\"panel {{panelClass || 'panel-default'}}\">\n" + '  <div class="panel-heading" ng-keypress="toggleOpen($event)">\n' + '    <h4 class="panel-title">\n' + '      <a href tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n' + "    </h4>\n" + "  </div>\n" + '  <div class="panel-collapse collapse" collapse="!isOpen">\n' + '\t  <div class="panel-body" ng-transclude></div>\n' + "  </div>\n" + "</div>\n" + "");
} ]);

angular.module("template/accordion/accordion.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/accordion/accordion.html", '<div class="panel-group" ng-transclude></div>');
} ]);

angular.module("template/alert/alert.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/alert/alert.html", "<div class=\"alert\" ng-class=\"['alert-' + (type || 'warning'), closeable ? 'alert-dismissible' : null]\" role=\"alert\">\n" + '    <button ng-show="closeable" type="button" class="close" ng-click="close($event)">\n' + '        <span aria-hidden="true">&times;</span>\n' + '        <span class="sr-only">Close</span>\n' + "    </button>\n" + "    <div ng-transclude></div>\n" + "</div>\n" + "");
} ]);

angular.module("template/carousel/carousel.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/carousel/carousel.html", '<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n' + '    <ol class="carousel-indicators" ng-show="slides.length > 1">\n' + '        <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n' + "    </ol>\n" + '    <div class="carousel-inner" ng-transclude></div>\n' + '    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n' + '    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n' + "</div>\n" + "");
} ]);

angular.module("template/carousel/slide.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/carousel/slide.html", '<div ng-class="{\n' + "    'active': active\n" + '  }" class="item text-center" ng-transclude></div>\n' + "");
} ]);

angular.module("template/datepicker/datepicker.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/datepicker/datepicker.html", '<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n' + '  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n' + '  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n' + '  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n' + "</div>");
} ]);

angular.module("template/datepicker/day.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/datepicker/day.html", '<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n' + "  <thead>\n" + "    <tr>\n" + '      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n' + '      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n' + '      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n' + "    </tr>\n" + "    <tr>\n" + '      <th ng-if="showWeeks" class="text-center"></th>\n' + '      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n' + "    </tr>\n" + "  </thead>\n" + "  <tbody>\n" + '    <tr ng-repeat="row in rows track by $index">\n' + '      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n' + '      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n' + '        <button type="button" style="min-width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n' + "      </td>\n" + "    </tr>\n" + "  </tbody>\n" + "</table>\n" + "");
} ]);

angular.module("template/datepicker/month.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/datepicker/month.html", '<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n' + "  <thead>\n" + "    <tr>\n" + '      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n' + '      <th><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n' + '      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n' + "    </tr>\n" + "  </thead>\n" + "  <tbody>\n" + '    <tr ng-repeat="row in rows track by $index">\n' + '      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n' + '        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n' + "      </td>\n" + "    </tr>\n" + "  </tbody>\n" + "</table>\n" + "");
} ]);

angular.module("template/datepicker/popup.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/datepicker/popup.html", '<ul class="dropdown-menu" ng-if="isOpen" style="display: block" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n' + "\t<li ng-transclude></li>\n" + '\t<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n' + '\t\t<span class="btn-group pull-left">\n' + '\t\t\t<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n' + '\t\t\t<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n' + "\t\t</span>\n" + '\t\t<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n' + "\t</li>\n" + "</ul>\n" + "");
} ]);

angular.module("template/datepicker/year.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/datepicker/year.html", '<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n' + "  <thead>\n" + "    <tr>\n" + '      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n' + '      <th colspan="3"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n' + '      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n' + "    </tr>\n" + "  </thead>\n" + "  <tbody>\n" + '    <tr ng-repeat="row in rows track by $index">\n' + '      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}">\n' + '        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n' + "      </td>\n" + "    </tr>\n" + "  </tbody>\n" + "</table>\n" + "");
} ]);

angular.module("template/modal/backdrop.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/modal/backdrop.html", '<div class="modal-backdrop"\n' + '     modal-animation-class="fade"\n' + '     modal-in-class="in"\n' + "     ng-style=\"{'z-index': 1040 + (index && 1 || 0) + index*10}\"\n" + "></div>\n" + "");
} ]);

angular.module("template/modal/window.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/modal/window.html", '<div modal-render="{{$isRendered}}" tabindex="-1" role="dialog" class="modal"\n' + '    modal-animation-class="fade"\n' + '    modal-in-class="in"\n' + "\tng-style=\"{'z-index': 1050 + index*10, display: 'block'}\" ng-click=\"close($event)\">\n" + '    <div class="modal-dialog" ng-class="size ? \'modal-\' + size : \'\'"><div class="modal-content" modal-transclude></div></div>\n' + "</div>\n" + "");
} ]);

angular.module("template/pagination/pager.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/pagination/pager.html", '<ul class="pager">\n' + '  <li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n' + '  <li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n' + "</ul>\n" + "");
} ]);

angular.module("template/pagination/pagination.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/pagination/pagination.html", '<ul class="pagination">\n' + '  <li ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)">{{::getText(\'first\')}}</a></li>\n' + '  <li ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n' + '  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)">{{page.text}}</a></li>\n' + '  <li ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n' + '  <li ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)">{{::getText(\'last\')}}</a></li>\n' + "</ul>\n" + "");
} ]);

angular.module("template/tooltip/tooltip-html-popup.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/tooltip/tooltip-html-popup.html", '<div class="tooltip"\n' + '  tooltip-animation-class="fade"\n' + "  tooltip-classes\n" + '  ng-class="{ in: isOpen() }">\n' + '  <div class="tooltip-arrow"></div>\n' + '  <div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n' + "</div>\n" + "");
} ]);

angular.module("template/tooltip/tooltip-html-unsafe-popup.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/tooltip/tooltip-html-unsafe-popup.html", '<div class="tooltip"\n' + '  tooltip-animation-class="fade"\n' + "  tooltip-classes\n" + '  ng-class="{ in: isOpen() }">\n' + '  <div class="tooltip-arrow"></div>\n' + '  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n' + "</div>\n" + "");
} ]);

angular.module("template/tooltip/tooltip-popup.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/tooltip/tooltip-popup.html", '<div class="tooltip"\n' + '  tooltip-animation-class="fade"\n' + "  tooltip-classes\n" + '  ng-class="{ in: isOpen() }">\n' + '  <div class="tooltip-arrow"></div>\n' + '  <div class="tooltip-inner" ng-bind="content"></div>\n' + "</div>\n" + "");
} ]);

angular.module("template/tooltip/tooltip-template-popup.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/tooltip/tooltip-template-popup.html", '<div class="tooltip"\n' + '  tooltip-animation-class="fade"\n' + "  tooltip-classes\n" + '  ng-class="{ in: isOpen() }">\n' + '  <div class="tooltip-arrow"></div>\n' + '  <div class="tooltip-inner"\n' + '    tooltip-template-transclude="contentExp()"\n' + '    tooltip-template-transclude-scope="originScope()"></div>\n' + "</div>\n" + "");
} ]);

angular.module("template/popover/popover-html.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/popover/popover-html.html", '<div class="popover"\n' + '  tooltip-animation-class="fade"\n' + "  tooltip-classes\n" + '  ng-class="{ in: isOpen() }">\n' + '  <div class="arrow"></div>\n' + "\n" + '  <div class="popover-inner">\n' + '      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n' + '      <div class="popover-content" ng-bind-html="contentExp()"></div>\n' + "  </div>\n" + "</div>\n" + "");
} ]);

angular.module("template/popover/popover-template.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/popover/popover-template.html", '<div class="popover"\n' + '  tooltip-animation-class="fade"\n' + "  tooltip-classes\n" + '  ng-class="{ in: isOpen() }">\n' + '  <div class="arrow"></div>\n' + "\n" + '  <div class="popover-inner">\n' + '      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n' + '      <div class="popover-content"\n' + '        tooltip-template-transclude="contentExp()"\n' + '        tooltip-template-transclude-scope="originScope()"></div>\n' + "  </div>\n" + "</div>\n" + "");
} ]);

angular.module("template/popover/popover.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/popover/popover.html", '<div class="popover"\n' + '  tooltip-animation-class="fade"\n' + "  tooltip-classes\n" + '  ng-class="{ in: isOpen() }">\n' + '  <div class="arrow"></div>\n' + "\n" + '  <div class="popover-inner">\n' + '      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n' + '      <div class="popover-content" ng-bind="content"></div>\n' + "  </div>\n" + "</div>\n" + "");
} ]);

angular.module("template/progressbar/bar.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/progressbar/bar.html", '<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" style="min-width: 0;" ng-transclude></div>\n' + "");
} ]);

angular.module("template/progressbar/progress.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/progressbar/progress.html", '<div class="progress" ng-transclude></div>');
} ]);

angular.module("template/progressbar/progressbar.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/progressbar/progressbar.html", '<div class="progress">\n' + '  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" style="min-width: 0;" ng-transclude></div>\n' + "</div>\n" + "");
} ]);

angular.module("template/rating/rating.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/rating/rating.html", '<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n' + "    <span ng-repeat-start=\"r in range track by $index\" class=\"sr-only\">({{ $index < value ? '*' : ' ' }})</span>\n" + '    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}" ></i>\n' + "</span>\n" + "");
} ]);

angular.module("template/tabs/tab.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/tabs/tab.html", '<li ng-class="{active: active, disabled: disabled}">\n' + '  <a href ng-click="select()" tab-heading-transclude>{{heading}}</a>\n' + "</li>\n" + "");
} ]);

angular.module("template/tabs/tabset.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/tabs/tabset.html", "<div>\n" + "  <ul class=\"nav nav-{{type || 'tabs'}}\" ng-class=\"{'nav-stacked': vertical, 'nav-justified': justified}\" ng-transclude></ul>\n" + '  <div class="tab-content">\n' + '    <div class="tab-pane" \n' + '         ng-repeat="tab in tabs" \n' + '         ng-class="{active: tab.active}"\n' + '         tab-content-transclude="tab">\n' + "    </div>\n" + "  </div>\n" + "</div>\n" + "");
} ]);

angular.module("template/timepicker/timepicker.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/timepicker/timepicker.html", "<table>\n" + "  <tbody>\n" + '    <tr class="text-center" ng-show="::showSpinners">\n' + '      <td><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n' + "      <td>&nbsp;</td>\n" + '      <td><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n' + '      <td ng-show="showMeridian"></td>\n' + "    </tr>\n" + "    <tr>\n" + '      <td class="form-group" ng-class="{\'has-error\': invalidHours}">\n' + '        <input style="width:50px;" type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n' + "      </td>\n" + "      <td>:</td>\n" + '      <td class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n' + '        <input style="width:50px;" type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n' + "      </td>\n" + '      <td ng-show="showMeridian"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n' + "    </tr>\n" + '    <tr class="text-center" ng-show="::showSpinners">\n' + '      <td><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n' + "      <td>&nbsp;</td>\n" + '      <td><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n' + '      <td ng-show="showMeridian"></td>\n' + "    </tr>\n" + "  </tbody>\n" + "</table>\n" + "");
} ]);

angular.module("template/typeahead/typeahead-match.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/typeahead/typeahead-match.html", '<a href tabindex="-1" ng-bind-html="match.label | typeaheadHighlight:query"></a>\n' + "");
} ]);

angular.module("template/typeahead/typeahead-popup.html", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("template/typeahead/typeahead-popup.html", '<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n' + '    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{::match.id}}">\n' + '        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n' + "    </li>\n" + "</ul>\n" + "");
} ]);

!angular.$$csp() && angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>');

(function(window, angular) {
    "use strict";
    var ELEMENT_NODE = 1;
    var COMMENT_NODE = 8;
    var ADD_CLASS_SUFFIX = "-add";
    var REMOVE_CLASS_SUFFIX = "-remove";
    var EVENT_CLASS_PREFIX = "ng-";
    var ACTIVE_CLASS_SUFFIX = "-active";
    var PREPARE_CLASS_SUFFIX = "-prepare";
    var NG_ANIMATE_CLASSNAME = "ng-animate";
    var NG_ANIMATE_CHILDREN_DATA = "$$ngAnimateChildren";
    var CSS_PREFIX = "", TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;
    if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
        CSS_PREFIX = "-webkit-";
        TRANSITION_PROP = "WebkitTransition";
        TRANSITIONEND_EVENT = "webkitTransitionEnd transitionend";
    } else {
        TRANSITION_PROP = "transition";
        TRANSITIONEND_EVENT = "transitionend";
    }
    if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
        CSS_PREFIX = "-webkit-";
        ANIMATION_PROP = "WebkitAnimation";
        ANIMATIONEND_EVENT = "webkitAnimationEnd animationend";
    } else {
        ANIMATION_PROP = "animation";
        ANIMATIONEND_EVENT = "animationend";
    }
    var DURATION_KEY = "Duration";
    var PROPERTY_KEY = "Property";
    var DELAY_KEY = "Delay";
    var TIMING_KEY = "TimingFunction";
    var ANIMATION_ITERATION_COUNT_KEY = "IterationCount";
    var ANIMATION_PLAYSTATE_KEY = "PlayState";
    var SAFE_FAST_FORWARD_DURATION_VALUE = 9999;
    var ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;
    var ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;
    var TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;
    var TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;
    var ngMinErr = angular.$$minErr("ng");
    function assertArg(arg, name, reason) {
        if (!arg) {
            throw ngMinErr("areq", "Argument '{0}' is {1}", name || "?", reason || "required");
        }
        return arg;
    }
    function mergeClasses(a, b) {
        if (!a && !b) return "";
        if (!a) return b;
        if (!b) return a;
        if (isArray(a)) a = a.join(" ");
        if (isArray(b)) b = b.join(" ");
        return a + " " + b;
    }
    function packageStyles(options) {
        var styles = {};
        if (options && (options.to || options.from)) {
            styles.to = options.to;
            styles.from = options.from;
        }
        return styles;
    }
    function pendClasses(classes, fix, isPrefix) {
        var className = "";
        classes = isArray(classes) ? classes : classes && isString(classes) && classes.length ? classes.split(/\s+/) : [];
        forEach(classes, function(klass, i) {
            if (klass && klass.length > 0) {
                className += i > 0 ? " " : "";
                className += isPrefix ? fix + klass : klass + fix;
            }
        });
        return className;
    }
    function removeFromArray(arr, val) {
        var index = arr.indexOf(val);
        if (val >= 0) {
            arr.splice(index, 1);
        }
    }
    function stripCommentsFromElement(element) {
        if (element instanceof jqLite) {
            switch (element.length) {
              case 0:
                return element;

              case 1:
                if (element[0].nodeType === ELEMENT_NODE) {
                    return element;
                }
                break;

              default:
                return jqLite(extractElementNode(element));
            }
        }
        if (element.nodeType === ELEMENT_NODE) {
            return jqLite(element);
        }
    }
    function extractElementNode(element) {
        if (!element[0]) return element;
        for (var i = 0; i < element.length; i++) {
            var elm = element[i];
            if (elm.nodeType === ELEMENT_NODE) {
                return elm;
            }
        }
    }
    function $$addClass($$jqLite, element, className) {
        forEach(element, function(elm) {
            $$jqLite.addClass(elm, className);
        });
    }
    function $$removeClass($$jqLite, element, className) {
        forEach(element, function(elm) {
            $$jqLite.removeClass(elm, className);
        });
    }
    function applyAnimationClassesFactory($$jqLite) {
        return function(element, options) {
            if (options.addClass) {
                $$addClass($$jqLite, element, options.addClass);
                options.addClass = null;
            }
            if (options.removeClass) {
                $$removeClass($$jqLite, element, options.removeClass);
                options.removeClass = null;
            }
        };
    }
    function prepareAnimationOptions(options) {
        options = options || {};
        if (!options.$$prepared) {
            var domOperation = options.domOperation || noop;
            options.domOperation = function() {
                options.$$domOperationFired = true;
                domOperation();
                domOperation = noop;
            };
            options.$$prepared = true;
        }
        return options;
    }
    function applyAnimationStyles(element, options) {
        applyAnimationFromStyles(element, options);
        applyAnimationToStyles(element, options);
    }
    function applyAnimationFromStyles(element, options) {
        if (options.from) {
            element.css(options.from);
            options.from = null;
        }
    }
    function applyAnimationToStyles(element, options) {
        if (options.to) {
            element.css(options.to);
            options.to = null;
        }
    }
    function mergeAnimationDetails(element, oldAnimation, newAnimation) {
        var target = oldAnimation.options || {};
        var newOptions = newAnimation.options || {};
        var toAdd = (target.addClass || "") + " " + (newOptions.addClass || "");
        var toRemove = (target.removeClass || "") + " " + (newOptions.removeClass || "");
        var classes = resolveElementClasses(element.attr("class"), toAdd, toRemove);
        if (newOptions.preparationClasses) {
            target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);
            delete newOptions.preparationClasses;
        }
        var realDomOperation = target.domOperation !== noop ? target.domOperation : null;
        extend(target, newOptions);
        if (realDomOperation) {
            target.domOperation = realDomOperation;
        }
        if (classes.addClass) {
            target.addClass = classes.addClass;
        } else {
            target.addClass = null;
        }
        if (classes.removeClass) {
            target.removeClass = classes.removeClass;
        } else {
            target.removeClass = null;
        }
        oldAnimation.addClass = target.addClass;
        oldAnimation.removeClass = target.removeClass;
        return target;
    }
    function resolveElementClasses(existing, toAdd, toRemove) {
        var ADD_CLASS = 1;
        var REMOVE_CLASS = -1;
        var flags = {};
        existing = splitClassesToLookup(existing);
        toAdd = splitClassesToLookup(toAdd);
        forEach(toAdd, function(value, key) {
            flags[key] = ADD_CLASS;
        });
        toRemove = splitClassesToLookup(toRemove);
        forEach(toRemove, function(value, key) {
            flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;
        });
        var classes = {
            addClass: "",
            removeClass: ""
        };
        forEach(flags, function(val, klass) {
            var prop, allow;
            if (val === ADD_CLASS) {
                prop = "addClass";
                allow = !existing[klass] || existing[klass + REMOVE_CLASS_SUFFIX];
            } else if (val === REMOVE_CLASS) {
                prop = "removeClass";
                allow = existing[klass] || existing[klass + ADD_CLASS_SUFFIX];
            }
            if (allow) {
                if (classes[prop].length) {
                    classes[prop] += " ";
                }
                classes[prop] += klass;
            }
        });
        function splitClassesToLookup(classes) {
            if (isString(classes)) {
                classes = classes.split(" ");
            }
            var obj = {};
            forEach(classes, function(klass) {
                if (klass.length) {
                    obj[klass] = true;
                }
            });
            return obj;
        }
        return classes;
    }
    function getDomNode(element) {
        return element instanceof jqLite ? element[0] : element;
    }
    function applyGeneratedPreparationClasses($$jqLite, element, event, options) {
        var classes = "";
        if (event) {
            classes = pendClasses(event, EVENT_CLASS_PREFIX, true);
        }
        if (options.addClass) {
            classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));
        }
        if (options.removeClass) {
            classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));
        }
        if (classes.length) {
            options.preparationClasses = classes;
            element.addClass(classes);
        }
    }
    function clearGeneratedClasses(element, options) {
        if (options.preparationClasses) {
            element.removeClass(options.preparationClasses);
            options.preparationClasses = null;
        }
        if (options.activeClasses) {
            element.removeClass(options.activeClasses);
            options.activeClasses = null;
        }
    }
    function blockKeyframeAnimations(node, applyBlock) {
        var value = applyBlock ? "paused" : "";
        var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;
        applyInlineStyle(node, [ key, value ]);
        return [ key, value ];
    }
    function applyInlineStyle(node, styleTuple) {
        var prop = styleTuple[0];
        var value = styleTuple[1];
        node.style[prop] = value;
    }
    function concatWithSpace(a, b) {
        if (!a) return b;
        if (!b) return a;
        return a + " " + b;
    }
    var helpers = {
        blockTransitions: function(node, duration) {
            var value = duration ? "-" + duration + "s" : "";
            applyInlineStyle(node, [ TRANSITION_DELAY_PROP, value ]);
            return [ TRANSITION_DELAY_PROP, value ];
        }
    };
    var $$rAFSchedulerFactory = [ "$$rAF", function($$rAF) {
        var queue, cancelFn;
        function scheduler(tasks) {
            queue = queue.concat(tasks);
            nextTick();
        }
        queue = scheduler.queue = [];
        scheduler.waitUntilQuiet = function(fn) {
            if (cancelFn) cancelFn();
            cancelFn = $$rAF(function() {
                cancelFn = null;
                fn();
                nextTick();
            });
        };
        return scheduler;
        function nextTick() {
            if (!queue.length) return;
            var items = queue.shift();
            for (var i = 0; i < items.length; i++) {
                items[i]();
            }
            if (!cancelFn) {
                $$rAF(function() {
                    if (!cancelFn) nextTick();
                });
            }
        }
    } ];
    var $$AnimateChildrenDirective = [ "$interpolate", function($interpolate) {
        return {
            link: function(scope, element, attrs) {
                var val = attrs.ngAnimateChildren;
                if (isString(val) && val.length === 0) {
                    element.data(NG_ANIMATE_CHILDREN_DATA, true);
                } else {
                    setData($interpolate(val)(scope));
                    attrs.$observe("ngAnimateChildren", setData);
                }
                function setData(value) {
                    value = value === "on" || value === "true";
                    element.data(NG_ANIMATE_CHILDREN_DATA, value);
                }
            }
        };
    } ];
    var ANIMATE_TIMER_KEY = "$$animateCss";
    var ONE_SECOND = 1e3;
    var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
    var CLOSING_TIME_BUFFER = 1.5;
    var DETECT_CSS_PROPERTIES = {
        transitionDuration: TRANSITION_DURATION_PROP,
        transitionDelay: TRANSITION_DELAY_PROP,
        transitionProperty: TRANSITION_PROP + PROPERTY_KEY,
        animationDuration: ANIMATION_DURATION_PROP,
        animationDelay: ANIMATION_DELAY_PROP,
        animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY
    };
    var DETECT_STAGGER_CSS_PROPERTIES = {
        transitionDuration: TRANSITION_DURATION_PROP,
        transitionDelay: TRANSITION_DELAY_PROP,
        animationDuration: ANIMATION_DURATION_PROP,
        animationDelay: ANIMATION_DELAY_PROP
    };
    function getCssKeyframeDurationStyle(duration) {
        return [ ANIMATION_DURATION_PROP, duration + "s" ];
    }
    function getCssDelayStyle(delay, isKeyframeAnimation) {
        var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;
        return [ prop, delay + "s" ];
    }
    function computeCssStyles($window, element, properties) {
        var styles = Object.create(null);
        var detectedStyles = $window.getComputedStyle(element) || {};
        forEach(properties, function(formalStyleName, actualStyleName) {
            var val = detectedStyles[formalStyleName];
            if (val) {
                var c = val.charAt(0);
                if (c === "-" || c === "+" || c >= 0) {
                    val = parseMaxTime(val);
                }
                if (val === 0) {
                    val = null;
                }
                styles[actualStyleName] = val;
            }
        });
        return styles;
    }
    function parseMaxTime(str) {
        var maxValue = 0;
        var values = str.split(/\s*,\s*/);
        forEach(values, function(value) {
            if (value.charAt(value.length - 1) === "s") {
                value = value.substring(0, value.length - 1);
            }
            value = parseFloat(value) || 0;
            maxValue = maxValue ? Math.max(value, maxValue) : value;
        });
        return maxValue;
    }
    function truthyTimingValue(val) {
        return val === 0 || val != null;
    }
    function getCssTransitionDurationStyle(duration, applyOnlyDuration) {
        var style = TRANSITION_PROP;
        var value = duration + "s";
        if (applyOnlyDuration) {
            style += DURATION_KEY;
        } else {
            value += " linear all";
        }
        return [ style, value ];
    }
    function registerRestorableStyles(backup, node, properties) {
        forEach(properties, function(prop) {
            backup[prop] = isDefined(backup[prop]) ? backup[prop] : node.style.getPropertyValue(prop);
        });
    }
    var $AnimateCssProvider = [ "$animateProvider", function($animateProvider) {
        this.$get = [ "$window", "$$jqLite", "$$AnimateRunner", "$timeout", "$$animateCache", "$$forceReflow", "$sniffer", "$$rAFScheduler", "$$animateQueue", function($window, $$jqLite, $$AnimateRunner, $timeout, $$animateCache, $$forceReflow, $sniffer, $$rAFScheduler, $$animateQueue) {
            var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
            function computeCachedCssStyles(node, className, cacheKey, allowNoDuration, properties) {
                var timings = $$animateCache.get(cacheKey);
                if (!timings) {
                    timings = computeCssStyles($window, node, properties);
                    if (timings.animationIterationCount === "infinite") {
                        timings.animationIterationCount = 1;
                    }
                }
                var hasDuration = allowNoDuration || (timings.transitionDuration > 0 || timings.animationDuration > 0);
                $$animateCache.put(cacheKey, timings, hasDuration);
                return timings;
            }
            function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {
                var stagger;
                var staggerCacheKey = "stagger-" + cacheKey;
                if ($$animateCache.count(cacheKey) > 0) {
                    stagger = $$animateCache.get(staggerCacheKey);
                    if (!stagger) {
                        var staggerClassName = pendClasses(className, "-stagger");
                        $$jqLite.addClass(node, staggerClassName);
                        stagger = computeCssStyles($window, node, properties);
                        stagger.animationDuration = Math.max(stagger.animationDuration, 0);
                        stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);
                        $$jqLite.removeClass(node, staggerClassName);
                        $$animateCache.put(staggerCacheKey, stagger, true);
                    }
                }
                return stagger || {};
            }
            var rafWaitQueue = [];
            function waitUntilQuiet(callback) {
                rafWaitQueue.push(callback);
                $$rAFScheduler.waitUntilQuiet(function() {
                    $$animateCache.flush();
                    var pageWidth = $$forceReflow();
                    for (var i = 0; i < rafWaitQueue.length; i++) {
                        rafWaitQueue[i](pageWidth);
                    }
                    rafWaitQueue.length = 0;
                });
            }
            function computeTimings(node, className, cacheKey, allowNoDuration) {
                var timings = computeCachedCssStyles(node, className, cacheKey, allowNoDuration, DETECT_CSS_PROPERTIES);
                var aD = timings.animationDelay;
                var tD = timings.transitionDelay;
                timings.maxDelay = aD && tD ? Math.max(aD, tD) : aD || tD;
                timings.maxDuration = Math.max(timings.animationDuration * timings.animationIterationCount, timings.transitionDuration);
                return timings;
            }
            return function init(element, initialOptions) {
                var options = initialOptions || {};
                if (!options.$$prepared) {
                    options = prepareAnimationOptions(copy(options));
                }
                var restoreStyles = {};
                var node = getDomNode(element);
                if (!node || !node.parentNode || !$$animateQueue.enabled()) {
                    return closeAndReturnNoopAnimator();
                }
                var temporaryStyles = [];
                var classes = element.attr("class");
                var styles = packageStyles(options);
                var animationClosed;
                var animationPaused;
                var animationCompleted;
                var runner;
                var runnerHost;
                var maxDelay;
                var maxDelayTime;
                var maxDuration;
                var maxDurationTime;
                var startTime;
                var events = [];
                if (options.duration === 0 || !$sniffer.animations && !$sniffer.transitions) {
                    return closeAndReturnNoopAnimator();
                }
                var method = options.event && isArray(options.event) ? options.event.join(" ") : options.event;
                var isStructural = method && options.structural;
                var structuralClassName = "";
                var addRemoveClassName = "";
                if (isStructural) {
                    structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);
                } else if (method) {
                    structuralClassName = method;
                }
                if (options.addClass) {
                    addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);
                }
                if (options.removeClass) {
                    if (addRemoveClassName.length) {
                        addRemoveClassName += " ";
                    }
                    addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);
                }
                if (options.applyClassesEarly && addRemoveClassName.length) {
                    applyAnimationClasses(element, options);
                }
                var preparationClasses = [ structuralClassName, addRemoveClassName ].join(" ").trim();
                var fullClassName = classes + " " + preparationClasses;
                var hasToStyles = styles.to && Object.keys(styles.to).length > 0;
                var containsKeyframeAnimation = (options.keyframeStyle || "").length > 0;
                if (!containsKeyframeAnimation && !hasToStyles && !preparationClasses) {
                    return closeAndReturnNoopAnimator();
                }
                var stagger, cacheKey = $$animateCache.cacheKey(node, method, options.addClass, options.removeClass);
                if ($$animateCache.containsCachedAnimationWithoutDuration(cacheKey)) {
                    preparationClasses = null;
                    return closeAndReturnNoopAnimator();
                }
                if (options.stagger > 0) {
                    var staggerVal = parseFloat(options.stagger);
                    stagger = {
                        transitionDelay: staggerVal,
                        animationDelay: staggerVal,
                        transitionDuration: 0,
                        animationDuration: 0
                    };
                } else {
                    stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);
                }
                if (!options.$$skipPreparationClasses) {
                    $$jqLite.addClass(element, preparationClasses);
                }
                var applyOnlyDuration;
                if (options.transitionStyle) {
                    var transitionStyle = [ TRANSITION_PROP, options.transitionStyle ];
                    applyInlineStyle(node, transitionStyle);
                    temporaryStyles.push(transitionStyle);
                }
                if (options.duration >= 0) {
                    applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;
                    var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);
                    applyInlineStyle(node, durationStyle);
                    temporaryStyles.push(durationStyle);
                }
                if (options.keyframeStyle) {
                    var keyframeStyle = [ ANIMATION_PROP, options.keyframeStyle ];
                    applyInlineStyle(node, keyframeStyle);
                    temporaryStyles.push(keyframeStyle);
                }
                var itemIndex = stagger ? options.staggerIndex >= 0 ? options.staggerIndex : $$animateCache.count(cacheKey) : 0;
                var isFirst = itemIndex === 0;
                if (isFirst && !options.skipBlocking) {
                    helpers.blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);
                }
                var timings = computeTimings(node, fullClassName, cacheKey, !isStructural);
                var relativeDelay = timings.maxDelay;
                maxDelay = Math.max(relativeDelay, 0);
                maxDuration = timings.maxDuration;
                var flags = {};
                flags.hasTransitions = timings.transitionDuration > 0;
                flags.hasAnimations = timings.animationDuration > 0;
                flags.hasTransitionAll = flags.hasTransitions && timings.transitionProperty === "all";
                flags.applyTransitionDuration = hasToStyles && (flags.hasTransitions && !flags.hasTransitionAll || flags.hasAnimations && !flags.hasTransitions);
                flags.applyAnimationDuration = options.duration && flags.hasAnimations;
                flags.applyTransitionDelay = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);
                flags.applyAnimationDelay = truthyTimingValue(options.delay) && flags.hasAnimations;
                flags.recalculateTimingStyles = addRemoveClassName.length > 0;
                if (flags.applyTransitionDuration || flags.applyAnimationDuration) {
                    maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;
                    if (flags.applyTransitionDuration) {
                        flags.hasTransitions = true;
                        timings.transitionDuration = maxDuration;
                        applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;
                        temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));
                    }
                    if (flags.applyAnimationDuration) {
                        flags.hasAnimations = true;
                        timings.animationDuration = maxDuration;
                        temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));
                    }
                }
                if (maxDuration === 0 && !flags.recalculateTimingStyles) {
                    return closeAndReturnNoopAnimator();
                }
                var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);
                if (options.delay != null) {
                    var delayStyle;
                    if (typeof options.delay !== "boolean") {
                        delayStyle = parseFloat(options.delay);
                        maxDelay = Math.max(delayStyle, 0);
                    }
                    if (flags.applyTransitionDelay) {
                        temporaryStyles.push(getCssDelayStyle(delayStyle));
                    }
                    if (flags.applyAnimationDelay) {
                        temporaryStyles.push(getCssDelayStyle(delayStyle, true));
                    }
                }
                if (options.duration == null && timings.transitionDuration > 0) {
                    flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;
                }
                maxDelayTime = maxDelay * ONE_SECOND;
                maxDurationTime = maxDuration * ONE_SECOND;
                if (!options.skipBlocking) {
                    flags.blockTransition = timings.transitionDuration > 0;
                    flags.blockKeyframeAnimation = timings.animationDuration > 0 && stagger.animationDelay > 0 && stagger.animationDuration === 0;
                }
                if (options.from) {
                    if (options.cleanupStyles) {
                        registerRestorableStyles(restoreStyles, node, Object.keys(options.from));
                    }
                    applyAnimationFromStyles(element, options);
                }
                if (flags.blockTransition || flags.blockKeyframeAnimation) {
                    applyBlocking(maxDuration);
                } else if (!options.skipBlocking) {
                    helpers.blockTransitions(node, false);
                }
                return {
                    $$willAnimate: true,
                    end: endFn,
                    start: function() {
                        if (animationClosed) return;
                        runnerHost = {
                            end: endFn,
                            cancel: cancelFn,
                            resume: null,
                            pause: null
                        };
                        runner = new $$AnimateRunner(runnerHost);
                        waitUntilQuiet(start);
                        return runner;
                    }
                };
                function endFn() {
                    close();
                }
                function cancelFn() {
                    close(true);
                }
                function close(rejected) {
                    if (animationClosed || animationCompleted && animationPaused) return;
                    animationClosed = true;
                    animationPaused = false;
                    if (preparationClasses && !options.$$skipPreparationClasses) {
                        $$jqLite.removeClass(element, preparationClasses);
                    }
                    if (activeClasses) {
                        $$jqLite.removeClass(element, activeClasses);
                    }
                    blockKeyframeAnimations(node, false);
                    helpers.blockTransitions(node, false);
                    forEach(temporaryStyles, function(entry) {
                        node.style[entry[0]] = "";
                    });
                    applyAnimationClasses(element, options);
                    applyAnimationStyles(element, options);
                    if (Object.keys(restoreStyles).length) {
                        forEach(restoreStyles, function(value, prop) {
                            if (value) {
                                node.style.setProperty(prop, value);
                            } else {
                                node.style.removeProperty(prop);
                            }
                        });
                    }
                    if (options.onDone) {
                        options.onDone();
                    }
                    if (events && events.length) {
                        element.off(events.join(" "), onAnimationProgress);
                    }
                    var animationTimerData = element.data(ANIMATE_TIMER_KEY);
                    if (animationTimerData) {
                        $timeout.cancel(animationTimerData[0].timer);
                        element.removeData(ANIMATE_TIMER_KEY);
                    }
                    if (runner) {
                        runner.complete(!rejected);
                    }
                }
                function applyBlocking(duration) {
                    if (flags.blockTransition) {
                        helpers.blockTransitions(node, duration);
                    }
                    if (flags.blockKeyframeAnimation) {
                        blockKeyframeAnimations(node, !!duration);
                    }
                }
                function closeAndReturnNoopAnimator() {
                    runner = new $$AnimateRunner({
                        end: endFn,
                        cancel: cancelFn
                    });
                    waitUntilQuiet(noop);
                    close();
                    return {
                        $$willAnimate: false,
                        start: function() {
                            return runner;
                        },
                        end: endFn
                    };
                }
                function onAnimationProgress(event) {
                    event.stopPropagation();
                    var ev = event.originalEvent || event;
                    if (ev.target !== node) {
                        return;
                    }
                    var timeStamp = ev.$manualTimeStamp || Date.now();
                    var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));
                    if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
                        animationCompleted = true;
                        close();
                    }
                }
                function start() {
                    if (animationClosed) return;
                    if (!node.parentNode) {
                        close();
                        return;
                    }
                    var playPause = function(playAnimation) {
                        if (!animationCompleted) {
                            animationPaused = !playAnimation;
                            if (timings.animationDuration) {
                                var value = blockKeyframeAnimations(node, animationPaused);
                                if (animationPaused) {
                                    temporaryStyles.push(value);
                                } else {
                                    removeFromArray(temporaryStyles, value);
                                }
                            }
                        } else if (animationPaused && playAnimation) {
                            animationPaused = false;
                            close();
                        }
                    };
                    var maxStagger = itemIndex > 0 && (timings.transitionDuration && stagger.transitionDuration === 0 || timings.animationDuration && stagger.animationDuration === 0) && Math.max(stagger.animationDelay, stagger.transitionDelay);
                    if (maxStagger) {
                        $timeout(triggerAnimationStart, Math.floor(maxStagger * itemIndex * ONE_SECOND), false);
                    } else {
                        triggerAnimationStart();
                    }
                    runnerHost.resume = function() {
                        playPause(true);
                    };
                    runnerHost.pause = function() {
                        playPause(false);
                    };
                    function triggerAnimationStart() {
                        if (animationClosed) return;
                        applyBlocking(false);
                        forEach(temporaryStyles, function(entry) {
                            var key = entry[0];
                            var value = entry[1];
                            node.style[key] = value;
                        });
                        applyAnimationClasses(element, options);
                        $$jqLite.addClass(element, activeClasses);
                        if (flags.recalculateTimingStyles) {
                            fullClassName = node.getAttribute("class") + " " + preparationClasses;
                            cacheKey = $$animateCache.cacheKey(node, method, options.addClass, options.removeClass);
                            timings = computeTimings(node, fullClassName, cacheKey, false);
                            relativeDelay = timings.maxDelay;
                            maxDelay = Math.max(relativeDelay, 0);
                            maxDuration = timings.maxDuration;
                            if (maxDuration === 0) {
                                close();
                                return;
                            }
                            flags.hasTransitions = timings.transitionDuration > 0;
                            flags.hasAnimations = timings.animationDuration > 0;
                        }
                        if (flags.applyAnimationDelay) {
                            relativeDelay = typeof options.delay !== "boolean" && truthyTimingValue(options.delay) ? parseFloat(options.delay) : relativeDelay;
                            maxDelay = Math.max(relativeDelay, 0);
                            timings.animationDelay = relativeDelay;
                            delayStyle = getCssDelayStyle(relativeDelay, true);
                            temporaryStyles.push(delayStyle);
                            node.style[delayStyle[0]] = delayStyle[1];
                        }
                        maxDelayTime = maxDelay * ONE_SECOND;
                        maxDurationTime = maxDuration * ONE_SECOND;
                        if (options.easing) {
                            var easeProp, easeVal = options.easing;
                            if (flags.hasTransitions) {
                                easeProp = TRANSITION_PROP + TIMING_KEY;
                                temporaryStyles.push([ easeProp, easeVal ]);
                                node.style[easeProp] = easeVal;
                            }
                            if (flags.hasAnimations) {
                                easeProp = ANIMATION_PROP + TIMING_KEY;
                                temporaryStyles.push([ easeProp, easeVal ]);
                                node.style[easeProp] = easeVal;
                            }
                        }
                        if (timings.transitionDuration) {
                            events.push(TRANSITIONEND_EVENT);
                        }
                        if (timings.animationDuration) {
                            events.push(ANIMATIONEND_EVENT);
                        }
                        startTime = Date.now();
                        var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;
                        var endTime = startTime + timerTime;
                        var animationsData = element.data(ANIMATE_TIMER_KEY) || [];
                        var setupFallbackTimer = true;
                        if (animationsData.length) {
                            var currentTimerData = animationsData[0];
                            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;
                            if (setupFallbackTimer) {
                                $timeout.cancel(currentTimerData.timer);
                            } else {
                                animationsData.push(close);
                            }
                        }
                        if (setupFallbackTimer) {
                            var timer = $timeout(onAnimationExpired, timerTime, false);
                            animationsData[0] = {
                                timer: timer,
                                expectedEndTime: endTime
                            };
                            animationsData.push(close);
                            element.data(ANIMATE_TIMER_KEY, animationsData);
                        }
                        if (events.length) {
                            element.on(events.join(" "), onAnimationProgress);
                        }
                        if (options.to) {
                            if (options.cleanupStyles) {
                                registerRestorableStyles(restoreStyles, node, Object.keys(options.to));
                            }
                            applyAnimationToStyles(element, options);
                        }
                    }
                    function onAnimationExpired() {
                        var animationsData = element.data(ANIMATE_TIMER_KEY);
                        if (animationsData) {
                            for (var i = 1; i < animationsData.length; i++) {
                                animationsData[i]();
                            }
                            element.removeData(ANIMATE_TIMER_KEY);
                        }
                    }
                }
            };
        } ];
    } ];
    var $$AnimateCssDriverProvider = [ "$$animationProvider", function($$animationProvider) {
        $$animationProvider.drivers.push("$$animateCssDriver");
        var NG_ANIMATE_SHIM_CLASS_NAME = "ng-animate-shim";
        var NG_ANIMATE_ANCHOR_CLASS_NAME = "ng-anchor";
        var NG_OUT_ANCHOR_CLASS_NAME = "ng-anchor-out";
        var NG_IN_ANCHOR_CLASS_NAME = "ng-anchor-in";
        function isDocumentFragment(node) {
            return node.parentNode && node.parentNode.nodeType === 11;
        }
        this.$get = [ "$animateCss", "$rootScope", "$$AnimateRunner", "$rootElement", "$sniffer", "$$jqLite", "$document", function($animateCss, $rootScope, $$AnimateRunner, $rootElement, $sniffer, $$jqLite, $document) {
            if (!$sniffer.animations && !$sniffer.transitions) return noop;
            var bodyNode = $document[0].body;
            var rootNode = getDomNode($rootElement);
            var rootBodyElement = jqLite(isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode);
            return function initDriverFn(animationDetails) {
                return animationDetails.from && animationDetails.to ? prepareFromToAnchorAnimation(animationDetails.from, animationDetails.to, animationDetails.classes, animationDetails.anchors) : prepareRegularAnimation(animationDetails);
            };
            function filterCssClasses(classes) {
                return classes.replace(/\bng-\S+\b/g, "");
            }
            function getUniqueValues(a, b) {
                if (isString(a)) a = a.split(" ");
                if (isString(b)) b = b.split(" ");
                return a.filter(function(val) {
                    return b.indexOf(val) === -1;
                }).join(" ");
            }
            function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {
                var clone = jqLite(getDomNode(outAnchor).cloneNode(true));
                var startingClasses = filterCssClasses(getClassVal(clone));
                outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
                inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
                clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);
                rootBodyElement.append(clone);
                var animatorIn, animatorOut = prepareOutAnimation();
                if (!animatorOut) {
                    animatorIn = prepareInAnimation();
                    if (!animatorIn) {
                        return end();
                    }
                }
                var startingAnimator = animatorOut || animatorIn;
                return {
                    start: function() {
                        var runner;
                        var currentAnimation = startingAnimator.start();
                        currentAnimation.done(function() {
                            currentAnimation = null;
                            if (!animatorIn) {
                                animatorIn = prepareInAnimation();
                                if (animatorIn) {
                                    currentAnimation = animatorIn.start();
                                    currentAnimation.done(function() {
                                        currentAnimation = null;
                                        end();
                                        runner.complete();
                                    });
                                    return currentAnimation;
                                }
                            }
                            end();
                            runner.complete();
                        });
                        runner = new $$AnimateRunner({
                            end: endFn,
                            cancel: endFn
                        });
                        return runner;
                        function endFn() {
                            if (currentAnimation) {
                                currentAnimation.end();
                            }
                        }
                    }
                };
                function calculateAnchorStyles(anchor) {
                    var styles = {};
                    var coords = getDomNode(anchor).getBoundingClientRect();
                    forEach([ "width", "height", "top", "left" ], function(key) {
                        var value = coords[key];
                        switch (key) {
                          case "top":
                            value += bodyNode.scrollTop;
                            break;

                          case "left":
                            value += bodyNode.scrollLeft;
                            break;
                        }
                        styles[key] = Math.floor(value) + "px";
                    });
                    return styles;
                }
                function prepareOutAnimation() {
                    var animator = $animateCss(clone, {
                        addClass: NG_OUT_ANCHOR_CLASS_NAME,
                        delay: true,
                        from: calculateAnchorStyles(outAnchor)
                    });
                    return animator.$$willAnimate ? animator : null;
                }
                function getClassVal(element) {
                    return element.attr("class") || "";
                }
                function prepareInAnimation() {
                    var endingClasses = filterCssClasses(getClassVal(inAnchor));
                    var toAdd = getUniqueValues(endingClasses, startingClasses);
                    var toRemove = getUniqueValues(startingClasses, endingClasses);
                    var animator = $animateCss(clone, {
                        to: calculateAnchorStyles(inAnchor),
                        addClass: NG_IN_ANCHOR_CLASS_NAME + " " + toAdd,
                        removeClass: NG_OUT_ANCHOR_CLASS_NAME + " " + toRemove,
                        delay: true
                    });
                    return animator.$$willAnimate ? animator : null;
                }
                function end() {
                    clone.remove();
                    outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
                    inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
                }
            }
            function prepareFromToAnchorAnimation(from, to, classes, anchors) {
                var fromAnimation = prepareRegularAnimation(from, noop);
                var toAnimation = prepareRegularAnimation(to, noop);
                var anchorAnimations = [];
                forEach(anchors, function(anchor) {
                    var outElement = anchor["out"];
                    var inElement = anchor["in"];
                    var animator = prepareAnchoredAnimation(classes, outElement, inElement);
                    if (animator) {
                        anchorAnimations.push(animator);
                    }
                });
                if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;
                return {
                    start: function() {
                        var animationRunners = [];
                        if (fromAnimation) {
                            animationRunners.push(fromAnimation.start());
                        }
                        if (toAnimation) {
                            animationRunners.push(toAnimation.start());
                        }
                        forEach(anchorAnimations, function(animation) {
                            animationRunners.push(animation.start());
                        });
                        var runner = new $$AnimateRunner({
                            end: endFn,
                            cancel: endFn
                        });
                        $$AnimateRunner.all(animationRunners, function(status) {
                            runner.complete(status);
                        });
                        return runner;
                        function endFn() {
                            forEach(animationRunners, function(runner) {
                                runner.end();
                            });
                        }
                    }
                };
            }
            function prepareRegularAnimation(animationDetails) {
                var element = animationDetails.element;
                var options = animationDetails.options || {};
                if (animationDetails.structural) {
                    options.event = animationDetails.event;
                    options.structural = true;
                    options.applyClassesEarly = true;
                    if (animationDetails.event === "leave") {
                        options.onDone = options.domOperation;
                    }
                }
                if (options.preparationClasses) {
                    options.event = concatWithSpace(options.event, options.preparationClasses);
                }
                var animator = $animateCss(element, options);
                return animator.$$willAnimate ? animator : null;
            }
        } ];
    } ];
    var $$AnimateJsProvider = [ "$animateProvider", function($animateProvider) {
        this.$get = [ "$injector", "$$AnimateRunner", "$$jqLite", function($injector, $$AnimateRunner, $$jqLite) {
            var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
            return function(element, event, classes, options) {
                var animationClosed = false;
                if (arguments.length === 3 && isObject(classes)) {
                    options = classes;
                    classes = null;
                }
                options = prepareAnimationOptions(options);
                if (!classes) {
                    classes = element.attr("class") || "";
                    if (options.addClass) {
                        classes += " " + options.addClass;
                    }
                    if (options.removeClass) {
                        classes += " " + options.removeClass;
                    }
                }
                var classesToAdd = options.addClass;
                var classesToRemove = options.removeClass;
                var animations = lookupAnimations(classes);
                var before, after;
                if (animations.length) {
                    var afterFn, beforeFn;
                    if (event === "leave") {
                        beforeFn = "leave";
                        afterFn = "afterLeave";
                    } else {
                        beforeFn = "before" + event.charAt(0).toUpperCase() + event.substr(1);
                        afterFn = event;
                    }
                    if (event !== "enter" && event !== "move") {
                        before = packageAnimations(element, event, options, animations, beforeFn);
                    }
                    after = packageAnimations(element, event, options, animations, afterFn);
                }
                if (!before && !after) return;
                function applyOptions() {
                    options.domOperation();
                    applyAnimationClasses(element, options);
                }
                function close() {
                    animationClosed = true;
                    applyOptions();
                    applyAnimationStyles(element, options);
                }
                var runner;
                return {
                    $$willAnimate: true,
                    end: function() {
                        if (runner) {
                            runner.end();
                        } else {
                            close();
                            runner = new $$AnimateRunner();
                            runner.complete(true);
                        }
                        return runner;
                    },
                    start: function() {
                        if (runner) {
                            return runner;
                        }
                        runner = new $$AnimateRunner();
                        var closeActiveAnimations;
                        var chain = [];
                        if (before) {
                            chain.push(function(fn) {
                                closeActiveAnimations = before(fn);
                            });
                        }
                        if (chain.length) {
                            chain.push(function(fn) {
                                applyOptions();
                                fn(true);
                            });
                        } else {
                            applyOptions();
                        }
                        if (after) {
                            chain.push(function(fn) {
                                closeActiveAnimations = after(fn);
                            });
                        }
                        runner.setHost({
                            end: function() {
                                endAnimations();
                            },
                            cancel: function() {
                                endAnimations(true);
                            }
                        });
                        $$AnimateRunner.chain(chain, onComplete);
                        return runner;
                        function onComplete(success) {
                            close(success);
                            runner.complete(success);
                        }
                        function endAnimations(cancelled) {
                            if (!animationClosed) {
                                (closeActiveAnimations || noop)(cancelled);
                                onComplete(cancelled);
                            }
                        }
                    }
                };
                function executeAnimationFn(fn, element, event, options, onDone) {
                    var args;
                    switch (event) {
                      case "animate":
                        args = [ element, options.from, options.to, onDone ];
                        break;

                      case "setClass":
                        args = [ element, classesToAdd, classesToRemove, onDone ];
                        break;

                      case "addClass":
                        args = [ element, classesToAdd, onDone ];
                        break;

                      case "removeClass":
                        args = [ element, classesToRemove, onDone ];
                        break;

                      default:
                        args = [ element, onDone ];
                        break;
                    }
                    args.push(options);
                    var value = fn.apply(fn, args);
                    if (value) {
                        if (isFunction(value.start)) {
                            value = value.start();
                        }
                        if (value instanceof $$AnimateRunner) {
                            value.done(onDone);
                        } else if (isFunction(value)) {
                            return value;
                        }
                    }
                    return noop;
                }
                function groupEventedAnimations(element, event, options, animations, fnName) {
                    var operations = [];
                    forEach(animations, function(ani) {
                        var animation = ani[fnName];
                        if (!animation) return;
                        operations.push(function() {
                            var runner;
                            var endProgressCb;
                            var resolved = false;
                            var onAnimationComplete = function(rejected) {
                                if (!resolved) {
                                    resolved = true;
                                    (endProgressCb || noop)(rejected);
                                    runner.complete(!rejected);
                                }
                            };
                            runner = new $$AnimateRunner({
                                end: function() {
                                    onAnimationComplete();
                                },
                                cancel: function() {
                                    onAnimationComplete(true);
                                }
                            });
                            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {
                                var cancelled = result === false;
                                onAnimationComplete(cancelled);
                            });
                            return runner;
                        });
                    });
                    return operations;
                }
                function packageAnimations(element, event, options, animations, fnName) {
                    var operations = groupEventedAnimations(element, event, options, animations, fnName);
                    if (operations.length === 0) {
                        var a, b;
                        if (fnName === "beforeSetClass") {
                            a = groupEventedAnimations(element, "removeClass", options, animations, "beforeRemoveClass");
                            b = groupEventedAnimations(element, "addClass", options, animations, "beforeAddClass");
                        } else if (fnName === "setClass") {
                            a = groupEventedAnimations(element, "removeClass", options, animations, "removeClass");
                            b = groupEventedAnimations(element, "addClass", options, animations, "addClass");
                        }
                        if (a) {
                            operations = operations.concat(a);
                        }
                        if (b) {
                            operations = operations.concat(b);
                        }
                    }
                    if (operations.length === 0) return;
                    return function startAnimation(callback) {
                        var runners = [];
                        if (operations.length) {
                            forEach(operations, function(animateFn) {
                                runners.push(animateFn());
                            });
                        }
                        if (runners.length) {
                            $$AnimateRunner.all(runners, callback);
                        } else {
                            callback();
                        }
                        return function endFn(reject) {
                            forEach(runners, function(runner) {
                                if (reject) {
                                    runner.cancel();
                                } else {
                                    runner.end();
                                }
                            });
                        };
                    };
                }
            };
            function lookupAnimations(classes) {
                classes = isArray(classes) ? classes : classes.split(" ");
                var matches = [], flagMap = {};
                for (var i = 0; i < classes.length; i++) {
                    var klass = classes[i], animationFactory = $animateProvider.$$registeredAnimations[klass];
                    if (animationFactory && !flagMap[klass]) {
                        matches.push($injector.get(animationFactory));
                        flagMap[klass] = true;
                    }
                }
                return matches;
            }
        } ];
    } ];
    var $$AnimateJsDriverProvider = [ "$$animationProvider", function($$animationProvider) {
        $$animationProvider.drivers.push("$$animateJsDriver");
        this.$get = [ "$$animateJs", "$$AnimateRunner", function($$animateJs, $$AnimateRunner) {
            return function initDriverFn(animationDetails) {
                if (animationDetails.from && animationDetails.to) {
                    var fromAnimation = prepareAnimation(animationDetails.from);
                    var toAnimation = prepareAnimation(animationDetails.to);
                    if (!fromAnimation && !toAnimation) return;
                    return {
                        start: function() {
                            var animationRunners = [];
                            if (fromAnimation) {
                                animationRunners.push(fromAnimation.start());
                            }
                            if (toAnimation) {
                                animationRunners.push(toAnimation.start());
                            }
                            $$AnimateRunner.all(animationRunners, done);
                            var runner = new $$AnimateRunner({
                                end: endFnFactory(),
                                cancel: endFnFactory()
                            });
                            return runner;
                            function endFnFactory() {
                                return function() {
                                    forEach(animationRunners, function(runner) {
                                        runner.end();
                                    });
                                };
                            }
                            function done(status) {
                                runner.complete(status);
                            }
                        }
                    };
                } else {
                    return prepareAnimation(animationDetails);
                }
            };
            function prepareAnimation(animationDetails) {
                var element = animationDetails.element;
                var event = animationDetails.event;
                var options = animationDetails.options;
                var classes = animationDetails.classes;
                return $$animateJs(element, event, classes, options);
            }
        } ];
    } ];
    var NG_ANIMATE_ATTR_NAME = "data-ng-animate";
    var NG_ANIMATE_PIN_DATA = "$ngAnimatePin";
    var $$AnimateQueueProvider = [ "$animateProvider", function($animateProvider) {
        var PRE_DIGEST_STATE = 1;
        var RUNNING_STATE = 2;
        var ONE_SPACE = " ";
        var rules = this.rules = {
            skip: [],
            cancel: [],
            join: []
        };
        function getEventData(options) {
            return {
                addClass: options.addClass,
                removeClass: options.removeClass,
                from: options.from,
                to: options.to
            };
        }
        function makeTruthyCssClassMap(classString) {
            if (!classString) {
                return null;
            }
            var keys = classString.split(ONE_SPACE);
            var map = Object.create(null);
            forEach(keys, function(key) {
                map[key] = true;
            });
            return map;
        }
        function hasMatchingClasses(newClassString, currentClassString) {
            if (newClassString && currentClassString) {
                var currentClassMap = makeTruthyCssClassMap(currentClassString);
                return newClassString.split(ONE_SPACE).some(function(className) {
                    return currentClassMap[className];
                });
            }
        }
        function isAllowed(ruleType, currentAnimation, previousAnimation) {
            return rules[ruleType].some(function(fn) {
                return fn(currentAnimation, previousAnimation);
            });
        }
        function hasAnimationClasses(animation, and) {
            var a = (animation.addClass || "").length > 0;
            var b = (animation.removeClass || "").length > 0;
            return and ? a && b : a || b;
        }
        rules.join.push(function(newAnimation, currentAnimation) {
            return !newAnimation.structural && hasAnimationClasses(newAnimation);
        });
        rules.skip.push(function(newAnimation, currentAnimation) {
            return !newAnimation.structural && !hasAnimationClasses(newAnimation);
        });
        rules.skip.push(function(newAnimation, currentAnimation) {
            return currentAnimation.event === "leave" && newAnimation.structural;
        });
        rules.skip.push(function(newAnimation, currentAnimation) {
            return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;
        });
        rules.cancel.push(function(newAnimation, currentAnimation) {
            return currentAnimation.structural && newAnimation.structural;
        });
        rules.cancel.push(function(newAnimation, currentAnimation) {
            return currentAnimation.state === RUNNING_STATE && newAnimation.structural;
        });
        rules.cancel.push(function(newAnimation, currentAnimation) {
            if (currentAnimation.structural) return false;
            var nA = newAnimation.addClass;
            var nR = newAnimation.removeClass;
            var cA = currentAnimation.addClass;
            var cR = currentAnimation.removeClass;
            if (isUndefined(nA) && isUndefined(nR) || isUndefined(cA) && isUndefined(cR)) {
                return false;
            }
            return hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA);
        });
        this.$get = [ "$$rAF", "$rootScope", "$rootElement", "$document", "$$Map", "$$animation", "$$AnimateRunner", "$templateRequest", "$$jqLite", "$$forceReflow", "$$isDocumentHidden", function($$rAF, $rootScope, $rootElement, $document, $$Map, $$animation, $$AnimateRunner, $templateRequest, $$jqLite, $$forceReflow, $$isDocumentHidden) {
            var activeAnimationsLookup = new $$Map();
            var disabledElementsLookup = new $$Map();
            var animationsEnabled = null;
            function removeFromDisabledElementsLookup(evt) {
                disabledElementsLookup.delete(evt.target);
            }
            function postDigestTaskFactory() {
                var postDigestCalled = false;
                return function(fn) {
                    if (postDigestCalled) {
                        fn();
                    } else {
                        $rootScope.$$postDigest(function() {
                            postDigestCalled = true;
                            fn();
                        });
                    }
                };
            }
            var deregisterWatch = $rootScope.$watch(function() {
                return $templateRequest.totalPendingRequests === 0;
            }, function(isEmpty) {
                if (!isEmpty) return;
                deregisterWatch();
                $rootScope.$$postDigest(function() {
                    $rootScope.$$postDigest(function() {
                        if (animationsEnabled === null) {
                            animationsEnabled = true;
                        }
                    });
                });
            });
            var callbackRegistry = Object.create(null);
            var customFilter = $animateProvider.customFilter();
            var classNameFilter = $animateProvider.classNameFilter();
            var returnTrue = function() {
                return true;
            };
            var isAnimatableByFilter = customFilter || returnTrue;
            var isAnimatableClassName = !classNameFilter ? returnTrue : function(node, options) {
                var className = [ node.getAttribute("class"), options.addClass, options.removeClass ].join(" ");
                return classNameFilter.test(className);
            };
            var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
            function normalizeAnimationDetails(element, animation) {
                return mergeAnimationDetails(element, animation, {});
            }
            var contains = window.Node.prototype.contains || function(arg) {
                return this === arg || !!(this.compareDocumentPosition(arg) & 16);
            };
            function findCallbacks(targetParentNode, targetNode, event) {
                var matches = [];
                var entries = callbackRegistry[event];
                if (entries) {
                    forEach(entries, function(entry) {
                        if (contains.call(entry.node, targetNode)) {
                            matches.push(entry.callback);
                        } else if (event === "leave" && contains.call(entry.node, targetParentNode)) {
                            matches.push(entry.callback);
                        }
                    });
                }
                return matches;
            }
            function filterFromRegistry(list, matchContainer, matchCallback) {
                var containerNode = extractElementNode(matchContainer);
                return list.filter(function(entry) {
                    var isMatch = entry.node === containerNode && (!matchCallback || entry.callback === matchCallback);
                    return !isMatch;
                });
            }
            function cleanupEventListeners(phase, node) {
                if (phase === "close" && !node.parentNode) {
                    $animate.off(node);
                }
            }
            var $animate = {
                on: function(event, container, callback) {
                    var node = extractElementNode(container);
                    callbackRegistry[event] = callbackRegistry[event] || [];
                    callbackRegistry[event].push({
                        node: node,
                        callback: callback
                    });
                    jqLite(container).on("$destroy", function() {
                        var animationDetails = activeAnimationsLookup.get(node);
                        if (!animationDetails) {
                            $animate.off(event, container, callback);
                        }
                    });
                },
                off: function(event, container, callback) {
                    if (arguments.length === 1 && !isString(arguments[0])) {
                        container = arguments[0];
                        for (var eventType in callbackRegistry) {
                            callbackRegistry[eventType] = filterFromRegistry(callbackRegistry[eventType], container);
                        }
                        return;
                    }
                    var entries = callbackRegistry[event];
                    if (!entries) return;
                    callbackRegistry[event] = arguments.length === 1 ? null : filterFromRegistry(entries, container, callback);
                },
                pin: function(element, parentElement) {
                    assertArg(isElement(element), "element", "not an element");
                    assertArg(isElement(parentElement), "parentElement", "not an element");
                    element.data(NG_ANIMATE_PIN_DATA, parentElement);
                },
                push: function(element, event, options, domOperation) {
                    options = options || {};
                    options.domOperation = domOperation;
                    return queueAnimation(element, event, options);
                },
                enabled: function(element, bool) {
                    var argCount = arguments.length;
                    if (argCount === 0) {
                        bool = !!animationsEnabled;
                    } else {
                        var hasElement = isElement(element);
                        if (!hasElement) {
                            bool = animationsEnabled = !!element;
                        } else {
                            var node = getDomNode(element);
                            if (argCount === 1) {
                                bool = !disabledElementsLookup.get(node);
                            } else {
                                if (!disabledElementsLookup.has(node)) {
                                    jqLite(element).on("$destroy", removeFromDisabledElementsLookup);
                                }
                                disabledElementsLookup.set(node, !bool);
                            }
                        }
                    }
                    return bool;
                }
            };
            return $animate;
            function queueAnimation(originalElement, event, initialOptions) {
                var options = copy(initialOptions);
                var element = stripCommentsFromElement(originalElement);
                var node = getDomNode(element);
                var parentNode = node && node.parentNode;
                options = prepareAnimationOptions(options);
                var runner = new $$AnimateRunner();
                var runInNextPostDigestOrNow = postDigestTaskFactory();
                if (isArray(options.addClass)) {
                    options.addClass = options.addClass.join(" ");
                }
                if (options.addClass && !isString(options.addClass)) {
                    options.addClass = null;
                }
                if (isArray(options.removeClass)) {
                    options.removeClass = options.removeClass.join(" ");
                }
                if (options.removeClass && !isString(options.removeClass)) {
                    options.removeClass = null;
                }
                if (options.from && !isObject(options.from)) {
                    options.from = null;
                }
                if (options.to && !isObject(options.to)) {
                    options.to = null;
                }
                if (!animationsEnabled || !node || !isAnimatableByFilter(node, event, initialOptions) || !isAnimatableClassName(node, options)) {
                    close();
                    return runner;
                }
                var isStructural = [ "enter", "move", "leave" ].indexOf(event) >= 0;
                var documentHidden = $$isDocumentHidden();
                var skipAnimations = documentHidden || disabledElementsLookup.get(node);
                var existingAnimation = !skipAnimations && activeAnimationsLookup.get(node) || {};
                var hasExistingAnimation = !!existingAnimation.state;
                if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state !== PRE_DIGEST_STATE)) {
                    skipAnimations = !areAnimationsAllowed(node, parentNode, event);
                }
                if (skipAnimations) {
                    if (documentHidden) notifyProgress(runner, event, "start", getEventData(options));
                    close();
                    if (documentHidden) notifyProgress(runner, event, "close", getEventData(options));
                    return runner;
                }
                if (isStructural) {
                    closeChildAnimations(node);
                }
                var newAnimation = {
                    structural: isStructural,
                    element: element,
                    event: event,
                    addClass: options.addClass,
                    removeClass: options.removeClass,
                    close: close,
                    options: options,
                    runner: runner
                };
                if (hasExistingAnimation) {
                    var skipAnimationFlag = isAllowed("skip", newAnimation, existingAnimation);
                    if (skipAnimationFlag) {
                        if (existingAnimation.state === RUNNING_STATE) {
                            close();
                            return runner;
                        } else {
                            mergeAnimationDetails(element, existingAnimation, newAnimation);
                            return existingAnimation.runner;
                        }
                    }
                    var cancelAnimationFlag = isAllowed("cancel", newAnimation, existingAnimation);
                    if (cancelAnimationFlag) {
                        if (existingAnimation.state === RUNNING_STATE) {
                            existingAnimation.runner.end();
                        } else if (existingAnimation.structural) {
                            existingAnimation.close();
                        } else {
                            mergeAnimationDetails(element, existingAnimation, newAnimation);
                            return existingAnimation.runner;
                        }
                    } else {
                        var joinAnimationFlag = isAllowed("join", newAnimation, existingAnimation);
                        if (joinAnimationFlag) {
                            if (existingAnimation.state === RUNNING_STATE) {
                                normalizeAnimationDetails(element, newAnimation);
                            } else {
                                applyGeneratedPreparationClasses($$jqLite, element, isStructural ? event : null, options);
                                event = newAnimation.event = existingAnimation.event;
                                options = mergeAnimationDetails(element, existingAnimation, newAnimation);
                                return existingAnimation.runner;
                            }
                        }
                    }
                } else {
                    normalizeAnimationDetails(element, newAnimation);
                }
                var isValidAnimation = newAnimation.structural;
                if (!isValidAnimation) {
                    isValidAnimation = newAnimation.event === "animate" && Object.keys(newAnimation.options.to || {}).length > 0 || hasAnimationClasses(newAnimation);
                }
                if (!isValidAnimation) {
                    close();
                    clearElementAnimationState(node);
                    return runner;
                }
                var counter = (existingAnimation.counter || 0) + 1;
                newAnimation.counter = counter;
                markElementAnimationState(node, PRE_DIGEST_STATE, newAnimation);
                $rootScope.$$postDigest(function() {
                    element = stripCommentsFromElement(originalElement);
                    var animationDetails = activeAnimationsLookup.get(node);
                    var animationCancelled = !animationDetails;
                    animationDetails = animationDetails || {};
                    var parentElement = element.parent() || [];
                    var isValidAnimation = parentElement.length > 0 && (animationDetails.event === "animate" || animationDetails.structural || hasAnimationClasses(animationDetails));
                    if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {
                        if (animationCancelled) {
                            applyAnimationClasses(element, options);
                            applyAnimationStyles(element, options);
                        }
                        if (animationCancelled || isStructural && animationDetails.event !== event) {
                            options.domOperation();
                            runner.end();
                        }
                        if (!isValidAnimation) {
                            clearElementAnimationState(node);
                        }
                        return;
                    }
                    event = !animationDetails.structural && hasAnimationClasses(animationDetails, true) ? "setClass" : animationDetails.event;
                    markElementAnimationState(node, RUNNING_STATE);
                    var realRunner = $$animation(element, event, animationDetails.options);
                    runner.setHost(realRunner);
                    notifyProgress(runner, event, "start", getEventData(options));
                    realRunner.done(function(status) {
                        close(!status);
                        var animationDetails = activeAnimationsLookup.get(node);
                        if (animationDetails && animationDetails.counter === counter) {
                            clearElementAnimationState(node);
                        }
                        notifyProgress(runner, event, "close", getEventData(options));
                    });
                });
                return runner;
                function notifyProgress(runner, event, phase, data) {
                    runInNextPostDigestOrNow(function() {
                        var callbacks = findCallbacks(parentNode, node, event);
                        if (callbacks.length) {
                            $$rAF(function() {
                                forEach(callbacks, function(callback) {
                                    callback(element, phase, data);
                                });
                                cleanupEventListeners(phase, node);
                            });
                        } else {
                            cleanupEventListeners(phase, node);
                        }
                    });
                    runner.progress(event, phase, data);
                }
                function close(reject) {
                    clearGeneratedClasses(element, options);
                    applyAnimationClasses(element, options);
                    applyAnimationStyles(element, options);
                    options.domOperation();
                    runner.complete(!reject);
                }
            }
            function closeChildAnimations(node) {
                var children = node.querySelectorAll("[" + NG_ANIMATE_ATTR_NAME + "]");
                forEach(children, function(child) {
                    var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME), 10);
                    var animationDetails = activeAnimationsLookup.get(child);
                    if (animationDetails) {
                        switch (state) {
                          case RUNNING_STATE:
                            animationDetails.runner.end();

                          case PRE_DIGEST_STATE:
                            activeAnimationsLookup.delete(child);
                            break;
                        }
                    }
                });
            }
            function clearElementAnimationState(node) {
                node.removeAttribute(NG_ANIMATE_ATTR_NAME);
                activeAnimationsLookup.delete(node);
            }
            function areAnimationsAllowed(node, parentNode, event) {
                var bodyNode = $document[0].body;
                var rootNode = getDomNode($rootElement);
                var bodyNodeDetected = node === bodyNode || node.nodeName === "HTML";
                var rootNodeDetected = node === rootNode;
                var parentAnimationDetected = false;
                var elementDisabled = disabledElementsLookup.get(node);
                var animateChildren;
                var parentHost = jqLite.data(node, NG_ANIMATE_PIN_DATA);
                if (parentHost) {
                    parentNode = getDomNode(parentHost);
                }
                while (parentNode) {
                    if (!rootNodeDetected) {
                        rootNodeDetected = parentNode === rootNode;
                    }
                    if (parentNode.nodeType !== ELEMENT_NODE) {
                        break;
                    }
                    var details = activeAnimationsLookup.get(parentNode) || {};
                    if (!parentAnimationDetected) {
                        var parentNodeDisabled = disabledElementsLookup.get(parentNode);
                        if (parentNodeDisabled === true && elementDisabled !== false) {
                            elementDisabled = true;
                            break;
                        } else if (parentNodeDisabled === false) {
                            elementDisabled = false;
                        }
                        parentAnimationDetected = details.structural;
                    }
                    if (isUndefined(animateChildren) || animateChildren === true) {
                        var value = jqLite.data(parentNode, NG_ANIMATE_CHILDREN_DATA);
                        if (isDefined(value)) {
                            animateChildren = value;
                        }
                    }
                    if (parentAnimationDetected && animateChildren === false) break;
                    if (!bodyNodeDetected) {
                        bodyNodeDetected = parentNode === bodyNode;
                    }
                    if (bodyNodeDetected && rootNodeDetected) {
                        break;
                    }
                    if (!rootNodeDetected) {
                        parentHost = jqLite.data(parentNode, NG_ANIMATE_PIN_DATA);
                        if (parentHost) {
                            parentNode = getDomNode(parentHost);
                            continue;
                        }
                    }
                    parentNode = parentNode.parentNode;
                }
                var allowAnimation = (!parentAnimationDetected || animateChildren) && elementDisabled !== true;
                return allowAnimation && rootNodeDetected && bodyNodeDetected;
            }
            function markElementAnimationState(node, state, details) {
                details = details || {};
                details.state = state;
                node.setAttribute(NG_ANIMATE_ATTR_NAME, state);
                var oldValue = activeAnimationsLookup.get(node);
                var newValue = oldValue ? extend(oldValue, details) : details;
                activeAnimationsLookup.set(node, newValue);
            }
        } ];
    } ];
    var $$AnimateCacheProvider = function() {
        var KEY = "$$ngAnimateParentKey";
        var parentCounter = 0;
        var cache = Object.create(null);
        this.$get = [ function() {
            return {
                cacheKey: function(node, method, addClass, removeClass) {
                    var parentNode = node.parentNode;
                    var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);
                    var parts = [ parentID, method, node.getAttribute("class") ];
                    if (addClass) {
                        parts.push(addClass);
                    }
                    if (removeClass) {
                        parts.push(removeClass);
                    }
                    return parts.join(" ");
                },
                containsCachedAnimationWithoutDuration: function(key) {
                    var entry = cache[key];
                    return entry && !entry.isValid || false;
                },
                flush: function() {
                    cache = Object.create(null);
                },
                count: function(key) {
                    var entry = cache[key];
                    return entry ? entry.total : 0;
                },
                get: function(key) {
                    var entry = cache[key];
                    return entry && entry.value;
                },
                put: function(key, value, isValid) {
                    if (!cache[key]) {
                        cache[key] = {
                            total: 1,
                            value: value,
                            isValid: isValid
                        };
                    } else {
                        cache[key].total++;
                        cache[key].value = value;
                    }
                }
            };
        } ];
    };
    var $$AnimationProvider = [ "$animateProvider", function($animateProvider) {
        var NG_ANIMATE_REF_ATTR = "ng-animate-ref";
        var drivers = this.drivers = [];
        var RUNNER_STORAGE_KEY = "$$animationRunner";
        var PREPARE_CLASSES_KEY = "$$animatePrepareClasses";
        function setRunner(element, runner) {
            element.data(RUNNER_STORAGE_KEY, runner);
        }
        function removeRunner(element) {
            element.removeData(RUNNER_STORAGE_KEY);
        }
        function getRunner(element) {
            return element.data(RUNNER_STORAGE_KEY);
        }
        this.$get = [ "$$jqLite", "$rootScope", "$injector", "$$AnimateRunner", "$$Map", "$$rAFScheduler", "$$animateCache", function($$jqLite, $rootScope, $injector, $$AnimateRunner, $$Map, $$rAFScheduler, $$animateCache) {
            var animationQueue = [];
            var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
            function sortAnimations(animations) {
                var tree = {
                    children: []
                };
                var i, lookup = new $$Map();
                for (i = 0; i < animations.length; i++) {
                    var animation = animations[i];
                    lookup.set(animation.domNode, animations[i] = {
                        domNode: animation.domNode,
                        element: animation.element,
                        fn: animation.fn,
                        children: []
                    });
                }
                for (i = 0; i < animations.length; i++) {
                    processNode(animations[i]);
                }
                return flatten(tree);
                function processNode(entry) {
                    if (entry.processed) return entry;
                    entry.processed = true;
                    var elementNode = entry.domNode;
                    var parentNode = elementNode.parentNode;
                    lookup.set(elementNode, entry);
                    var parentEntry;
                    while (parentNode) {
                        parentEntry = lookup.get(parentNode);
                        if (parentEntry) {
                            if (!parentEntry.processed) {
                                parentEntry = processNode(parentEntry);
                            }
                            break;
                        }
                        parentNode = parentNode.parentNode;
                    }
                    (parentEntry || tree).children.push(entry);
                    return entry;
                }
                function flatten(tree) {
                    var result = [];
                    var queue = [];
                    var i;
                    for (i = 0; i < tree.children.length; i++) {
                        queue.push(tree.children[i]);
                    }
                    var remainingLevelEntries = queue.length;
                    var nextLevelEntries = 0;
                    var row = [];
                    for (i = 0; i < queue.length; i++) {
                        var entry = queue[i];
                        if (remainingLevelEntries <= 0) {
                            remainingLevelEntries = nextLevelEntries;
                            nextLevelEntries = 0;
                            result.push(row);
                            row = [];
                        }
                        row.push(entry);
                        entry.children.forEach(function(childEntry) {
                            nextLevelEntries++;
                            queue.push(childEntry);
                        });
                        remainingLevelEntries--;
                    }
                    if (row.length) {
                        result.push(row);
                    }
                    return result;
                }
            }
            return function(element, event, options) {
                options = prepareAnimationOptions(options);
                var isStructural = [ "enter", "move", "leave" ].indexOf(event) >= 0;
                var runner = new $$AnimateRunner({
                    end: function() {
                        close();
                    },
                    cancel: function() {
                        close(true);
                    }
                });
                if (!drivers.length) {
                    close();
                    return runner;
                }
                var classes = mergeClasses(element.attr("class"), mergeClasses(options.addClass, options.removeClass));
                var tempClasses = options.tempClasses;
                if (tempClasses) {
                    classes += " " + tempClasses;
                    options.tempClasses = null;
                }
                if (isStructural) {
                    element.data(PREPARE_CLASSES_KEY, "ng-" + event + PREPARE_CLASS_SUFFIX);
                }
                setRunner(element, runner);
                animationQueue.push({
                    element: element,
                    classes: classes,
                    event: event,
                    structural: isStructural,
                    options: options,
                    beforeStart: beforeStart,
                    close: close
                });
                element.on("$destroy", handleDestroyedElement);
                if (animationQueue.length > 1) return runner;
                $rootScope.$$postDigest(function() {
                    var animations = [];
                    forEach(animationQueue, function(entry) {
                        if (getRunner(entry.element)) {
                            animations.push(entry);
                        } else {
                            entry.close();
                        }
                    });
                    animationQueue.length = 0;
                    var groupedAnimations = groupAnimations(animations);
                    var toBeSortedAnimations = [];
                    forEach(groupedAnimations, function(animationEntry) {
                        var element = animationEntry.from ? animationEntry.from.element : animationEntry.element;
                        var extraClasses = options.addClass;
                        extraClasses = (extraClasses ? extraClasses + " " : "") + NG_ANIMATE_CLASSNAME;
                        var cacheKey = $$animateCache.cacheKey(element[0], animationEntry.event, extraClasses, options.removeClass);
                        toBeSortedAnimations.push({
                            element: element,
                            domNode: getDomNode(element),
                            fn: function triggerAnimationStart() {
                                var startAnimationFn, closeFn = animationEntry.close;
                                if ($$animateCache.containsCachedAnimationWithoutDuration(cacheKey)) {
                                    closeFn();
                                    return;
                                }
                                animationEntry.beforeStart();
                                var targetElement = animationEntry.anchors ? animationEntry.from.element || animationEntry.to.element : animationEntry.element;
                                if (getRunner(targetElement)) {
                                    var operation = invokeFirstDriver(animationEntry);
                                    if (operation) {
                                        startAnimationFn = operation.start;
                                    }
                                }
                                if (!startAnimationFn) {
                                    closeFn();
                                } else {
                                    var animationRunner = startAnimationFn();
                                    animationRunner.done(function(status) {
                                        closeFn(!status);
                                    });
                                    updateAnimationRunners(animationEntry, animationRunner);
                                }
                            }
                        });
                    });
                    var finalAnimations = sortAnimations(toBeSortedAnimations);
                    for (var i = 0; i < finalAnimations.length; i++) {
                        var innerArray = finalAnimations[i];
                        for (var j = 0; j < innerArray.length; j++) {
                            var entry = innerArray[j];
                            var element = entry.element;
                            finalAnimations[i][j] = entry.fn;
                            if (i === 0) {
                                element.removeData(PREPARE_CLASSES_KEY);
                                continue;
                            }
                            var prepareClassName = element.data(PREPARE_CLASSES_KEY);
                            if (prepareClassName) {
                                $$jqLite.addClass(element, prepareClassName);
                            }
                        }
                    }
                    $$rAFScheduler(finalAnimations);
                });
                return runner;
                function getAnchorNodes(node) {
                    var SELECTOR = "[" + NG_ANIMATE_REF_ATTR + "]";
                    var items = node.hasAttribute(NG_ANIMATE_REF_ATTR) ? [ node ] : node.querySelectorAll(SELECTOR);
                    var anchors = [];
                    forEach(items, function(node) {
                        var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);
                        if (attr && attr.length) {
                            anchors.push(node);
                        }
                    });
                    return anchors;
                }
                function groupAnimations(animations) {
                    var preparedAnimations = [];
                    var refLookup = {};
                    forEach(animations, function(animation, index) {
                        var element = animation.element;
                        var node = getDomNode(element);
                        var event = animation.event;
                        var enterOrMove = [ "enter", "move" ].indexOf(event) >= 0;
                        var anchorNodes = animation.structural ? getAnchorNodes(node) : [];
                        if (anchorNodes.length) {
                            var direction = enterOrMove ? "to" : "from";
                            forEach(anchorNodes, function(anchor) {
                                var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);
                                refLookup[key] = refLookup[key] || {};
                                refLookup[key][direction] = {
                                    animationID: index,
                                    element: jqLite(anchor)
                                };
                            });
                        } else {
                            preparedAnimations.push(animation);
                        }
                    });
                    var usedIndicesLookup = {};
                    var anchorGroups = {};
                    forEach(refLookup, function(operations, key) {
                        var from = operations.from;
                        var to = operations.to;
                        if (!from || !to) {
                            var index = from ? from.animationID : to.animationID;
                            var indexKey = index.toString();
                            if (!usedIndicesLookup[indexKey]) {
                                usedIndicesLookup[indexKey] = true;
                                preparedAnimations.push(animations[index]);
                            }
                            return;
                        }
                        var fromAnimation = animations[from.animationID];
                        var toAnimation = animations[to.animationID];
                        var lookupKey = from.animationID.toString();
                        if (!anchorGroups[lookupKey]) {
                            var group = anchorGroups[lookupKey] = {
                                structural: true,
                                beforeStart: function() {
                                    fromAnimation.beforeStart();
                                    toAnimation.beforeStart();
                                },
                                close: function() {
                                    fromAnimation.close();
                                    toAnimation.close();
                                },
                                classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),
                                from: fromAnimation,
                                to: toAnimation,
                                anchors: []
                            };
                            if (group.classes.length) {
                                preparedAnimations.push(group);
                            } else {
                                preparedAnimations.push(fromAnimation);
                                preparedAnimations.push(toAnimation);
                            }
                        }
                        anchorGroups[lookupKey].anchors.push({
                            out: from.element,
                            in: to.element
                        });
                    });
                    return preparedAnimations;
                }
                function cssClassesIntersection(a, b) {
                    a = a.split(" ");
                    b = b.split(" ");
                    var matches = [];
                    for (var i = 0; i < a.length; i++) {
                        var aa = a[i];
                        if (aa.substring(0, 3) === "ng-") continue;
                        for (var j = 0; j < b.length; j++) {
                            if (aa === b[j]) {
                                matches.push(aa);
                                break;
                            }
                        }
                    }
                    return matches.join(" ");
                }
                function invokeFirstDriver(animationDetails) {
                    for (var i = drivers.length - 1; i >= 0; i--) {
                        var driverName = drivers[i];
                        var factory = $injector.get(driverName);
                        var driver = factory(animationDetails);
                        if (driver) {
                            return driver;
                        }
                    }
                }
                function beforeStart() {
                    tempClasses = (tempClasses ? tempClasses + " " : "") + NG_ANIMATE_CLASSNAME;
                    $$jqLite.addClass(element, tempClasses);
                    var prepareClassName = element.data(PREPARE_CLASSES_KEY);
                    if (prepareClassName) {
                        $$jqLite.removeClass(element, prepareClassName);
                        prepareClassName = null;
                    }
                }
                function updateAnimationRunners(animation, newRunner) {
                    if (animation.from && animation.to) {
                        update(animation.from.element);
                        update(animation.to.element);
                    } else {
                        update(animation.element);
                    }
                    function update(element) {
                        var runner = getRunner(element);
                        if (runner) runner.setHost(newRunner);
                    }
                }
                function handleDestroyedElement() {
                    var runner = getRunner(element);
                    if (runner && (event !== "leave" || !options.$$domOperationFired)) {
                        runner.end();
                    }
                }
                function close(rejected) {
                    element.off("$destroy", handleDestroyedElement);
                    removeRunner(element);
                    applyAnimationClasses(element, options);
                    applyAnimationStyles(element, options);
                    options.domOperation();
                    if (tempClasses) {
                        $$jqLite.removeClass(element, tempClasses);
                    }
                    runner.complete(!rejected);
                }
            };
        } ];
    } ];
    var ngAnimateSwapDirective = [ "$animate", function($animate) {
        return {
            restrict: "A",
            transclude: "element",
            terminal: true,
            priority: 550,
            link: function(scope, $element, attrs, ctrl, $transclude) {
                var previousElement, previousScope;
                scope.$watchCollection(attrs.ngAnimateSwap || attrs["for"], function(value) {
                    if (previousElement) {
                        $animate.leave(previousElement);
                    }
                    if (previousScope) {
                        previousScope.$destroy();
                        previousScope = null;
                    }
                    if (value || value === 0) {
                        $transclude(function(clone, childScope) {
                            previousElement = clone;
                            previousScope = childScope;
                            $animate.enter(clone, null, $element);
                        });
                    }
                });
            }
        };
    } ];
    var copy;
    var extend;
    var forEach;
    var isArray;
    var isDefined;
    var isElement;
    var isFunction;
    var isObject;
    var isString;
    var isUndefined;
    var jqLite;
    var noop;
    angular.module("ngAnimate", [], function initAngularHelpers() {
        noop = angular.noop;
        copy = angular.copy;
        extend = angular.extend;
        jqLite = angular.element;
        forEach = angular.forEach;
        isArray = angular.isArray;
        isString = angular.isString;
        isObject = angular.isObject;
        isUndefined = angular.isUndefined;
        isDefined = angular.isDefined;
        isFunction = angular.isFunction;
        isElement = angular.isElement;
    }).info({
        angularVersion: "1.8.3"
    }).directive("ngAnimateSwap", ngAnimateSwapDirective).directive("ngAnimateChildren", $$AnimateChildrenDirective).factory("$$rAFScheduler", $$rAFSchedulerFactory).provider("$$animateQueue", $$AnimateQueueProvider).provider("$$animateCache", $$AnimateCacheProvider).provider("$$animation", $$AnimationProvider).provider("$animateCss", $AnimateCssProvider).provider("$$animateCssDriver", $$AnimateCssDriverProvider).provider("$$animateJs", $$AnimateJsProvider).provider("$$animateJsDriver", $$AnimateJsDriverProvider);
})(window, window.angular);

!function(t, e) {
    "use strict";
    t.module("smart-table", []).run([ "$templateCache", function(t) {
        t.put("template/smart-table/pagination.html", '<nav ng-if="numPages && pages.length >= 2"><ul class="pagination"><li ng-repeat="page in pages" ng-class="{active: page==currentPage}"><a href="#" ng-click="selectPage(page); $event.preventDefault(); $event.stopPropagation();">{{page}}</a></li></ul></nav>');
    } ]), t.module("smart-table").constant("stConfig", {
        pagination: {
            template: "template/smart-table/pagination.html",
            itemsByPage: 10,
            displayedPages: 5
        },
        search: {
            delay: 400,
            inputEvent: "input",
            trimSearch: !1
        },
        select: {
            mode: "single",
            selectedClass: "st-selected"
        },
        sort: {
            ascentClass: "st-sort-ascent",
            descentClass: "st-sort-descent",
            descendingFirst: !1,
            skipNatural: !1,
            delay: 300
        },
        pipe: {
            delay: 100
        }
    }), t.module("smart-table").controller("stTableController", [ "$scope", "$parse", "$filter", "$attrs", function(a, n, s, r) {
        function i(t) {
            return t ? [].concat(t) : [];
        }
        function c() {
            b = i(o(a)), !0 === S && P.pipe();
        }
        function l(t, e) {
            if (-1 != e.indexOf(".")) {
                var a = e.split("."), s = a.pop(), r = a.join("."), i = n(r)(t);
                delete i[s], 0 == Object.keys(i).length && l(t, r);
            } else delete t[e];
        }
        var o, u, p, g = r.stTable, d = n(g), f = d.assign, m = s("orderBy"), h = s("filter"), b = i(d(a)), v = {
            sort: {},
            search: {},
            pagination: {
                start: 0,
                totalItemCount: 0
            }
        }, S = !0, P = this;
        r.stSafeSrc && (o = n(r.stSafeSrc), a.$watch(function() {
            var t = o(a);
            return t && t.length ? t[0] : e;
        }, function(t, e) {
            t !== e && c();
        }), a.$watch(function() {
            var t = o(a);
            return t ? t.length : 0;
        }, function(t, e) {
            t !== b.length && c();
        }), a.$watch(function() {
            return o(a);
        }, function(t, e) {
            t !== e && (v.pagination.start = 0, c());
        })), this.sortBy = function(e, a) {
            return v.sort.predicate = e, v.sort.reverse = !0 === a, t.isFunction(e) ? v.sort.functionName = e.name : delete v.sort.functionName, 
            v.pagination.start = 0, this.pipe();
        }, this.search = function(t, e, a) {
            var s = v.search.predicateObject || {}, r = e || "$";
            return n(r).assign(s, t), t || l(s, r), v.search.predicateObject = s, v.pagination.start = 0, 
            this.pipe();
        }, this.pipe = function() {
            var t, n = v.pagination;
            u = v.search.predicateObject ? h(b, v.search.predicateObject) : b, v.sort.predicate && (u = m(u, v.sort.predicate, v.sort.reverse)), 
            n.totalItemCount = u.length, n.number !== e && (n.numberOfPages = u.length > 0 ? Math.ceil(u.length / n.number) : 1, 
            n.start = n.start >= u.length ? (n.numberOfPages - 1) * n.number : n.start, t = u.slice(n.start, n.start + parseInt(n.number))), 
            f(a, t || u);
        }, this.select = function(t, n) {
            var s = i(d(a)), r = s.indexOf(t);
            -1 !== r && ("single" === n ? (t.isSelected = !0 !== t.isSelected, p && (p.isSelected = !1), 
            p = !0 === t.isSelected ? t : e) : s[r].isSelected = !s[r].isSelected);
        }, this.slice = function(t, e) {
            return v.pagination.start = t, v.pagination.number = e, this.pipe();
        }, this.tableState = function() {
            return v;
        }, this.getFilteredCollection = function() {
            return u || b;
        }, this.setFilterFunction = function(t) {
            h = s(t);
        }, this.setSortFunction = function(t) {
            m = s(t);
        }, this.preventPipeOnWatch = function() {
            S = !1;
        };
    } ]).directive("stTable", function() {
        return {
            restrict: "A",
            controller: "stTableController",
            link: function(t, e, a, n) {
                a.stSetFilter && n.setFilterFunction(a.stSetFilter), a.stSetSort && n.setSortFunction(a.stSetSort);
            }
        };
    }), t.module("smart-table").directive("stSearch", [ "stConfig", "$timeout", "$parse", function(e, a, n) {
        return {
            require: "^stTable",
            link: function(s, r, i, c) {
                var l = c, o = null, u = i.stDelay || e.search.delay, p = i.stInputEvent || e.search.inputEvent, g = i.trimSearch || e.search.trimSearch;
                i.$observe("stSearch", function(e, a) {
                    var n = r[0].value;
                    e !== a && n && (c.tableState().search = {}, n = t.isString(n) && g ? n.trim() : n, 
                    l.search(n, e));
                }), s.$watch(function() {
                    return c.tableState().search;
                }, function(t, e) {
                    var a = i.stSearch || "$";
                    t.predicateObject && n(a)(t.predicateObject) !== r[0].value && (r[0].value = n(a)(t.predicateObject) || "");
                }, !0), r.bind(p, function(e) {
                    e = e.originalEvent || e, null !== o && a.cancel(o), o = a(function() {
                        var a = e.target.value;
                        a = t.isString(a) && g ? a.trim() : a, l.search(a, i.stSearch || ""), o = null;
                    }, u);
                });
            }
        };
    } ]), t.module("smart-table").directive("stSelectRow", [ "stConfig", function(t) {
        return {
            restrict: "A",
            require: "^stTable",
            scope: {
                row: "=stSelectRow"
            },
            link: function(e, a, n, s) {
                var r = n.stSelectMode || t.select.mode;
                a.bind("click", function() {
                    e.$apply(function() {
                        s.select(e.row, r);
                    });
                }), e.$watch("row.isSelected", function(e) {
                    !0 === e ? a.addClass(t.select.selectedClass) : a.removeClass(t.select.selectedClass);
                });
            }
        };
    } ]), t.module("smart-table").directive("stSort", [ "stConfig", "$parse", "$timeout", function(a, n, s) {
        return {
            restrict: "A",
            require: "^stTable",
            link: function(r, i, c, l) {
                function o() {
                    v ? d = 0 === d ? 2 : d - 1 : d++;
                    var e;
                    p = t.isFunction(g(r)) || t.isArray(g(r)) ? g(r) : c.stSort, d % 3 == 0 && !0 != !!b ? (d = 0, 
                    l.tableState().sort = {}, l.tableState().pagination.start = 0, e = l.pipe.bind(l)) : e = l.sortBy.bind(l, p, d % 2 == 0), 
                    null !== S && s.cancel(S), P < 0 ? e() : S = s(function() {
                        e();
                    }, P);
                }
                var u, p = c.stSort, g = n(p), d = 0, f = c.stClassAscent || a.sort.ascentClass, m = c.stClassDescent || a.sort.descentClass, h = [ f, m ], b = c.stSkipNatural !== e ? c.stSkipNatural : a.sort.skipNatural, v = c.stDescendingFirst !== e ? c.stDescendingFirst : a.sort.descendingFirst, S = null, P = c.stDelay || a.sort.delay, y = "aria-sort";
                i.attr("role", "columnheader").attr(y, "none"), c.stSortDefault && (u = r.$eval(c.stSortDefault) !== e ? r.$eval(c.stSortDefault) : c.stSortDefault), 
                i.bind("click", function() {
                    p && r.$apply(o);
                }), u && (d = "reverse" === u ? 1 : 0, o()), r.$watch(function() {
                    return l.tableState().sort;
                }, function(t) {
                    t.predicate !== p ? (d = 0, i.removeClass(f).removeClass(m).attr(y, "none")) : (d = !0 === t.reverse ? 2 : 1, 
                    i.removeClass(h[d % 2]).addClass(h[d - 1]).attr(y, t.reverse ? "ascending" : "descending"));
                }, !0);
            }
        };
    } ]), t.module("smart-table").directive("stPagination", [ "stConfig", function(t) {
        return {
            restrict: "EA",
            require: "^stTable",
            scope: {
                stItemsByPage: "=?",
                stDisplayedPages: "=?",
                stPageChange: "&"
            },
            templateUrl: function(e, a) {
                return a.stTemplate ? a.stTemplate : t.pagination.template;
            },
            link: function(e, a, n, s) {
                function r() {
                    var t, a, n = s.tableState().pagination, r = 1, i = e.currentPage;
                    for (e.totalItemCount = n.totalItemCount, e.currentPage = Math.floor(n.start / n.number) + 1, 
                    (t = (r = Math.max(r, e.currentPage - Math.abs(Math.floor(e.stDisplayedPages / 2)))) + e.stDisplayedPages) > n.numberOfPages && (t = n.numberOfPages + 1, 
                    r = Math.max(1, t - e.stDisplayedPages)), e.pages = [], e.numPages = n.numberOfPages, 
                    a = r; a < t; a++) e.pages.push(a);
                    i !== e.currentPage && e.stPageChange({
                        newPage: e.currentPage
                    });
                }
                e.stItemsByPage = e.stItemsByPage ? +e.stItemsByPage : t.pagination.itemsByPage, 
                e.stDisplayedPages = e.stDisplayedPages ? +e.stDisplayedPages : t.pagination.displayedPages, 
                e.currentPage = 1, e.pages = [], e.$watch(function() {
                    return s.tableState().pagination;
                }, r, !0), e.$watch("stItemsByPage", function(t, a) {
                    t !== a && e.selectPage(1);
                }), e.$watch("stDisplayedPages", r), e.selectPage = function(t) {
                    t > 0 && t <= e.numPages && s.slice((t - 1) * e.stItemsByPage, e.stItemsByPage);
                }, s.tableState().pagination.number || s.slice(0, e.stItemsByPage);
            }
        };
    } ]), t.module("smart-table").directive("stPipe", [ "stConfig", "$timeout", function(e, a) {
        return {
            require: "stTable",
            scope: {
                stPipe: "="
            },
            link: {
                pre: function(n, s, r, i) {
                    var c = null;
                    t.isFunction(n.stPipe) && (i.preventPipeOnWatch(), i.pipe = function() {
                        return null !== c && a.cancel(c), c = a(function() {
                            n.stPipe(i.tableState(), i);
                        }, e.pipe.delay);
                    });
                },
                post: function(t, e, a, n) {
                    n.pipe();
                }
            }
        };
    } ]);
}(angular);

angular.module("QuickList", []);

angular.module("QuickList").value("quickRepeatList", {});

angular.module("QuickList").directive("quickNgRepeat", [ "$parse", "$animate", "$rootScope", "quickRepeatList", function($parse, $animate, $rootScope, quick_repeat_list) {
    var NG_REMOVED = "$$NG_REMOVED";
    var ngRepeatMinErr = "err";
    var uid = [ "0", "0", "0" ];
    var list_id = window.list_id = function() {
        var i = 0;
        return function() {
            return "list_" + ++i;
        };
    }();
    function hashKey(obj) {
        var objType = typeof obj, key;
        if (objType == "object" && obj !== null) {
            if (typeof (key = obj.$$hashKey) == "function") {
                key = obj.$$hashKey();
            } else if (key === undefined) {
                key = obj.$$hashKey = nextUid();
            }
        } else {
            key = obj;
        }
        return objType + ":" + key;
    }
    function isWindow(obj) {
        return obj && obj.document && obj.location && obj.alert && obj.setInterval;
    }
    function nextUid() {
        var index = uid.length;
        var digit;
        while (index) {
            index--;
            digit = uid[index].charCodeAt(0);
            if (digit == 57) {
                uid[index] = "A";
                return uid.join("");
            }
            if (digit == 90) {
                uid[index] = "0";
            } else {
                uid[index] = String.fromCharCode(digit + 1);
                return uid.join("");
            }
        }
        uid.unshift("0");
        return uid.join("");
    }
    function isArrayLike(obj) {
        if (obj == null || isWindow(obj)) {
            return false;
        }
        var length = obj.length;
        if (obj.nodeType === 1 && length) {
            return true;
        }
        return angular.isArray(obj) || !angular.isFunction(obj) && (length === 0 || typeof length === "number" && length > 0 && length - 1 in obj);
    }
    return {
        transclude: "element",
        priority: 1e3,
        terminal: true,
        compile: function(element, attr, linker) {
            return function($scope, $element, $attr) {
                var expression = $attr.quickNgRepeat;
                var match = expression.match(/^\s*(.+)\s+in\s+(.*?)\s*(\s+track\s+by\s+(.+)\s*)?$/), trackByExp, trackByExpGetter, trackByIdFn, trackByIdArrayFn, trackByIdObjFn, lhs, rhs, valueIdentifier, keyIdentifier, hashFnLocals = {
                    $id: hashKey
                };
                if (!match) {
                    throw ngRepeatMinErr("iexp", "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.", expression);
                }
                lhs = match[1];
                rhs = match[2];
                trackByExp = match[4];
                if (trackByExp) {
                    trackByExpGetter = $parse(trackByExp);
                    trackByIdFn = function(key, value, index) {
                        if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
                        hashFnLocals[valueIdentifier] = value;
                        hashFnLocals.$index = index;
                        return trackByExpGetter($scope, hashFnLocals);
                    };
                } else {
                    trackByIdArrayFn = function(key, value) {
                        return hashKey(value);
                    };
                    trackByIdObjFn = function(key) {
                        return key;
                    };
                }
                match = lhs.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);
                if (!match) {
                    throw ngRepeatMinErr("iidexp", "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.", lhs);
                }
                valueIdentifier = match[3] || match[1];
                keyIdentifier = match[2];
                var lastBlockMap = {};
                var list_name = $attr.quickRepeatList || list_id();
                $scope.$watch(rhs, quick_repeat_list[list_name] = function(collection) {
                    var index, length, previousNode = $element[0], nextNode, nextBlockMap = {}, arrayLength, childScope, key, value, trackById, collectionKeys, block, nextBlockOrder = [];
                    if (isArrayLike(collection)) {
                        collectionKeys = collection;
                        trackByIdFn = trackByIdFn || trackByIdArrayFn;
                    } else {
                        trackByIdFn = trackByIdFn || trackByIdObjFn;
                        collectionKeys = [];
                        for (key in collection) {
                            if (collection.hasOwnProperty(key) && key.charAt(0) != "$") {
                                collectionKeys.push(key);
                            }
                        }
                        collectionKeys.sort();
                    }
                    arrayLength = collectionKeys.length;
                    length = nextBlockOrder.length = collectionKeys.length;
                    for (index = 0; index < length; index++) {
                        key = collection === collectionKeys ? index : collectionKeys[index];
                        value = collection[key];
                        trackById = trackByIdFn(key, value, index);
                        if (lastBlockMap.hasOwnProperty(trackById)) {
                            block = lastBlockMap[trackById];
                            delete lastBlockMap[trackById];
                            nextBlockMap[trackById] = block;
                            nextBlockOrder[index] = block;
                        } else if (nextBlockMap.hasOwnProperty(trackById)) {
                            angular.forEach(nextBlockOrder, function(block) {
                                if (block && block.startNode) lastBlockMap[block.id] = block;
                            });
                            throw ngRepeatMinErr("dupes", "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}", expression, trackById);
                        } else {
                            nextBlockOrder[index] = {
                                id: trackById
                            };
                            nextBlockMap[trackById] = false;
                        }
                    }
                    for (key in lastBlockMap) {
                        if (lastBlockMap.hasOwnProperty(key)) {
                            block = lastBlockMap[key];
                            $animate.leave(block.elements);
                            angular.forEach(block.elements, function(element) {
                                element[NG_REMOVED] = true;
                            });
                            block.scope.$destroy();
                        }
                    }
                    for (index = 0, length = collectionKeys.length; index < length; index++) {
                        key = collection === collectionKeys ? index : collectionKeys[index];
                        value = collection[key];
                        block = nextBlockOrder[index];
                        if (block.startNode) {
                            childScope = block.scope;
                            nextNode = previousNode;
                            do {
                                nextNode = nextNode.nextSibling;
                            } while (nextNode && nextNode[NG_REMOVED]);
                            if (block.startNode == nextNode) {} else {
                                $animate.move(block.elements, null, angular.element(previousNode));
                            }
                            previousNode = block.endNode;
                        } else {
                            childScope = $scope.$new();
                        }
                        childScope[valueIdentifier] = value;
                        if (keyIdentifier) childScope[keyIdentifier] = key;
                        childScope.$index = index;
                        childScope.$first = index === 0;
                        childScope.$last = index === arrayLength - 1;
                        childScope.$middle = !(childScope.$first || childScope.$last);
                        childScope.$odd = !(childScope.$even = index % 2 == 0);
                        if (!block.startNode) {
                            linker(childScope, function(clone) {
                                $animate.enter(clone, null, angular.element(previousNode));
                                previousNode = clone;
                                block.scope = childScope;
                                block.startNode = clone[0];
                                block.elements = clone;
                                block.endNode = clone[clone.length - 1];
                                nextBlockMap[block.id] = block;
                            });
                            if ($rootScope.$$phase !== "$digest" && childScope.$$phase !== "$digest") {
                                childScope.$digest();
                            }
                        }
                    }
                    lastBlockMap = nextBlockMap;
                });
            };
        }
    };
} ]);

(function(window, angular, undefined) {
    "use strict";
    angular.module("ngIdle", [ "ngIdle.keepalive", "ngIdle.idle", "ngIdle.countdown", "ngIdle.title", "ngIdle.localStorage" ]);
    angular.module("ngIdle.keepalive", []).provider("Keepalive", function() {
        var options = {
            http: null,
            interval: 10 * 60
        };
        this.http = function(value) {
            if (!value) throw new Error("Argument must be a string containing a URL, or an object containing the HTTP request configuration.");
            if (angular.isString(value)) {
                value = {
                    url: value,
                    method: "GET"
                };
            }
            value.cache = false;
            options.http = value;
        };
        var setInterval = this.interval = function(seconds) {
            seconds = parseInt(seconds);
            if (isNaN(seconds) || seconds <= 0) throw new Error("Interval must be expressed in seconds and be greater than 0.");
            options.interval = seconds;
        };
        this.$get = [ "$rootScope", "$log", "$interval", "$http", function($rootScope, $log, $interval, $http) {
            var state = {
                ping: null
            };
            function handleResponse(data, status) {
                $rootScope.$broadcast("KeepaliveResponse", data, status);
            }
            function ping() {
                $rootScope.$broadcast("Keepalive");
                if (angular.isObject(options.http)) {
                    $http(options.http).success(handleResponse).error(handleResponse);
                }
            }
            return {
                _options: function() {
                    return options;
                },
                setInterval: setInterval,
                start: function() {
                    $interval.cancel(state.ping);
                    state.ping = $interval(ping, options.interval * 1e3);
                    return state.ping;
                },
                stop: function() {
                    $interval.cancel(state.ping);
                },
                ping: function() {
                    ping();
                }
            };
        } ];
    });
    angular.module("ngIdle.idle", [ "ngIdle.keepalive", "ngIdle.localStorage" ]).provider("Idle", function() {
        var options = {
            idle: 20 * 60,
            timeout: 30,
            autoResume: "idle",
            interrupt: "mousemove keydown DOMMouseScroll mousewheel mousedown touchstart touchmove scroll",
            keepalive: true
        };
        var setTimeout = this.timeout = function(seconds) {
            if (seconds === false) options.timeout = 0; else if (angular.isNumber(seconds) && seconds >= 0) options.timeout = seconds; else throw new Error("Timeout must be zero or false to disable the feature, or a positive integer (in seconds) to enable it.");
        };
        this.interrupt = function(events) {
            options.interrupt = events;
        };
        var setIdle = this.idle = function(seconds) {
            if (seconds <= 0) throw new Error("Idle must be a value in seconds, greater than 0.");
            options.idle = seconds;
        };
        this.autoResume = function(value) {
            if (value === true) options.autoResume = "idle"; else if (value === false) options.autoResume = "off"; else options.autoResume = value;
        };
        this.keepalive = function(enabled) {
            options.keepalive = enabled === true;
        };
        this.$get = [ "$interval", "$log", "$rootScope", "$document", "Keepalive", "IdleLocalStorage", "$window", function($interval, $log, $rootScope, $document, Keepalive, LocalStorage, $window) {
            var state = {
                idle: null,
                timeout: null,
                idling: false,
                running: false,
                countdown: null
            };
            var id = new Date().getTime();
            function startKeepalive() {
                if (!options.keepalive) return;
                if (state.running) Keepalive.ping();
                Keepalive.start();
            }
            function stopKeepalive() {
                if (!options.keepalive) return;
                Keepalive.stop();
            }
            function toggleState() {
                state.idling = !state.idling;
                var name = state.idling ? "Start" : "End";
                $rootScope.$broadcast("Idle" + name);
                if (state.idling) {
                    stopKeepalive();
                    if (options.timeout) {
                        state.countdown = options.timeout;
                        countdown();
                        state.timeout = $interval(countdown, 1e3, options.timeout, false);
                    }
                } else {
                    startKeepalive();
                }
                $interval.cancel(state.idle);
            }
            function countdown() {
                if (state.countdown <= 0) {
                    timeout();
                    return;
                }
                $rootScope.$broadcast("IdleWarn", state.countdown);
                state.countdown--;
            }
            function timeout() {
                stopKeepalive();
                $interval.cancel(state.idle);
                $interval.cancel(state.timeout);
                state.idling = true;
                state.running = false;
                state.countdown = 0;
                $rootScope.$broadcast("IdleTimeout");
            }
            function changeOption(self, fn, value) {
                var reset = self.running();
                self.unwatch();
                fn(value);
                if (reset) self.watch();
            }
            function getExpiry() {
                var obj = LocalStorage.get("expiry");
                return obj && obj.time ? new Date(obj.time) : null;
            }
            function setExpiry(date) {
                if (!date) LocalStorage.remove("expiry"); else LocalStorage.set("expiry", {
                    id: id,
                    time: date
                });
            }
            var svc = {
                _options: function() {
                    return options;
                },
                _getNow: function() {
                    return new Date();
                },
                getIdle: function() {
                    return options.idle;
                },
                getTimeout: function() {
                    return options.timeout;
                },
                setIdle: function(seconds) {
                    changeOption(this, setIdle, seconds);
                },
                setTimeout: function(seconds) {
                    changeOption(this, setTimeout, seconds);
                },
                isExpired: function() {
                    var expiry = getExpiry();
                    return expiry !== null && expiry <= this._getNow();
                },
                running: function() {
                    return state.running;
                },
                idling: function() {
                    return state.idling;
                },
                watch: function(noExpiryUpdate) {
                    $interval.cancel(state.idle);
                    $interval.cancel(state.timeout);
                    var timeout = !options.timeout ? 0 : options.timeout;
                    if (!noExpiryUpdate) setExpiry(new Date(new Date().getTime() + (options.idle + timeout) * 1e3));
                    if (state.idling) toggleState(); else if (!state.running) startKeepalive();
                    state.running = true;
                    state.idle = $interval(toggleState, options.idle * 1e3, 0, false);
                },
                unwatch: function() {
                    $interval.cancel(state.idle);
                    $interval.cancel(state.timeout);
                    state.idling = false;
                    state.running = false;
                    setExpiry(null);
                    stopKeepalive();
                },
                interrupt: function(noExpiryUpdate) {
                    if (!state.running) return;
                    if (options.timeout && this.isExpired()) {
                        timeout();
                        return;
                    }
                    if (options.autoResume === "idle" || options.autoResume === "notIdle" && !state.idling) this.watch(noExpiryUpdate);
                }
            };
            $document.find("html").on(options.interrupt, function(event) {
                if (event.type === "mousemove" && event.originalEvent && event.originalEvent.movementX === 0 && event.originalEvent.movementY === 0) {
                    return;
                }
                if (event.type !== "mousemove" || angular.isUndefined(event.movementX) || (event.movementX || event.movementY)) {
                    svc.interrupt();
                }
            });
            var wrap = function(event) {
                if (event.key === "ngIdle.expiry" && event.newValue && event.newValue !== event.oldValue) {
                    var val = angular.fromJson(event.newValue);
                    if (val.id === id) return;
                    svc.interrupt(true);
                }
            };
            if ($window.addEventListener) $window.addEventListener("storage", wrap, false); else $window.attachEvent("onstorage", wrap);
            return svc;
        } ];
    });
    angular.module("ngIdle.countdown", [ "ngIdle.idle" ]).directive("idleCountdown", [ "Idle", function(Idle) {
        return {
            restrict: "A",
            scope: {
                value: "=idleCountdown"
            },
            link: function($scope) {
                $scope.value = Idle.getTimeout();
                $scope.$on("IdleWarn", function(e, countdown) {
                    $scope.$evalAsync(function() {
                        $scope.value = countdown;
                    });
                });
                $scope.$on("IdleTimeout", function() {
                    $scope.$evalAsync(function() {
                        $scope.value = 0;
                    });
                });
            }
        };
    } ]);
    angular.module("ngIdle.title", []).provider("Title", function() {
        var options = {
            enabled: true
        };
        var setEnabled = this.enabled = function(enabled) {
            options.enabled = enabled === true;
        };
        function padLeft(nr, n, str) {
            return new Array(n - String(nr).length + 1).join(str || "0") + nr;
        }
        this.$get = [ "$document", "$interpolate", function($document, $interpolate) {
            var state = {
                original: null,
                idle: "{{minutes}}:{{seconds}} until your session times out!",
                timedout: "Your session has expired."
            };
            return {
                setEnabled: setEnabled,
                isEnabled: function() {
                    return options.enabled;
                },
                original: function(val) {
                    if (angular.isUndefined(val)) return state.original;
                    state.original = val;
                },
                store: function(overwrite) {
                    if (overwrite || !state.original) state.original = this.value();
                },
                value: function(val) {
                    if (angular.isUndefined(val)) return $document[0].title;
                    $document[0].title = val;
                },
                idleMessage: function(val) {
                    if (angular.isUndefined(val)) return state.idle;
                    state.idle = val;
                },
                timedOutMessage: function(val) {
                    if (angular.isUndefined(val)) return state.timedout;
                    state.timedout = val;
                },
                setAsIdle: function(countdown) {
                    this.store();
                    var remaining = {
                        totalSeconds: countdown
                    };
                    remaining.minutes = Math.floor(countdown / 60);
                    remaining.seconds = padLeft(countdown - remaining.minutes * 60, 2);
                    this.value($interpolate(this.idleMessage())(remaining));
                },
                setAsTimedOut: function() {
                    this.store();
                    this.value(this.timedOutMessage());
                },
                restore: function() {
                    if (this.original()) this.value(this.original());
                }
            };
        } ];
    }).directive("title", [ "Title", function(Title) {
        return {
            restrict: "E",
            link: function($scope, $element, $attr) {
                if (!Title.isEnabled() || $attr.idleDisabled) return;
                Title.store(true);
                $scope.$on("IdleStart", function() {
                    Title.original($element[0].innerText);
                });
                $scope.$on("IdleWarn", function(e, countdown) {
                    Title.setAsIdle(countdown);
                });
                $scope.$on("IdleEnd", function() {
                    Title.restore();
                });
                $scope.$on("IdleTimeout", function() {
                    Title.setAsTimedOut();
                });
            }
        };
    } ]);
    angular.module("ngIdle.localStorage", []).service("IdleStorageAccessor", [ "$window", function($window) {
        return {
            get: function() {
                return $window.localStorage;
            }
        };
    } ]).service("IdleLocalStorage", [ "IdleStorageAccessor", function(IdleStorageAccessor) {
        function AlternativeStorage() {
            var storageMap = {};
            this.setItem = function(key, value) {
                storageMap[key] = value;
            };
            this.getItem = function(key) {
                if (typeof storageMap[key] !== "undefined") {
                    return storageMap[key];
                }
                return null;
            };
            this.removeItem = function(key) {
                storageMap[key] = undefined;
            };
        }
        function getStorage() {
            try {
                var s = IdleStorageAccessor.get();
                s.setItem("ngIdleStorage", "");
                s.removeItem("ngIdleStorage");
                return s;
            } catch (err) {
                return new AlternativeStorage();
            }
        }
        var storage = getStorage();
        return {
            set: function(key, value) {
                storage.setItem("ngIdle." + key, angular.toJson(value));
            },
            get: function(key) {
                return angular.fromJson(storage.getItem("ngIdle." + key));
            },
            remove: function(key) {
                storage.removeItem("ngIdle." + key);
            },
            _wrapped: function() {
                return storage;
            }
        };
    } ]);
})(window, window.angular);

(function(window, angular) {
    var isDefined = angular.isDefined, isUndefined = angular.isUndefined, isNumber = angular.isNumber, isObject = angular.isObject, isArray = angular.isArray, extend = angular.extend, toJson = angular.toJson;
    angular.module("LocalStorageModule", []).provider("localStorageService", function() {
        this.prefix = "ls";
        this.storageType = "localStorage";
        this.cookie = {
            expiry: 30,
            path: "/"
        };
        this.notify = {
            setItem: true,
            removeItem: false
        };
        this.setPrefix = function(prefix) {
            this.prefix = prefix;
            return this;
        };
        this.setStorageType = function(storageType) {
            this.storageType = storageType;
            return this;
        };
        this.setStorageCookie = function(exp, path) {
            this.cookie.expiry = exp;
            this.cookie.path = path;
            return this;
        };
        this.setStorageCookieDomain = function(domain) {
            this.cookie.domain = domain;
            return this;
        };
        this.setNotify = function(itemSet, itemRemove) {
            this.notify = {
                setItem: itemSet,
                removeItem: itemRemove
            };
            return this;
        };
        this.$get = [ "$rootScope", "$window", "$document", "$parse", function($rootScope, $window, $document, $parse) {
            var self = this;
            var prefix = self.prefix;
            var cookie = self.cookie;
            var notify = self.notify;
            var storageType = self.storageType;
            var webStorage;
            if (!$document) {
                $document = document;
            } else if ($document[0]) {
                $document = $document[0];
            }
            if (prefix.substr(-1) !== ".") {
                prefix = !!prefix ? prefix + "." : "";
            }
            var deriveQualifiedKey = function(key) {
                return prefix + key;
            };
            var browserSupportsLocalStorage = function() {
                try {
                    var supported = storageType in $window && $window[storageType] !== null;
                    var key = deriveQualifiedKey("__" + Math.round(Math.random() * 1e7));
                    if (supported) {
                        webStorage = $window[storageType];
                        webStorage.setItem(key, "");
                        webStorage.removeItem(key);
                    }
                    return supported;
                } catch (e) {
                    storageType = "cookie";
                    $rootScope.$broadcast("LocalStorageModule.notification.error", e.message);
                    return false;
                }
            }();
            var addToLocalStorage = function(key, value) {
                if (isUndefined(value)) {
                    value = null;
                } else {
                    value = toJson(value);
                }
                if (!browserSupportsLocalStorage || self.storageType === "cookie") {
                    if (!browserSupportsLocalStorage) {
                        $rootScope.$broadcast("LocalStorageModule.notification.warning", "LOCAL_STORAGE_NOT_SUPPORTED");
                    }
                    if (notify.setItem) {
                        $rootScope.$broadcast("LocalStorageModule.notification.setitem", {
                            key: key,
                            newvalue: value,
                            storageType: "cookie"
                        });
                    }
                    return addToCookies(key, value);
                }
                try {
                    if (webStorage) {
                        webStorage.setItem(deriveQualifiedKey(key), value);
                    }
                    if (notify.setItem) {
                        $rootScope.$broadcast("LocalStorageModule.notification.setitem", {
                            key: key,
                            newvalue: value,
                            storageType: self.storageType
                        });
                    }
                } catch (e) {
                    $rootScope.$broadcast("LocalStorageModule.notification.error", e.message);
                    return addToCookies(key, value);
                }
                return true;
            };
            var getFromLocalStorage = function(key) {
                if (!browserSupportsLocalStorage || self.storageType === "cookie") {
                    if (!browserSupportsLocalStorage) {
                        $rootScope.$broadcast("LocalStorageModule.notification.warning", "LOCAL_STORAGE_NOT_SUPPORTED");
                    }
                    return getFromCookies(key);
                }
                var item = webStorage ? webStorage.getItem(deriveQualifiedKey(key)) : null;
                if (!item || item === "null") {
                    return null;
                }
                try {
                    return JSON.parse(item);
                } catch (e) {
                    return item;
                }
            };
            var removeFromLocalStorage = function() {
                var i, key;
                for (i = 0; i < arguments.length; i++) {
                    key = arguments[i];
                    if (!browserSupportsLocalStorage || self.storageType === "cookie") {
                        if (!browserSupportsLocalStorage) {
                            $rootScope.$broadcast("LocalStorageModule.notification.warning", "LOCAL_STORAGE_NOT_SUPPORTED");
                        }
                        if (notify.removeItem) {
                            $rootScope.$broadcast("LocalStorageModule.notification.removeitem", {
                                key: key,
                                storageType: "cookie"
                            });
                        }
                        removeFromCookies(key);
                    } else {
                        try {
                            webStorage.removeItem(deriveQualifiedKey(key));
                            if (notify.removeItem) {
                                $rootScope.$broadcast("LocalStorageModule.notification.removeitem", {
                                    key: key,
                                    storageType: self.storageType
                                });
                            }
                        } catch (e) {
                            $rootScope.$broadcast("LocalStorageModule.notification.error", e.message);
                            removeFromCookies(key);
                        }
                    }
                }
            };
            var getKeysForLocalStorage = function() {
                if (!browserSupportsLocalStorage) {
                    $rootScope.$broadcast("LocalStorageModule.notification.warning", "LOCAL_STORAGE_NOT_SUPPORTED");
                    return [];
                }
                var prefixLength = prefix.length;
                var keys = [];
                for (var key in webStorage) {
                    if (key.substr(0, prefixLength) === prefix) {
                        try {
                            keys.push(key.substr(prefixLength));
                        } catch (e) {
                            $rootScope.$broadcast("LocalStorageModule.notification.error", e.Description);
                            return [];
                        }
                    }
                }
                return keys;
            };
            var clearAllFromLocalStorage = function(regularExpression) {
                var prefixRegex = !!prefix ? new RegExp("^" + prefix) : new RegExp();
                var testRegex = !!regularExpression ? new RegExp(regularExpression) : new RegExp();
                if (!browserSupportsLocalStorage || self.storageType === "cookie") {
                    if (!browserSupportsLocalStorage) {
                        $rootScope.$broadcast("LocalStorageModule.notification.warning", "LOCAL_STORAGE_NOT_SUPPORTED");
                    }
                    return clearAllFromCookies();
                }
                var prefixLength = prefix.length;
                for (var key in webStorage) {
                    if (prefixRegex.test(key) && testRegex.test(key.substr(prefixLength))) {
                        try {
                            removeFromLocalStorage(key.substr(prefixLength));
                        } catch (e) {
                            $rootScope.$broadcast("LocalStorageModule.notification.error", e.message);
                            return clearAllFromCookies();
                        }
                    }
                }
                return true;
            };
            var browserSupportsCookies = function() {
                try {
                    return $window.navigator.cookieEnabled || "cookie" in $document && ($document.cookie.length > 0 || ($document.cookie = "test").indexOf.call($document.cookie, "test") > -1);
                } catch (e) {
                    $rootScope.$broadcast("LocalStorageModule.notification.error", e.message);
                    return false;
                }
            }();
            var addToCookies = function(key, value, daysToExpiry) {
                if (isUndefined(value)) {
                    return false;
                } else if (isArray(value) || isObject(value)) {
                    value = toJson(value);
                }
                if (!browserSupportsCookies) {
                    $rootScope.$broadcast("LocalStorageModule.notification.error", "COOKIES_NOT_SUPPORTED");
                    return false;
                }
                try {
                    var expiry = "", expiryDate = new Date(), cookieDomain = "";
                    if (value === null) {
                        expiryDate.setTime(expiryDate.getTime() + -1 * 24 * 60 * 60 * 1e3);
                        expiry = "; expires=" + expiryDate.toGMTString();
                        value = "";
                    } else if (isNumber(daysToExpiry) && daysToExpiry !== 0) {
                        expiryDate.setTime(expiryDate.getTime() + daysToExpiry * 24 * 60 * 60 * 1e3);
                        expiry = "; expires=" + expiryDate.toGMTString();
                    } else if (cookie.expiry !== 0) {
                        expiryDate.setTime(expiryDate.getTime() + cookie.expiry * 24 * 60 * 60 * 1e3);
                        expiry = "; expires=" + expiryDate.toGMTString();
                    }
                    if (!!key) {
                        var cookiePath = "; path=" + cookie.path;
                        if (cookie.domain) {
                            cookieDomain = "; domain=" + cookie.domain;
                        }
                        $document.cookie = deriveQualifiedKey(key) + "=" + encodeURIComponent(value) + expiry + cookiePath + cookieDomain;
                    }
                } catch (e) {
                    $rootScope.$broadcast("LocalStorageModule.notification.error", e.message);
                    return false;
                }
                return true;
            };
            var getFromCookies = function(key) {
                if (!browserSupportsCookies) {
                    $rootScope.$broadcast("LocalStorageModule.notification.error", "COOKIES_NOT_SUPPORTED");
                    return false;
                }
                var cookies = $document.cookie && $document.cookie.split(";") || [];
                for (var i = 0; i < cookies.length; i++) {
                    var thisCookie = cookies[i];
                    while (thisCookie.charAt(0) === " ") {
                        thisCookie = thisCookie.substring(1, thisCookie.length);
                    }
                    if (thisCookie.indexOf(deriveQualifiedKey(key) + "=") === 0) {
                        var storedValues = decodeURIComponent(thisCookie.substring(prefix.length + key.length + 1, thisCookie.length));
                        try {
                            return JSON.parse(storedValues);
                        } catch (e) {
                            return storedValues;
                        }
                    }
                }
                return null;
            };
            var removeFromCookies = function(key) {
                addToCookies(key, null);
            };
            var clearAllFromCookies = function() {
                var thisCookie = null, thisKey = null;
                var prefixLength = prefix.length;
                var cookies = $document.cookie.split(";");
                for (var i = 0; i < cookies.length; i++) {
                    thisCookie = cookies[i];
                    while (thisCookie.charAt(0) === " ") {
                        thisCookie = thisCookie.substring(1, thisCookie.length);
                    }
                    var key = thisCookie.substring(prefixLength, thisCookie.indexOf("="));
                    removeFromCookies(key);
                }
            };
            var getStorageType = function() {
                return storageType;
            };
            var bindToScope = function(scope, key, def, lsKey) {
                lsKey = lsKey || key;
                var value = getFromLocalStorage(lsKey);
                if (value === null && isDefined(def)) {
                    value = def;
                } else if (isObject(value) && isObject(def)) {
                    value = extend(value, def);
                }
                $parse(key).assign(scope, value);
                return scope.$watch(key, function(newVal) {
                    addToLocalStorage(lsKey, newVal);
                }, isObject(scope[key]));
            };
            var lengthOfLocalStorage = function() {
                var count = 0;
                var storage = $window[storageType];
                for (var i = 0; i < storage.length; i++) {
                    if (storage.key(i).indexOf(prefix) === 0) {
                        count++;
                    }
                }
                return count;
            };
            return {
                isSupported: browserSupportsLocalStorage,
                getStorageType: getStorageType,
                set: addToLocalStorage,
                add: addToLocalStorage,
                get: getFromLocalStorage,
                keys: getKeysForLocalStorage,
                remove: removeFromLocalStorage,
                clearAll: clearAllFromLocalStorage,
                bind: bindToScope,
                deriveKey: deriveQualifiedKey,
                length: lengthOfLocalStorage,
                cookie: {
                    isSupported: browserSupportsCookies,
                    set: addToCookies,
                    add: addToCookies,
                    get: getFromCookies,
                    remove: removeFromCookies,
                    clearAll: clearAllFromCookies
                }
            };
        } ];
    });
})(window, window.angular);

(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === "object" && typeof module === "object") module.exports = factory(); else if (typeof define === "function" && define.amd) define([], factory); else if (typeof exports === "object") exports["angular-file-upload"] = factory(); else root["angular-file-upload"] = factory();
})(this, function() {
    return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) return installedModules[moduleId].exports;
            var module = installedModules[moduleId] = {
                exports: {},
                id: moduleId,
                loaded: false
            };
            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            module.loaded = true;
            return module.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.p = "";
        return __webpack_require__(0);
    }([ function(module, exports, __webpack_require__) {
        "use strict";
        var _config = __webpack_require__(1);
        var _config2 = _interopRequireDefault(_config);
        var _options = __webpack_require__(2);
        var _options2 = _interopRequireDefault(_options);
        var _FileUploader = __webpack_require__(3);
        var _FileUploader2 = _interopRequireDefault(_FileUploader);
        var _FileLikeObject = __webpack_require__(4);
        var _FileLikeObject2 = _interopRequireDefault(_FileLikeObject);
        var _FileItem = __webpack_require__(5);
        var _FileItem2 = _interopRequireDefault(_FileItem);
        var _FileDirective = __webpack_require__(6);
        var _FileDirective2 = _interopRequireDefault(_FileDirective);
        var _FileSelect = __webpack_require__(7);
        var _FileSelect2 = _interopRequireDefault(_FileSelect);
        var _Pipeline = __webpack_require__(8);
        var _Pipeline2 = _interopRequireDefault(_Pipeline);
        var _FileDrop = __webpack_require__(9);
        var _FileDrop2 = _interopRequireDefault(_FileDrop);
        var _FileOver = __webpack_require__(10);
        var _FileOver2 = _interopRequireDefault(_FileOver);
        var _FileSelect3 = __webpack_require__(11);
        var _FileSelect4 = _interopRequireDefault(_FileSelect3);
        var _FileDrop3 = __webpack_require__(12);
        var _FileDrop4 = _interopRequireDefault(_FileDrop3);
        var _FileOver3 = __webpack_require__(13);
        var _FileOver4 = _interopRequireDefault(_FileOver3);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        angular.module(_config2.default.name, []).value("fileUploaderOptions", _options2.default).factory("FileUploader", _FileUploader2.default).factory("FileLikeObject", _FileLikeObject2.default).factory("FileItem", _FileItem2.default).factory("FileDirective", _FileDirective2.default).factory("FileSelect", _FileSelect2.default).factory("FileDrop", _FileDrop2.default).factory("FileOver", _FileOver2.default).factory("Pipeline", _Pipeline2.default).directive("nvFileSelect", _FileSelect4.default).directive("nvFileDrop", _FileDrop4.default).directive("nvFileOver", _FileOver4.default).run([ "FileUploader", "FileLikeObject", "FileItem", "FileDirective", "FileSelect", "FileDrop", "FileOver", "Pipeline", function(FileUploader, FileLikeObject, FileItem, FileDirective, FileSelect, FileDrop, FileOver, Pipeline) {
            FileUploader.FileLikeObject = FileLikeObject;
            FileUploader.FileItem = FileItem;
            FileUploader.FileDirective = FileDirective;
            FileUploader.FileSelect = FileSelect;
            FileUploader.FileDrop = FileDrop;
            FileUploader.FileOver = FileOver;
            FileUploader.Pipeline = Pipeline;
        } ]);
    }, function(module, exports) {
        module.exports = {
            name: "angularFileUpload"
        };
    }, function(module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = {
            url: "/",
            alias: "file",
            headers: {},
            queue: [],
            progress: 0,
            autoUpload: false,
            removeAfterUpload: false,
            method: "POST",
            filters: [],
            formData: [],
            queueLimit: Number.MAX_VALUE,
            withCredentials: false,
            disableMultipart: false
        };
    }, function(module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _slicedToArray = function() {
            function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = undefined;
                try {
                    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                        _arr.push(_s.value);
                        if (i && _arr.length === i) break;
                    }
                } catch (err) {
                    _d = true;
                    _e = err;
                } finally {
                    try {
                        if (!_n && _i["return"]) _i["return"]();
                    } finally {
                        if (_d) throw _e;
                    }
                }
                return _arr;
            }
            return function(arr, i) {
                if (Array.isArray(arr)) {
                    return arr;
                } else if (Symbol.iterator in Object(arr)) {
                    return sliceIterator(arr, i);
                } else {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
            };
        }();
        exports.default = __identity;
        var _config = __webpack_require__(1);
        var _config2 = _interopRequireDefault(_config);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var _angular = angular, bind = _angular.bind, copy = _angular.copy, extend = _angular.extend, forEach = _angular.forEach, isObject = _angular.isObject, isNumber = _angular.isNumber, isDefined = _angular.isDefined, isArray = _angular.isArray, isUndefined = _angular.isUndefined, element = _angular.element;
        function __identity(fileUploaderOptions, $rootScope, $http, $window, $timeout, FileLikeObject, FileItem, Pipeline) {
            var File = $window.File, FormData = $window.FormData;
            var FileUploader = function() {
                function FileUploader(options) {
                    _classCallCheck(this, FileUploader);
                    var settings = copy(fileUploaderOptions);
                    extend(this, settings, options, {
                        isUploading: false,
                        _nextIndex: 0,
                        _directives: {
                            select: [],
                            drop: [],
                            over: []
                        }
                    });
                    this.filters.unshift({
                        name: "queueLimit",
                        fn: this._queueLimitFilter
                    });
                    this.filters.unshift({
                        name: "folder",
                        fn: this._folderFilter
                    });
                }
                FileUploader.prototype.addToQueue = function addToQueue(files, options, filters) {
                    var _this = this;
                    var incomingQueue = this.isArrayLikeObject(files) ? Array.prototype.slice.call(files) : [ files ];
                    var arrayOfFilters = this._getFilters(filters);
                    var count = this.queue.length;
                    var addedFileItems = [];
                    var next = function next() {
                        var something = incomingQueue.shift();
                        if (isUndefined(something)) {
                            return done();
                        }
                        var fileLikeObject = _this.isFile(something) ? something : new FileLikeObject(something);
                        var pipes = _this._convertFiltersToPipes(arrayOfFilters);
                        var pipeline = new Pipeline(pipes);
                        var onThrown = function onThrown(err) {
                            var originalFilter = err.pipe.originalFilter;
                            var _err$args = _slicedToArray(err.args, 2), fileLikeObject = _err$args[0], options = _err$args[1];
                            _this._onWhenAddingFileFailed(fileLikeObject, originalFilter, options);
                            next();
                        };
                        var onSuccessful = function onSuccessful(fileLikeObject, options) {
                            var fileItem = new FileItem(_this, fileLikeObject, options);
                            addedFileItems.push(fileItem);
                            _this.queue.push(fileItem);
                            _this._onAfterAddingFile(fileItem);
                            next();
                        };
                        pipeline.onThrown = onThrown;
                        pipeline.onSuccessful = onSuccessful;
                        pipeline.exec(fileLikeObject, options);
                    };
                    var done = function done() {
                        if (_this.queue.length !== count) {
                            _this._onAfterAddingAll(addedFileItems);
                            _this.progress = _this._getTotalProgress();
                        }
                        _this._render();
                        if (_this.autoUpload) _this.uploadAll();
                    };
                    next();
                };
                FileUploader.prototype.removeFromQueue = function removeFromQueue(value) {
                    var index = this.getIndexOfItem(value);
                    var item = this.queue[index];
                    if (item.isUploading) item.cancel();
                    this.queue.splice(index, 1);
                    item._destroy();
                    this.progress = this._getTotalProgress();
                };
                FileUploader.prototype.clearQueue = function clearQueue() {
                    while (this.queue.length) {
                        this.queue[0].remove();
                    }
                    this.progress = 0;
                };
                FileUploader.prototype.uploadItem = function uploadItem(value) {
                    var index = this.getIndexOfItem(value);
                    var item = this.queue[index];
                    var transport = this.isHTML5 ? "_xhrTransport" : "_iframeTransport";
                    item._prepareToUploading();
                    if (this.isUploading) return;
                    this._onBeforeUploadItem(item);
                    if (item.isCancel) return;
                    item.isUploading = true;
                    this.isUploading = true;
                    this[transport](item);
                    this._render();
                };
                FileUploader.prototype.cancelItem = function cancelItem(value) {
                    var _this2 = this;
                    var index = this.getIndexOfItem(value);
                    var item = this.queue[index];
                    var prop = this.isHTML5 ? "_xhr" : "_form";
                    if (!item) return;
                    item.isCancel = true;
                    if (item.isUploading) {
                        item[prop].abort();
                    } else {
                        var dummy = [ undefined, 0, {} ];
                        var onNextTick = function onNextTick() {
                            _this2._onCancelItem.apply(_this2, [ item ].concat(dummy));
                            _this2._onCompleteItem.apply(_this2, [ item ].concat(dummy));
                        };
                        $timeout(onNextTick);
                    }
                };
                FileUploader.prototype.uploadAll = function uploadAll() {
                    var items = this.getNotUploadedItems().filter(function(item) {
                        return !item.isUploading;
                    });
                    if (!items.length) return;
                    forEach(items, function(item) {
                        return item._prepareToUploading();
                    });
                    items[0].upload();
                };
                FileUploader.prototype.cancelAll = function cancelAll() {
                    var items = this.getNotUploadedItems();
                    forEach(items, function(item) {
                        return item.cancel();
                    });
                };
                FileUploader.prototype.isFile = function isFile(value) {
                    return this.constructor.isFile(value);
                };
                FileUploader.prototype.isFileLikeObject = function isFileLikeObject(value) {
                    return this.constructor.isFileLikeObject(value);
                };
                FileUploader.prototype.isArrayLikeObject = function isArrayLikeObject(value) {
                    return this.constructor.isArrayLikeObject(value);
                };
                FileUploader.prototype.getIndexOfItem = function getIndexOfItem(value) {
                    return isNumber(value) ? value : this.queue.indexOf(value);
                };
                FileUploader.prototype.getNotUploadedItems = function getNotUploadedItems() {
                    return this.queue.filter(function(item) {
                        return !item.isUploaded;
                    });
                };
                FileUploader.prototype.getReadyItems = function getReadyItems() {
                    return this.queue.filter(function(item) {
                        return item.isReady && !item.isUploading;
                    }).sort(function(item1, item2) {
                        return item1.index - item2.index;
                    });
                };
                FileUploader.prototype.destroy = function destroy() {
                    var _this3 = this;
                    forEach(this._directives, function(key) {
                        forEach(_this3._directives[key], function(object) {
                            object.destroy();
                        });
                    });
                };
                FileUploader.prototype.onAfterAddingAll = function onAfterAddingAll(fileItems) {};
                FileUploader.prototype.onAfterAddingFile = function onAfterAddingFile(fileItem) {};
                FileUploader.prototype.onWhenAddingFileFailed = function onWhenAddingFileFailed(item, filter, options) {};
                FileUploader.prototype.onBeforeUploadItem = function onBeforeUploadItem(fileItem) {};
                FileUploader.prototype.onProgressItem = function onProgressItem(fileItem, progress) {};
                FileUploader.prototype.onProgressAll = function onProgressAll(progress) {};
                FileUploader.prototype.onSuccessItem = function onSuccessItem(item, response, status, headers) {};
                FileUploader.prototype.onErrorItem = function onErrorItem(item, response, status, headers) {};
                FileUploader.prototype.onCancelItem = function onCancelItem(item, response, status, headers) {};
                FileUploader.prototype.onCompleteItem = function onCompleteItem(item, response, status, headers) {};
                FileUploader.prototype.onTimeoutItem = function onTimeoutItem(item) {};
                FileUploader.prototype.onCompleteAll = function onCompleteAll() {};
                FileUploader.prototype._getTotalProgress = function _getTotalProgress(value) {
                    if (this.removeAfterUpload) return value || 0;
                    var notUploaded = this.getNotUploadedItems().length;
                    var uploaded = notUploaded ? this.queue.length - notUploaded : this.queue.length;
                    var ratio = 100 / this.queue.length;
                    var current = (value || 0) * ratio / 100;
                    return Math.round(uploaded * ratio + current);
                };
                FileUploader.prototype._getFilters = function _getFilters(filters) {
                    if (!filters) return this.filters;
                    if (isArray(filters)) return filters;
                    var names = filters.match(/[^\s,]+/g);
                    return this.filters.filter(function(filter) {
                        return names.indexOf(filter.name) !== -1;
                    });
                };
                FileUploader.prototype._convertFiltersToPipes = function _convertFiltersToPipes(filters) {
                    var _this4 = this;
                    return filters.map(function(filter) {
                        var fn = bind(_this4, filter.fn);
                        fn.isAsync = filter.fn.length === 3;
                        fn.originalFilter = filter;
                        return fn;
                    });
                };
                FileUploader.prototype._render = function _render() {
                    if (!$rootScope.$$phase) $rootScope.$apply();
                };
                FileUploader.prototype._folderFilter = function _folderFilter(item) {
                    return !!(item.size || item.type);
                };
                FileUploader.prototype._queueLimitFilter = function _queueLimitFilter() {
                    return this.queue.length < this.queueLimit;
                };
                FileUploader.prototype._isSuccessCode = function _isSuccessCode(status) {
                    return status >= 200 && status < 300 || status === 304;
                };
                FileUploader.prototype._transformResponse = function _transformResponse(response, headers) {
                    var headersGetter = this._headersGetter(headers);
                    forEach($http.defaults.transformResponse, function(transformFn) {
                        response = transformFn(response, headersGetter);
                    });
                    return response;
                };
                FileUploader.prototype._parseHeaders = function _parseHeaders(headers) {
                    var parsed = {}, key, val, i;
                    if (!headers) return parsed;
                    forEach(headers.split("\n"), function(line) {
                        i = line.indexOf(":");
                        key = line.slice(0, i).trim().toLowerCase();
                        val = line.slice(i + 1).trim();
                        if (key) {
                            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
                        }
                    });
                    return parsed;
                };
                FileUploader.prototype._headersGetter = function _headersGetter(parsedHeaders) {
                    return function(name) {
                        if (name) {
                            return parsedHeaders[name.toLowerCase()] || null;
                        }
                        return parsedHeaders;
                    };
                };
                FileUploader.prototype._xhrTransport = function _xhrTransport(item) {
                    var _this5 = this;
                    var xhr = item._xhr = new XMLHttpRequest();
                    var sendable;
                    if (!item.disableMultipart) {
                        sendable = new FormData();
                        forEach(item.formData, function(obj) {
                            forEach(obj, function(value, key) {
                                sendable.append(key, value);
                            });
                        });
                        sendable.append(item.alias, item._file, item.file.name);
                    } else {
                        sendable = item._file;
                    }
                    if (typeof item._file.size != "number") {
                        throw new TypeError("The file specified is no longer valid");
                    }
                    xhr.upload.onprogress = function(event) {
                        var progress = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);
                        _this5._onProgressItem(item, progress);
                    };
                    xhr.onload = function() {
                        var headers = _this5._parseHeaders(xhr.getAllResponseHeaders());
                        var response = _this5._transformResponse(xhr.response, headers);
                        var gist = _this5._isSuccessCode(xhr.status) ? "Success" : "Error";
                        var method = "_on" + gist + "Item";
                        _this5[method](item, response, xhr.status, headers);
                        _this5._onCompleteItem(item, response, xhr.status, headers);
                    };
                    xhr.onerror = function() {
                        var headers = _this5._parseHeaders(xhr.getAllResponseHeaders());
                        var response = _this5._transformResponse(xhr.response, headers);
                        _this5._onErrorItem(item, response, xhr.status, headers);
                        _this5._onCompleteItem(item, response, xhr.status, headers);
                    };
                    xhr.onabort = function() {
                        var headers = _this5._parseHeaders(xhr.getAllResponseHeaders());
                        var response = _this5._transformResponse(xhr.response, headers);
                        _this5._onCancelItem(item, response, xhr.status, headers);
                        _this5._onCompleteItem(item, response, xhr.status, headers);
                    };
                    xhr.ontimeout = function(e) {
                        var headers = _this5._parseHeaders(xhr.getAllResponseHeaders());
                        var response = "Request Timeout.";
                        _this5._onTimeoutItem(item);
                        _this5._onCompleteItem(item, response, 408, headers);
                    };
                    xhr.open(item.method, item.url, true);
                    xhr.timeout = item.timeout || 0;
                    xhr.withCredentials = item.withCredentials;
                    forEach(item.headers, function(value, name) {
                        xhr.setRequestHeader(name, value);
                    });
                    xhr.send(sendable);
                };
                FileUploader.prototype._iframeTransport = function _iframeTransport(item) {
                    var _this6 = this;
                    var form = element('<form style="display: none;" />');
                    var iframe = element('<iframe name="iframeTransport' + Date.now() + '">');
                    var input = item._input;
                    var timeout = 0;
                    var timer = null;
                    var isTimedOut = false;
                    if (item._form) item._form.replaceWith(input);
                    item._form = form;
                    input.prop("name", item.alias);
                    forEach(item.formData, function(obj) {
                        forEach(obj, function(value, key) {
                            var element_ = element('<input type="hidden" name="' + key + '" />');
                            element_.val(value);
                            form.append(element_);
                        });
                    });
                    form.prop({
                        action: item.url,
                        method: "POST",
                        target: iframe.prop("name"),
                        enctype: "multipart/form-data",
                        encoding: "multipart/form-data"
                    });
                    iframe.bind("load", function() {
                        var html = "";
                        var status = 200;
                        try {
                            html = iframe[0].contentDocument.body.innerHTML;
                        } catch (e) {
                            status = 500;
                        }
                        if (timer) {
                            clearTimeout(timer);
                        }
                        timer = null;
                        if (isTimedOut) {
                            return false;
                        }
                        var xhr = {
                            response: html,
                            status: status,
                            dummy: true
                        };
                        var headers = {};
                        var response = _this6._transformResponse(xhr.response, headers);
                        _this6._onSuccessItem(item, response, xhr.status, headers);
                        _this6._onCompleteItem(item, response, xhr.status, headers);
                    });
                    form.abort = function() {
                        var xhr = {
                            status: 0,
                            dummy: true
                        };
                        var headers = {};
                        var response;
                        iframe.unbind("load").prop("src", "javascript:false;");
                        form.replaceWith(input);
                        _this6._onCancelItem(item, response, xhr.status, headers);
                        _this6._onCompleteItem(item, response, xhr.status, headers);
                    };
                    input.after(form);
                    form.append(input).append(iframe);
                    timeout = item.timeout || 0;
                    timer = null;
                    if (timeout) {
                        timer = setTimeout(function() {
                            isTimedOut = true;
                            item.isCancel = true;
                            if (item.isUploading) {
                                iframe.unbind("load").prop("src", "javascript:false;");
                                form.replaceWith(input);
                            }
                            var headers = {};
                            var response = "Request Timeout.";
                            _this6._onTimeoutItem(item);
                            _this6._onCompleteItem(item, response, 408, headers);
                        }, timeout);
                    }
                    form[0].submit();
                };
                FileUploader.prototype._onWhenAddingFileFailed = function _onWhenAddingFileFailed(item, filter, options) {
                    this.onWhenAddingFileFailed(item, filter, options);
                };
                FileUploader.prototype._onAfterAddingFile = function _onAfterAddingFile(item) {
                    this.onAfterAddingFile(item);
                };
                FileUploader.prototype._onAfterAddingAll = function _onAfterAddingAll(items) {
                    this.onAfterAddingAll(items);
                };
                FileUploader.prototype._onBeforeUploadItem = function _onBeforeUploadItem(item) {
                    item._onBeforeUpload();
                    this.onBeforeUploadItem(item);
                };
                FileUploader.prototype._onProgressItem = function _onProgressItem(item, progress) {
                    var total = this._getTotalProgress(progress);
                    this.progress = total;
                    item._onProgress(progress);
                    this.onProgressItem(item, progress);
                    this.onProgressAll(total);
                    this._render();
                };
                FileUploader.prototype._onSuccessItem = function _onSuccessItem(item, response, status, headers) {
                    item._onSuccess(response, status, headers);
                    this.onSuccessItem(item, response, status, headers);
                };
                FileUploader.prototype._onErrorItem = function _onErrorItem(item, response, status, headers) {
                    item._onError(response, status, headers);
                    this.onErrorItem(item, response, status, headers);
                };
                FileUploader.prototype._onCancelItem = function _onCancelItem(item, response, status, headers) {
                    item._onCancel(response, status, headers);
                    this.onCancelItem(item, response, status, headers);
                };
                FileUploader.prototype._onCompleteItem = function _onCompleteItem(item, response, status, headers) {
                    item._onComplete(response, status, headers);
                    this.onCompleteItem(item, response, status, headers);
                    var nextItem = this.getReadyItems()[0];
                    this.isUploading = false;
                    if (isDefined(nextItem)) {
                        nextItem.upload();
                        return;
                    }
                    this.onCompleteAll();
                    this.progress = this._getTotalProgress();
                    this._render();
                };
                FileUploader.prototype._onTimeoutItem = function _onTimeoutItem(item) {
                    item._onTimeout();
                    this.onTimeoutItem(item);
                };
                FileUploader.isFile = function isFile(value) {
                    return File && value instanceof File;
                };
                FileUploader.isFileLikeObject = function isFileLikeObject(value) {
                    return value instanceof FileLikeObject;
                };
                FileUploader.isArrayLikeObject = function isArrayLikeObject(value) {
                    return isObject(value) && "length" in value;
                };
                FileUploader.inherit = function inherit(target, source) {
                    target.prototype = Object.create(source.prototype);
                    target.prototype.constructor = target;
                    target.super_ = source;
                };
                return FileUploader;
            }();
            FileUploader.prototype.isHTML5 = !!(File && FormData);
            FileUploader.isHTML5 = FileUploader.prototype.isHTML5;
            return FileUploader;
        }
        __identity.$inject = [ "fileUploaderOptions", "$rootScope", "$http", "$window", "$timeout", "FileLikeObject", "FileItem", "Pipeline" ];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = __identity;
        var _config = __webpack_require__(1);
        var _config2 = _interopRequireDefault(_config);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var _angular = angular, copy = _angular.copy, isElement = _angular.isElement, isString = _angular.isString;
        function __identity() {
            return function() {
                function FileLikeObject(fileOrInput) {
                    _classCallCheck(this, FileLikeObject);
                    var isInput = isElement(fileOrInput);
                    var fakePathOrObject = isInput ? fileOrInput.value : fileOrInput;
                    var postfix = isString(fakePathOrObject) ? "FakePath" : "Object";
                    var method = "_createFrom" + postfix;
                    this[method](fakePathOrObject, fileOrInput);
                }
                FileLikeObject.prototype._createFromFakePath = function _createFromFakePath(path, input) {
                    this.lastModifiedDate = null;
                    this.size = null;
                    this.type = "like/" + path.slice(path.lastIndexOf(".") + 1).toLowerCase();
                    this.name = path.slice(path.lastIndexOf("/") + path.lastIndexOf("\\") + 2);
                    this.input = input;
                };
                FileLikeObject.prototype._createFromObject = function _createFromObject(object) {
                    this.lastModifiedDate = copy(object.lastModifiedDate);
                    this.size = object.size;
                    this.type = object.type;
                    this.name = object.name;
                    this.input = object.input;
                };
                return FileLikeObject;
            }();
        }
    }, function(module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = __identity;
        var _config = __webpack_require__(1);
        var _config2 = _interopRequireDefault(_config);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var _angular = angular, copy = _angular.copy, extend = _angular.extend, element = _angular.element, isElement = _angular.isElement;
        function __identity($compile, FileLikeObject) {
            return function() {
                function FileItem(uploader, some, options) {
                    _classCallCheck(this, FileItem);
                    var isInput = !!some.input;
                    var input = isInput ? element(some.input) : null;
                    var file = !isInput ? some : null;
                    extend(this, {
                        url: uploader.url,
                        alias: uploader.alias,
                        headers: copy(uploader.headers),
                        formData: copy(uploader.formData),
                        removeAfterUpload: uploader.removeAfterUpload,
                        withCredentials: uploader.withCredentials,
                        disableMultipart: uploader.disableMultipart,
                        method: uploader.method,
                        timeout: uploader.timeout
                    }, options, {
                        uploader: uploader,
                        file: new FileLikeObject(some),
                        isReady: false,
                        isUploading: false,
                        isUploaded: false,
                        isSuccess: false,
                        isCancel: false,
                        isError: false,
                        progress: 0,
                        index: null,
                        _file: file,
                        _input: input
                    });
                    if (input) this._replaceNode(input);
                }
                FileItem.prototype.upload = function upload() {
                    try {
                        this.uploader.uploadItem(this);
                    } catch (e) {
                        var message = e.name + ":" + e.message;
                        this.uploader._onCompleteItem(this, message, e.code, []);
                        this.uploader._onErrorItem(this, message, e.code, []);
                    }
                };
                FileItem.prototype.cancel = function cancel() {
                    this.uploader.cancelItem(this);
                };
                FileItem.prototype.remove = function remove() {
                    this.uploader.removeFromQueue(this);
                };
                FileItem.prototype.onBeforeUpload = function onBeforeUpload() {};
                FileItem.prototype.onProgress = function onProgress(progress) {};
                FileItem.prototype.onSuccess = function onSuccess(response, status, headers) {};
                FileItem.prototype.onError = function onError(response, status, headers) {};
                FileItem.prototype.onCancel = function onCancel(response, status, headers) {};
                FileItem.prototype.onComplete = function onComplete(response, status, headers) {};
                FileItem.prototype.onTimeout = function onTimeout() {};
                FileItem.prototype._onBeforeUpload = function _onBeforeUpload() {
                    this.isReady = true;
                    this.isUploading = false;
                    this.isUploaded = false;
                    this.isSuccess = false;
                    this.isCancel = false;
                    this.isError = false;
                    this.progress = 0;
                    this.onBeforeUpload();
                };
                FileItem.prototype._onProgress = function _onProgress(progress) {
                    this.progress = progress;
                    this.onProgress(progress);
                };
                FileItem.prototype._onSuccess = function _onSuccess(response, status, headers) {
                    this.isReady = false;
                    this.isUploading = false;
                    this.isUploaded = true;
                    this.isSuccess = true;
                    this.isCancel = false;
                    this.isError = false;
                    this.progress = 100;
                    this.index = null;
                    this.onSuccess(response, status, headers);
                };
                FileItem.prototype._onError = function _onError(response, status, headers) {
                    this.isReady = false;
                    this.isUploading = false;
                    this.isUploaded = true;
                    this.isSuccess = false;
                    this.isCancel = false;
                    this.isError = true;
                    this.progress = 0;
                    this.index = null;
                    this.onError(response, status, headers);
                };
                FileItem.prototype._onCancel = function _onCancel(response, status, headers) {
                    this.isReady = false;
                    this.isUploading = false;
                    this.isUploaded = false;
                    this.isSuccess = false;
                    this.isCancel = true;
                    this.isError = false;
                    this.progress = 0;
                    this.index = null;
                    this.onCancel(response, status, headers);
                };
                FileItem.prototype._onComplete = function _onComplete(response, status, headers) {
                    this.onComplete(response, status, headers);
                    if (this.removeAfterUpload) this.remove();
                };
                FileItem.prototype._onTimeout = function _onTimeout() {
                    this.isReady = false;
                    this.isUploading = false;
                    this.isUploaded = false;
                    this.isSuccess = false;
                    this.isCancel = false;
                    this.isError = true;
                    this.progress = 0;
                    this.index = null;
                    this.onTimeout();
                };
                FileItem.prototype._destroy = function _destroy() {
                    if (this._input) this._input.remove();
                    if (this._form) this._form.remove();
                    delete this._form;
                    delete this._input;
                };
                FileItem.prototype._prepareToUploading = function _prepareToUploading() {
                    this.index = this.index || ++this.uploader._nextIndex;
                    this.isReady = true;
                };
                FileItem.prototype._replaceNode = function _replaceNode(input) {
                    var clone = $compile(input.clone())(input.scope());
                    clone.prop("value", null);
                    input.css("display", "none");
                    input.after(clone);
                };
                return FileItem;
            }();
        }
        __identity.$inject = [ "$compile", "FileLikeObject" ];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = __identity;
        var _config = __webpack_require__(1);
        var _config2 = _interopRequireDefault(_config);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var _angular = angular, extend = _angular.extend;
        function __identity() {
            var FileDirective = function() {
                function FileDirective(options) {
                    _classCallCheck(this, FileDirective);
                    extend(this, options);
                    this.uploader._directives[this.prop].push(this);
                    this._saveLinks();
                    this.bind();
                }
                FileDirective.prototype.bind = function bind() {
                    for (var key in this.events) {
                        var prop = this.events[key];
                        this.element.bind(key, this[prop]);
                    }
                };
                FileDirective.prototype.unbind = function unbind() {
                    for (var key in this.events) {
                        this.element.unbind(key, this.events[key]);
                    }
                };
                FileDirective.prototype.destroy = function destroy() {
                    var index = this.uploader._directives[this.prop].indexOf(this);
                    this.uploader._directives[this.prop].splice(index, 1);
                    this.unbind();
                };
                FileDirective.prototype._saveLinks = function _saveLinks() {
                    for (var key in this.events) {
                        var prop = this.events[key];
                        this[prop] = this[prop].bind(this);
                    }
                };
                return FileDirective;
            }();
            FileDirective.prototype.events = {};
            return FileDirective;
        }
    }, function(module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = __identity;
        var _config = __webpack_require__(1);
        var _config2 = _interopRequireDefault(_config);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _angular = angular, extend = _angular.extend;
        function __identity($compile, FileDirective) {
            return function(_FileDirective) {
                _inherits(FileSelect, _FileDirective);
                function FileSelect(options) {
                    _classCallCheck(this, FileSelect);
                    var extendedOptions = extend(options, {
                        events: {
                            $destroy: "destroy",
                            change: "onChange"
                        },
                        prop: "select"
                    });
                    var _this = _possibleConstructorReturn(this, _FileDirective.call(this, extendedOptions));
                    if (!_this.uploader.isHTML5) {
                        _this.element.removeAttr("multiple");
                    }
                    _this.element.prop("value", null);
                    return _this;
                }
                FileSelect.prototype.getOptions = function getOptions() {};
                FileSelect.prototype.getFilters = function getFilters() {};
                FileSelect.prototype.isEmptyAfterSelection = function isEmptyAfterSelection() {
                    return !!this.element.attr("multiple");
                };
                FileSelect.prototype.onChange = function onChange() {
                    var files = this.uploader.isHTML5 ? this.element[0].files : this.element[0];
                    var options = this.getOptions();
                    var filters = this.getFilters();
                    if (!this.uploader.isHTML5) this.destroy();
                    this.uploader.addToQueue(files, options, filters);
                    if (this.isEmptyAfterSelection()) {
                        this.element.prop("value", null);
                        this.element.replaceWith($compile(this.element.clone())(this.scope));
                    }
                };
                return FileSelect;
            }(FileDirective);
        }
        __identity.$inject = [ "$compile", "FileDirective" ];
    }, function(module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = __identity;
        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i];
                }
                return arr2;
            } else {
                return Array.from(arr);
            }
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        var _angular = angular, bind = _angular.bind, isUndefined = _angular.isUndefined;
        function __identity($q) {
            return function() {
                function Pipeline() {
                    var pipes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                    _classCallCheck(this, Pipeline);
                    this.pipes = pipes;
                }
                Pipeline.prototype.next = function next(args) {
                    var pipe = this.pipes.shift();
                    if (isUndefined(pipe)) {
                        this.onSuccessful.apply(this, _toConsumableArray(args));
                        return;
                    }
                    var err = new Error("The filter has not passed");
                    err.pipe = pipe;
                    err.args = args;
                    if (pipe.isAsync) {
                        var deferred = $q.defer();
                        var onFulfilled = bind(this, this.next, args);
                        var onRejected = bind(this, this.onThrown, err);
                        deferred.promise.then(onFulfilled, onRejected);
                        pipe.apply(undefined, _toConsumableArray(args).concat([ deferred ]));
                    } else {
                        var isDone = Boolean(pipe.apply(undefined, _toConsumableArray(args)));
                        if (isDone) {
                            this.next(args);
                        } else {
                            this.onThrown(err);
                        }
                    }
                };
                Pipeline.prototype.exec = function exec() {
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }
                    this.next(args);
                };
                Pipeline.prototype.onThrown = function onThrown(err) {};
                Pipeline.prototype.onSuccessful = function onSuccessful() {};
                return Pipeline;
            }();
        }
        __identity.$inject = [ "$q" ];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = __identity;
        var _config = __webpack_require__(1);
        var _config2 = _interopRequireDefault(_config);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _angular = angular, extend = _angular.extend, forEach = _angular.forEach;
        function __identity(FileDirective) {
            return function(_FileDirective) {
                _inherits(FileDrop, _FileDirective);
                function FileDrop(options) {
                    _classCallCheck(this, FileDrop);
                    var extendedOptions = extend(options, {
                        events: {
                            $destroy: "destroy",
                            drop: "onDrop",
                            dragover: "onDragOver",
                            dragleave: "onDragLeave"
                        },
                        prop: "drop"
                    });
                    return _possibleConstructorReturn(this, _FileDirective.call(this, extendedOptions));
                }
                FileDrop.prototype.getOptions = function getOptions() {};
                FileDrop.prototype.getFilters = function getFilters() {};
                FileDrop.prototype.onDrop = function onDrop(event) {
                    var transfer = this._getTransfer(event);
                    if (!transfer) return;
                    var options = this.getOptions();
                    var filters = this.getFilters();
                    this._preventAndStop(event);
                    forEach(this.uploader._directives.over, this._removeOverClass, this);
                    this.uploader.addToQueue(transfer.files, options, filters);
                };
                FileDrop.prototype.onDragOver = function onDragOver(event) {
                    var transfer = this._getTransfer(event);
                    if (!this._haveFiles(transfer.types)) return;
                    transfer.dropEffect = "copy";
                    this._preventAndStop(event);
                    forEach(this.uploader._directives.over, this._addOverClass, this);
                };
                FileDrop.prototype.onDragLeave = function onDragLeave(event) {
                    if (event.currentTarget === this.element[0]) return;
                    this._preventAndStop(event);
                    forEach(this.uploader._directives.over, this._removeOverClass, this);
                };
                FileDrop.prototype._getTransfer = function _getTransfer(event) {
                    return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer;
                };
                FileDrop.prototype._preventAndStop = function _preventAndStop(event) {
                    event.preventDefault();
                    event.stopPropagation();
                };
                FileDrop.prototype._haveFiles = function _haveFiles(types) {
                    if (!types) return false;
                    if (types.indexOf) {
                        return types.indexOf("Files") !== -1;
                    } else if (types.contains) {
                        return types.contains("Files");
                    } else {
                        return false;
                    }
                };
                FileDrop.prototype._addOverClass = function _addOverClass(item) {
                    item.addOverClass();
                };
                FileDrop.prototype._removeOverClass = function _removeOverClass(item) {
                    item.removeOverClass();
                };
                return FileDrop;
            }(FileDirective);
        }
        __identity.$inject = [ "FileDirective" ];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = __identity;
        var _config = __webpack_require__(1);
        var _config2 = _interopRequireDefault(_config);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var _angular = angular, extend = _angular.extend;
        function __identity(FileDirective) {
            return function(_FileDirective) {
                _inherits(FileOver, _FileDirective);
                function FileOver(options) {
                    _classCallCheck(this, FileOver);
                    var extendedOptions = extend(options, {
                        events: {
                            $destroy: "destroy"
                        },
                        prop: "over",
                        overClass: "nv-file-over"
                    });
                    return _possibleConstructorReturn(this, _FileDirective.call(this, extendedOptions));
                }
                FileOver.prototype.addOverClass = function addOverClass() {
                    this.element.addClass(this.getOverClass());
                };
                FileOver.prototype.removeOverClass = function removeOverClass() {
                    this.element.removeClass(this.getOverClass());
                };
                FileOver.prototype.getOverClass = function getOverClass() {
                    return this.overClass;
                };
                return FileOver;
            }(FileDirective);
        }
        __identity.$inject = [ "FileDirective" ];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = __identity;
        var _config = __webpack_require__(1);
        var _config2 = _interopRequireDefault(_config);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function __identity($parse, FileUploader, FileSelect) {
            return {
                link: function link(scope, element, attributes) {
                    var uploader = scope.$eval(attributes.uploader);
                    if (!(uploader instanceof FileUploader)) {
                        throw new TypeError('"Uploader" must be an instance of FileUploader');
                    }
                    var object = new FileSelect({
                        uploader: uploader,
                        element: element,
                        scope: scope
                    });
                    object.getOptions = $parse(attributes.options).bind(object, scope);
                    object.getFilters = function() {
                        return attributes.filters;
                    };
                }
            };
        }
        __identity.$inject = [ "$parse", "FileUploader", "FileSelect" ];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = __identity;
        var _config = __webpack_require__(1);
        var _config2 = _interopRequireDefault(_config);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function __identity($parse, FileUploader, FileDrop) {
            return {
                link: function link(scope, element, attributes) {
                    var uploader = scope.$eval(attributes.uploader);
                    if (!(uploader instanceof FileUploader)) {
                        throw new TypeError('"Uploader" must be an instance of FileUploader');
                    }
                    if (!uploader.isHTML5) return;
                    var object = new FileDrop({
                        uploader: uploader,
                        element: element
                    });
                    object.getOptions = $parse(attributes.options).bind(object, scope);
                    object.getFilters = function() {
                        return attributes.filters;
                    };
                }
            };
        }
        __identity.$inject = [ "$parse", "FileUploader", "FileDrop" ];
    }, function(module, exports, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = __identity;
        var _config = __webpack_require__(1);
        var _config2 = _interopRequireDefault(_config);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function __identity(FileUploader, FileOver) {
            return {
                link: function link(scope, element, attributes) {
                    var uploader = scope.$eval(attributes.uploader);
                    if (!(uploader instanceof FileUploader)) {
                        throw new TypeError('"Uploader" must be an instance of FileUploader');
                    }
                    var object = new FileOver({
                        uploader: uploader,
                        element: element
                    });
                    object.getOverClass = function() {
                        return attributes.overClass || object.overClass;
                    };
                }
            };
        }
        __identity.$inject = [ "FileUploader", "FileOver" ];
    } ]);
});

!function() {
    function a(a, b) {
        window.XMLHttpRequest.prototype[a] = b(window.XMLHttpRequest.prototype[a]);
    }
    function b(a, b, c) {
        try {
            Object.defineProperty(a, b, {
                get: c
            });
        } catch (d) {}
    }
    if (window.FileAPI || (window.FileAPI = {}), !window.XMLHttpRequest) throw "AJAX is not supported. XMLHttpRequest is not defined.";
    if (FileAPI.shouldLoad = !window.FormData || FileAPI.forceLoad, FileAPI.shouldLoad) {
        var c = function(a) {
            if (!a.__listeners) {
                a.upload || (a.upload = {}), a.__listeners = [];
                var b = a.upload.addEventListener;
                a.upload.addEventListener = function(c, d) {
                    a.__listeners[c] = d, b && b.apply(this, arguments);
                };
            }
        };
        a("open", function(a) {
            return function(b, d, e) {
                c(this), this.__url = d;
                try {
                    a.apply(this, [ b, d, e ]);
                } catch (f) {
                    f.message.indexOf("Access is denied") > -1 && (this.__origError = f, a.apply(this, [ b, "_fix_for_ie_crossdomain__", e ]));
                }
            };
        }), a("getResponseHeader", function(a) {
            return function(b) {
                return this.__fileApiXHR && this.__fileApiXHR.getResponseHeader ? this.__fileApiXHR.getResponseHeader(b) : null == a ? null : a.apply(this, [ b ]);
            };
        }), a("getAllResponseHeaders", function(a) {
            return function() {
                return this.__fileApiXHR && this.__fileApiXHR.getAllResponseHeaders ? this.__fileApiXHR.getAllResponseHeaders() : null == a ? null : a.apply(this);
            };
        }), a("abort", function(a) {
            return function() {
                return this.__fileApiXHR && this.__fileApiXHR.abort ? this.__fileApiXHR.abort() : null == a ? null : a.apply(this);
            };
        }), a("setRequestHeader", function(a) {
            return function(b, d) {
                if ("__setXHR_" === b) {
                    c(this);
                    var e = d(this);
                    e instanceof Function && e(this);
                } else this.__requestHeaders = this.__requestHeaders || {}, this.__requestHeaders[b] = d, 
                a.apply(this, arguments);
            };
        }), a("send", function(a) {
            return function() {
                var c = this;
                if (arguments[0] && arguments[0].__isFileAPIShim) {
                    var d = arguments[0], e = {
                        url: c.__url,
                        jsonp: !1,
                        cache: !0,
                        complete: function(a, d) {
                            a && angular.isString(a) && -1 !== a.indexOf("#2174") && (a = null), c.__completed = !0, 
                            !a && c.__listeners.load && c.__listeners.load({
                                type: "load",
                                loaded: c.__loaded,
                                total: c.__total,
                                target: c,
                                lengthComputable: !0
                            }), !a && c.__listeners.loadend && c.__listeners.loadend({
                                type: "loadend",
                                loaded: c.__loaded,
                                total: c.__total,
                                target: c,
                                lengthComputable: !0
                            }), "abort" === a && c.__listeners.abort && c.__listeners.abort({
                                type: "abort",
                                loaded: c.__loaded,
                                total: c.__total,
                                target: c,
                                lengthComputable: !0
                            }), void 0 !== d.status && b(c, "status", function() {
                                return 0 === d.status && a && "abort" !== a ? 500 : d.status;
                            }), void 0 !== d.statusText && b(c, "statusText", function() {
                                return d.statusText;
                            }), b(c, "readyState", function() {
                                return 4;
                            }), void 0 !== d.response && b(c, "response", function() {
                                return d.response;
                            });
                            var e = d.responseText || (a && 0 === d.status && "abort" !== a ? a : void 0);
                            b(c, "responseText", function() {
                                return e;
                            }), b(c, "response", function() {
                                return e;
                            }), a && b(c, "err", function() {
                                return a;
                            }), c.__fileApiXHR = d, c.onreadystatechange && c.onreadystatechange(), c.onload && c.onload();
                        },
                        progress: function(a) {
                            if (a.target = c, c.__listeners.progress && c.__listeners.progress(a), c.__total = a.total, 
                            c.__loaded = a.loaded, a.total === a.loaded) {
                                var b = this;
                                setTimeout(function() {
                                    c.__completed || (c.getAllResponseHeaders = function() {}, b.complete(null, {
                                        status: 204,
                                        statusText: "No Content"
                                    }));
                                }, FileAPI.noContentTimeout || 1e4);
                            }
                        },
                        headers: c.__requestHeaders
                    };
                    e.data = {}, e.files = {};
                    for (var f = 0; f < d.data.length; f++) {
                        var g = d.data[f];
                        null != g.val && null != g.val.name && null != g.val.size && null != g.val.type ? e.files[g.key] = g.val : e.data[g.key] = g.val;
                    }
                    setTimeout(function() {
                        if (!FileAPI.hasFlash) throw 'Adode Flash Player need to be installed. To check ahead use "FileAPI.hasFlash"';
                        c.__fileApiXHR = FileAPI.upload(e);
                    }, 1);
                } else {
                    if (this.__origError) throw this.__origError;
                    a.apply(c, arguments);
                }
            };
        }), window.XMLHttpRequest.__isFileAPIShim = !0, window.FormData = FormData = function() {
            return {
                append: function(a, b, c) {
                    b.__isFileAPIBlobShim && (b = b.data[0]), this.data.push({
                        key: a,
                        val: b,
                        name: c
                    });
                },
                data: [],
                __isFileAPIShim: !0
            };
        }, window.Blob = Blob = function(a) {
            return {
                data: a,
                __isFileAPIBlobShim: !0
            };
        };
    }
}(), function() {
    function a(a) {
        return "input" === a[0].tagName.toLowerCase() && a.attr("type") && "file" === a.attr("type").toLowerCase();
    }
    function b() {
        try {
            var a = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
            if (a) return !0;
        } catch (b) {
            if (void 0 !== navigator.mimeTypes["application/x-shockwave-flash"]) return !0;
        }
        return !1;
    }
    function c(a) {
        var b = 0, c = 0;
        if (window.jQuery) return jQuery(a).offset();
        if (a.offsetParent) do b += a.offsetLeft - a.scrollLeft, c += a.offsetTop - a.scrollTop, 
        a = a.offsetParent; while (a);
        return {
            left: b,
            top: c
        };
    }
    if (FileAPI.shouldLoad) {
        if (FileAPI.hasFlash = b(), FileAPI.forceLoad && (FileAPI.html5 = !1), !FileAPI.upload) {
            var d, e, f, g, h, i = document.createElement("script"), j = document.getElementsByTagName("script");
            if (window.FileAPI.jsUrl) d = window.FileAPI.jsUrl; else if (window.FileAPI.jsPath) e = window.FileAPI.jsPath; else for (f = 0; f < j.length; f++) if (h = j[f].src, 
            g = h.search(/\/ng\-file\-upload[\-a-zA-z0-9\.]*\.js/), g > -1) {
                e = h.substring(0, g + 1);
                break;
            }
            null == FileAPI.staticPath && (FileAPI.staticPath = e), i.setAttribute("src", d || e + "FileAPI.min.js"), 
            document.getElementsByTagName("head")[0].appendChild(i);
        }
        FileAPI.ngfFixIE = function(d, e, f) {
            if (!b()) throw 'Adode Flash Player need to be installed. To check ahead use "FileAPI.hasFlash"';
            var g = function() {
                var b = e.parent();
                d.attr("disabled") ? b && b.removeClass("js-fileapi-wrapper") : (e.attr("__ngf_flash_") || (e.unbind("change"), 
                e.unbind("click"), e.bind("change", function(a) {
                    h.apply(this, [ a ]), f.apply(this, [ a ]);
                }), e.attr("__ngf_flash_", "true")), b.addClass("js-fileapi-wrapper"), a(d) || (b.css("position", "absolute").css("top", c(d[0]).top + "px").css("left", c(d[0]).left + "px").css("width", d[0].offsetWidth + "px").css("height", d[0].offsetHeight + "px").css("filter", "alpha(opacity=0)").css("display", d.css("display")).css("overflow", "hidden").css("z-index", "900000").css("visibility", "visible"), 
                e.css("width", d[0].offsetWidth + "px").css("height", d[0].offsetHeight + "px").css("position", "absolute").css("top", "0px").css("left", "0px")));
            };
            d.bind("mouseenter", g);
            var h = function(a) {
                for (var b = FileAPI.getFiles(a), c = 0; c < b.length; c++) void 0 === b[c].size && (b[c].size = 0), 
                void 0 === b[c].name && (b[c].name = "file"), void 0 === b[c].type && (b[c].type = "undefined");
                a.target || (a.target = {}), a.target.files = b, a.target.files !== b && (a.__files_ = b), 
                (a.__files_ || a.target.files).item = function(b) {
                    return (a.__files_ || a.target.files)[b] || null;
                };
            };
        }, FileAPI.disableFileInput = function(a, b) {
            b ? a.removeClass("js-fileapi-wrapper") : a.addClass("js-fileapi-wrapper");
        };
    }
}(), window.FileReader || (window.FileReader = function() {
    var a = this, b = !1;
    this.listeners = {}, this.addEventListener = function(b, c) {
        a.listeners[b] = a.listeners[b] || [], a.listeners[b].push(c);
    }, this.removeEventListener = function(b, c) {
        a.listeners[b] && a.listeners[b].splice(a.listeners[b].indexOf(c), 1);
    }, this.dispatchEvent = function(b) {
        var c = a.listeners[b.type];
        if (c) for (var d = 0; d < c.length; d++) c[d].call(a, b);
    }, this.onabort = this.onerror = this.onload = this.onloadstart = this.onloadend = this.onprogress = null;
    var c = function(b, c) {
        var d = {
            type: b,
            target: a,
            loaded: c.loaded,
            total: c.total,
            error: c.error
        };
        return null != c.result && (d.target.result = c.result), d;
    }, d = function(d) {
        b || (b = !0, a.onloadstart && a.onloadstart(c("loadstart", d)));
        var e;
        "load" === d.type ? (a.onloadend && a.onloadend(c("loadend", d)), e = c("load", d), 
        a.onload && a.onload(e), a.dispatchEvent(e)) : "progress" === d.type ? (e = c("progress", d), 
        a.onprogress && a.onprogress(e), a.dispatchEvent(e)) : (e = c("error", d), a.onerror && a.onerror(e), 
        a.dispatchEvent(e));
    };
    this.readAsDataURL = function(a) {
        FileAPI.readAsDataURL(a, d);
    }, this.readAsText = function(a) {
        FileAPI.readAsText(a, d);
    };
});

!window.XMLHttpRequest || window.FileAPI && FileAPI.shouldLoad || (window.XMLHttpRequest.prototype.setRequestHeader = function(a) {
    return function(b, c) {
        if ("__setXHR_" === b) {
            var d = c(this);
            d instanceof Function && d(this);
        } else a.apply(this, arguments);
    };
}(window.XMLHttpRequest.prototype.setRequestHeader));

var ngFileUpload = angular.module("ngFileUpload", []);

ngFileUpload.version = "12.2.13", ngFileUpload.service("UploadBase", [ "$http", "$q", "$timeout", function(a, b, c) {
    function d(d) {
        function e(a) {
            j.notify && j.notify(a), k.progressFunc && c(function() {
                k.progressFunc(a);
            });
        }
        function h(a) {
            return null != d._start && g ? {
                loaded: a.loaded + d._start,
                total: d._file && d._file.size || a.total,
                type: a.type,
                config: d,
                lengthComputable: !0,
                target: a.target
            } : a;
        }
        function i() {
            a(d).then(function(a) {
                if (g && d._chunkSize && !d._finished && d._file) {
                    var b = d._file && d._file.size || 0;
                    e({
                        loaded: Math.min(d._end, b),
                        total: b,
                        config: d,
                        type: "progress"
                    }), f.upload(d, !0);
                } else d._finished && delete d._finished, j.resolve(a);
            }, function(a) {
                j.reject(a);
            }, function(a) {
                j.notify(a);
            });
        }
        d.method = d.method || "POST", d.headers = d.headers || {};
        var j = d._deferred = d._deferred || b.defer(), k = j.promise;
        return d.disableProgress || (d.headers.__setXHR_ = function() {
            return function(a) {
                a && a.upload && a.upload.addEventListener && (d.__XHR = a, d.xhrFn && d.xhrFn(a), 
                a.upload.addEventListener("progress", function(a) {
                    a.config = d, e(h(a));
                }, !1), a.upload.addEventListener("load", function(a) {
                    a.lengthComputable && (a.config = d, e(h(a)));
                }, !1));
            };
        }), g ? d._chunkSize && d._end && !d._finished ? (d._start = d._end, d._end += d._chunkSize, 
        i()) : d.resumeSizeUrl ? a.get(d.resumeSizeUrl).then(function(a) {
            d._start = d.resumeSizeResponseReader ? d.resumeSizeResponseReader(a.data) : parseInt((null == a.data.size ? a.data : a.data.size).toString()), 
            d._chunkSize && (d._end = d._start + d._chunkSize), i();
        }, function(a) {
            throw a;
        }) : d.resumeSize ? d.resumeSize().then(function(a) {
            d._start = a, d._chunkSize && (d._end = d._start + d._chunkSize), i();
        }, function(a) {
            throw a;
        }) : (d._chunkSize && (d._start = 0, d._end = d._start + d._chunkSize), i()) : i(), 
        k.success = function(a) {
            return k.then(function(b) {
                a(b.data, b.status, b.headers, d);
            }), k;
        }, k.error = function(a) {
            return k.then(null, function(b) {
                a(b.data, b.status, b.headers, d);
            }), k;
        }, k.progress = function(a) {
            return k.progressFunc = a, k.then(null, null, function(b) {
                a(b);
            }), k;
        }, k.abort = k.pause = function() {
            return d.__XHR && c(function() {
                d.__XHR.abort();
            }), k;
        }, k.xhr = function(a) {
            return d.xhrFn = function(b) {
                return function() {
                    b && b.apply(k, arguments), a.apply(k, arguments);
                };
            }(d.xhrFn), k;
        }, f.promisesCount++, k["finally"] && k["finally"] instanceof Function && k["finally"](function() {
            f.promisesCount--;
        }), k;
    }
    function e(a) {
        var b = {};
        for (var c in a) a.hasOwnProperty(c) && (b[c] = a[c]);
        return b;
    }
    var f = this;
    f.promisesCount = 0, this.isResumeSupported = function() {
        return window.Blob && window.Blob.prototype.slice;
    };
    var g = this.isResumeSupported();
    this.isUploadInProgress = function() {
        return f.promisesCount > 0;
    }, this.rename = function(a, b) {
        return a.ngfName = b, a;
    }, this.jsonBlob = function(a) {
        null == a || angular.isString(a) || (a = JSON.stringify(a));
        var b = new window.Blob([ a ], {
            type: "application/json"
        });
        return b._ngfBlob = !0, b;
    }, this.json = function(a) {
        return angular.toJson(a);
    }, this.isFile = function(a) {
        return null != a && (a instanceof window.Blob || a.flashId && a.name && a.size);
    }, this.upload = function(a, b) {
        function c(b, c) {
            if (b._ngfBlob) return b;
            if (a._file = a._file || b, null != a._start && g) {
                a._end && a._end >= b.size && (a._finished = !0, a._end = b.size);
                var d = b.slice(a._start, a._end || b.size);
                return d.name = b.name, d.ngfName = b.ngfName, a._chunkSize && (c.append("_chunkSize", a._chunkSize), 
                c.append("_currentChunkSize", a._end - a._start), c.append("_chunkNumber", Math.floor(a._start / a._chunkSize)), 
                c.append("_totalSize", a._file.size)), d;
            }
            return b;
        }
        function h(b, d, e) {
            if (void 0 !== d) if (angular.isDate(d) && (d = d.toISOString()), angular.isString(d)) b.append(e, d); else if (f.isFile(d)) {
                var g = c(d, b), i = e.split(",");
                i[1] && (g.ngfName = i[1].replace(/^\s+|\s+$/g, ""), e = i[0]), a._fileKey = a._fileKey || e, 
                b.append(e, g, g.ngfName || g.name);
            } else if (angular.isObject(d)) {
                if (d.$$ngfCircularDetection) throw "ngFileUpload: Circular reference in config.data. Make sure specified data for Upload.upload() has no circular reference: " + e;
                d.$$ngfCircularDetection = !0;
                try {
                    for (var j in d) if (d.hasOwnProperty(j) && "$$ngfCircularDetection" !== j) {
                        var k = null == a.objectKey ? "[i]" : a.objectKey;
                        d.length && parseInt(j) > -1 && (k = null == a.arrayKey ? k : a.arrayKey), h(b, d[j], e + k.replace(/[ik]/g, j));
                    }
                } finally {
                    delete d.$$ngfCircularDetection;
                }
            } else b.append(e, d);
        }
        function i() {
            a._chunkSize = f.translateScalars(a.resumeChunkSize), a._chunkSize = a._chunkSize ? parseInt(a._chunkSize.toString()) : null, 
            a.headers = a.headers || {}, a.headers["Content-Type"] = void 0, a.transformRequest = a.transformRequest ? angular.isArray(a.transformRequest) ? a.transformRequest : [ a.transformRequest ] : [], 
            a.transformRequest.push(function(b) {
                var c, d = new window.FormData();
                b = b || a.fields || {}, a.file && (b.file = a.file);
                for (c in b) if (b.hasOwnProperty(c)) {
                    var e = b[c];
                    a.formDataAppender ? a.formDataAppender(d, c, e) : h(d, e, c);
                }
                return d;
            });
        }
        return b || (a = e(a)), a._isDigested || (a._isDigested = !0, i()), d(a);
    }, this.http = function(b) {
        return b = e(b), b.transformRequest = b.transformRequest || function(b) {
            return window.ArrayBuffer && b instanceof window.ArrayBuffer || b instanceof window.Blob ? b : a.defaults.transformRequest[0].apply(this, arguments);
        }, b._chunkSize = f.translateScalars(b.resumeChunkSize), b._chunkSize = b._chunkSize ? parseInt(b._chunkSize.toString()) : null, 
        d(b);
    }, this.translateScalars = function(a) {
        if (angular.isString(a)) {
            if (a.search(/kb/i) === a.length - 2) return parseFloat(1024 * a.substring(0, a.length - 2));
            if (a.search(/mb/i) === a.length - 2) return parseFloat(1048576 * a.substring(0, a.length - 2));
            if (a.search(/gb/i) === a.length - 2) return parseFloat(1073741824 * a.substring(0, a.length - 2));
            if (a.search(/b/i) === a.length - 1) return parseFloat(a.substring(0, a.length - 1));
            if (a.search(/s/i) === a.length - 1) return parseFloat(a.substring(0, a.length - 1));
            if (a.search(/m/i) === a.length - 1) return parseFloat(60 * a.substring(0, a.length - 1));
            if (a.search(/h/i) === a.length - 1) return parseFloat(3600 * a.substring(0, a.length - 1));
        }
        return a;
    }, this.urlToBlob = function(c) {
        var d = b.defer();
        return a({
            url: c,
            method: "get",
            responseType: "arraybuffer"
        }).then(function(a) {
            var b = new Uint8Array(a.data), e = a.headers("content-type") || "image/WebP", f = new window.Blob([ b ], {
                type: e
            }), g = c.match(/.*\/(.+?)(\?.*)?$/);
            g.length > 1 && (f.name = g[1]), d.resolve(f);
        }, function(a) {
            d.reject(a);
        }), d.promise;
    }, this.setDefaults = function(a) {
        this.defaults = a || {};
    }, this.defaults = {}, this.version = ngFileUpload.version;
} ]), ngFileUpload.service("Upload", [ "$parse", "$timeout", "$compile", "$q", "UploadExif", function(a, b, c, d, e) {
    function f(a, b, c) {
        var e = [ i.emptyPromise() ];
        return angular.forEach(a, function(d, f) {
            0 === d.type.indexOf("image/jpeg") && i.attrGetter("ngfFixOrientation", b, c, {
                $file: d
            }) && e.push(i.happyPromise(i.applyExifRotation(d), d).then(function(b) {
                a.splice(f, 1, b);
            }));
        }), d.all(e);
    }
    function g(a, b, c, e) {
        var f = i.attrGetter("ngfResize", b, c);
        if (!f || !i.isResizeSupported() || !a.length) return i.emptyPromise();
        if (f instanceof Function) {
            var g = d.defer();
            return f(a).then(function(d) {
                h(d, a, b, c, e).then(function(a) {
                    g.resolve(a);
                }, function(a) {
                    g.reject(a);
                });
            }, function(a) {
                g.reject(a);
            });
        }
        return h(f, a, b, c, e);
    }
    function h(a, b, c, e, f) {
        function g(d, g) {
            if (0 === d.type.indexOf("image")) {
                if (a.pattern && !i.validatePattern(d, a.pattern)) return;
                a.resizeIf = function(a, b) {
                    return i.attrGetter("ngfResizeIf", c, e, {
                        $width: a,
                        $height: b,
                        $file: d
                    });
                };
                var j = i.resize(d, a);
                h.push(j), j.then(function(a) {
                    b.splice(g, 1, a);
                }, function(a) {
                    d.$error = "resize", (d.$errorMessages = d.$errorMessages || {}).resize = !0, d.$errorParam = (a ? (a.message ? a.message : a) + ": " : "") + (d && d.name), 
                    f.$ngfValidations.push({
                        name: "resize",
                        valid: !1
                    }), i.applyModelValidation(f, b);
                });
            }
        }
        for (var h = [ i.emptyPromise() ], j = 0; j < b.length; j++) g(b[j], j);
        return d.all(h);
    }
    var i = e;
    return i.getAttrWithDefaults = function(a, b) {
        if (null != a[b]) return a[b];
        var c = i.defaults[b];
        return null == c ? c : angular.isString(c) ? c : JSON.stringify(c);
    }, i.attrGetter = function(b, c, d, e) {
        var f = this.getAttrWithDefaults(c, b);
        if (!d) return f;
        try {
            return e ? a(f)(d, e) : a(f)(d);
        } catch (g) {
            if (b.search(/min|max|pattern/i)) return f;
            throw g;
        }
    }, i.shouldUpdateOn = function(a, b, c) {
        var d = i.attrGetter("ngfModelOptions", b, c);
        return d && d.updateOn ? d.updateOn.split(" ").indexOf(a) > -1 : !0;
    }, i.emptyPromise = function() {
        var a = d.defer(), c = arguments;
        return b(function() {
            a.resolve.apply(a, c);
        }), a.promise;
    }, i.rejectPromise = function() {
        var a = d.defer(), c = arguments;
        return b(function() {
            a.reject.apply(a, c);
        }), a.promise;
    }, i.happyPromise = function(a, c) {
        var e = d.defer();
        return a.then(function(a) {
            e.resolve(a);
        }, function(a) {
            b(function() {
                throw a;
            }), e.resolve(c);
        }), e.promise;
    }, i.updateModel = function(c, d, e, h, j, k, l) {
        function m(f, g, j, l, m) {
            d.$$ngfPrevValidFiles = f, d.$$ngfPrevInvalidFiles = g;
            var n = f && f.length ? f[0] : null, o = g && g.length ? g[0] : null;
            c && (i.applyModelValidation(c, f), c.$setViewValue(m ? n : f)), h && a(h)(e, {
                $files: f,
                $file: n,
                $newFiles: j,
                $duplicateFiles: l,
                $invalidFiles: g,
                $invalidFile: o,
                $event: k
            });
            var p = i.attrGetter("ngfModelInvalid", d);
            p && b(function() {
                a(p).assign(e, m ? o : g);
            }), b(function() {});
        }
        function n() {
            function a(a, b) {
                return a.name === b.name && (a.$ngfOrigSize || a.size) === (b.$ngfOrigSize || b.size) && a.type === b.type;
            }
            function b(b) {
                var c;
                for (c = 0; c < r.length; c++) if (a(b, r[c])) return !0;
                for (c = 0; c < s.length; c++) if (a(b, s[c])) return !0;
                return !1;
            }
            if (j) {
                q = [], t = [];
                for (var c = 0; c < j.length; c++) b(j[c]) ? t.push(j[c]) : q.push(j[c]);
            }
        }
        function o(a) {
            return angular.isArray(a) ? a : [ a ];
        }
        function p() {
            function a() {
                b(function() {
                    m(w ? r.concat(v) : v, w ? s.concat(u) : u, j, t, x);
                }, z && z.debounce ? z.debounce.change || z.debounce : 0);
            }
            var f = y ? q : v;
            g(f, d, e, c).then(function() {
                y ? i.validate(q, w ? r.length : 0, c, d, e).then(function(b) {
                    v = b.validsFiles, u = b.invalidsFiles, a();
                }) : a();
            }, function() {
                for (var b = 0; b < f.length; b++) {
                    var c = f[b];
                    if ("resize" === c.$error) {
                        var d = v.indexOf(c);
                        d > -1 && (v.splice(d, 1), u.push(c)), a();
                    }
                }
            });
        }
        var q, r, s, t = [], u = [], v = [];
        r = d.$$ngfPrevValidFiles || [], s = d.$$ngfPrevInvalidFiles || [], c && c.$modelValue && (r = o(c.$modelValue));
        var w = i.attrGetter("ngfKeep", d, e);
        q = (j || []).slice(0), ("distinct" === w || i.attrGetter("ngfKeepDistinct", d, e) === !0) && n(d, e);
        var x = !w && !i.attrGetter("ngfMultiple", d, e) && !i.attrGetter("multiple", d);
        if (!w || q.length) {
            i.attrGetter("ngfBeforeModelChange", d, e, {
                $files: j,
                $file: j && j.length ? j[0] : null,
                $newFiles: q,
                $duplicateFiles: t,
                $event: k
            });
            var y = i.attrGetter("ngfValidateAfterResize", d, e), z = i.attrGetter("ngfModelOptions", d, e);
            i.validate(q, w ? r.length : 0, c, d, e).then(function(a) {
                l ? m(q, [], j, t, x) : (z && z.allowInvalid || y ? v = q : (v = a.validFiles, u = a.invalidFiles), 
                i.attrGetter("ngfFixOrientation", d, e) && i.isExifSupported() ? f(v, d, e).then(function() {
                    p();
                }) : p());
            });
        }
    }, i;
} ]), ngFileUpload.directive("ngfSelect", [ "$parse", "$timeout", "$compile", "Upload", function(a, b, c, d) {
    function e(a) {
        var b = a.match(/Android[^\d]*(\d+)\.(\d+)/);
        if (b && b.length > 2) {
            var c = d.defaults.androidFixMinorVersion || 4;
            return parseInt(b[1]) < 4 || parseInt(b[1]) === c && parseInt(b[2]) < c;
        }
        return -1 === a.indexOf("Chrome") && /.*Windows.*Safari.*/.test(a);
    }
    function f(a, b, c, d, f, h, i, j) {
        function k() {
            return "input" === b[0].tagName.toLowerCase() && c.type && "file" === c.type.toLowerCase();
        }
        function l() {
            return t("ngfChange") || t("ngfSelect");
        }
        function m(b) {
            if (j.shouldUpdateOn("change", c, a)) {
                var e = b.__files_ || b.target && b.target.files, f = [];
                if (!e) return;
                for (var g = 0; g < e.length; g++) f.push(e[g]);
                j.updateModel(d, c, a, l(), f.length ? f : null, b);
            }
        }
        function n(a, d) {
            function e(b) {
                a.attr("id", "ngf-" + b), d.attr("id", "ngf-label-" + b);
            }
            for (var f = 0; f < b[0].attributes.length; f++) {
                var g = b[0].attributes[f];
                "type" !== g.name && "class" !== g.name && "style" !== g.name && ("id" === g.name ? (e(g.value), 
                u.push(c.$observe("id", e))) : a.attr(g.name, g.value || "required" !== g.name && "multiple" !== g.name ? g.value : g.name));
            }
        }
        function o() {
            if (k()) return b;
            var a = angular.element('<input type="file">'), c = angular.element("<label>upload</label>");
            return c.css("visibility", "hidden").css("position", "absolute").css("overflow", "hidden").css("width", "0px").css("height", "0px").css("border", "none").css("margin", "0px").css("padding", "0px").attr("tabindex", "-1"), 
            n(a, c), g.push({
                el: b,
                ref: c
            }), document.body.appendChild(c.append(a)[0]), a;
        }
        function p(c) {
            if (b.attr("disabled")) return !1;
            if (!t("ngfSelectDisabled", a)) {
                var d = q(c);
                if (null != d) return d;
                r(c);
                try {
                    k() || document.body.contains(x[0]) || (g.push({
                        el: b,
                        ref: x.parent()
                    }), document.body.appendChild(x.parent()[0]), x.bind("change", m));
                } catch (f) {}
                return e(navigator.userAgent) ? setTimeout(function() {
                    x[0].click();
                }, 0) : x[0].click(), !1;
            }
        }
        function q(a) {
            var b = a.changedTouches || a.originalEvent && a.originalEvent.changedTouches;
            if (b) {
                if ("touchstart" === a.type) return w = b[0].clientX, v = b[0].clientY, !0;
                if ("touchend" === a.type) {
                    var c = b[0].clientX, d = b[0].clientY;
                    if (Math.abs(c - w) > 20 || Math.abs(d - v) > 20) return a.stopPropagation(), a.preventDefault(), 
                    !1;
                }
                return !0;
            }
        }
        function r(b) {
            j.shouldUpdateOn("click", c, a) && x.val() && (x.val(null), j.updateModel(d, c, a, l(), null, b, !0));
        }
        function s(a) {
            if (x && !x.attr("__ngf_ie10_Fix_")) {
                if (!x[0].parentNode) return void (x = null);
                a.preventDefault(), a.stopPropagation(), x.unbind("click");
                var b = x.clone();
                return x.replaceWith(b), x = b, x.attr("__ngf_ie10_Fix_", "true"), x.bind("change", m), 
                x.bind("click", s), x[0].click(), !1;
            }
            x.removeAttr("__ngf_ie10_Fix_");
        }
        var t = function(a, b) {
            return j.attrGetter(a, c, b);
        };
        j.registerModelChangeValidator(d, c, a);
        var u = [];
        t("ngfMultiple") && u.push(a.$watch(t("ngfMultiple"), function() {
            x.attr("multiple", t("ngfMultiple", a));
        })), t("ngfCapture") && u.push(a.$watch(t("ngfCapture"), function() {
            x.attr("capture", t("ngfCapture", a));
        })), t("ngfAccept") && u.push(a.$watch(t("ngfAccept"), function() {
            x.attr("accept", t("ngfAccept", a));
        })), u.push(c.$observe("accept", function() {
            x.attr("accept", t("accept"));
        }));
        var v = 0, w = 0, x = b;
        k() || (x = o()), x.bind("change", m), k() ? b.bind("click", r) : b.bind("click touchstart touchend", p), 
        -1 !== navigator.appVersion.indexOf("MSIE 10") && x.bind("click", s), d && d.$formatters.push(function(a) {
            return (null == a || 0 === a.length) && x.val() && x.val(null), a;
        }), a.$on("$destroy", function() {
            k() || x.parent().remove(), angular.forEach(u, function(a) {
                a();
            });
        }), h(function() {
            for (var a = 0; a < g.length; a++) {
                var b = g[a];
                document.body.contains(b.el[0]) || (g.splice(a, 1), b.ref.remove());
            }
        }), window.FileAPI && window.FileAPI.ngfFixIE && window.FileAPI.ngfFixIE(b, x, m);
    }
    var g = [];
    return {
        restrict: "AEC",
        require: "?ngModel",
        link: function(e, g, h, i) {
            f(e, g, h, i, a, b, c, d);
        }
    };
} ]), function() {
    function a(a) {
        return "img" === a.tagName.toLowerCase() ? "image" : "audio" === a.tagName.toLowerCase() ? "audio" : "video" === a.tagName.toLowerCase() ? "video" : /./;
    }
    function b(b, c, d, e, f, g, h, i) {
        function j(a) {
            var g = b.attrGetter("ngfNoObjectUrl", f, d);
            b.dataUrl(a, g)["finally"](function() {
                c(function() {
                    var b = (g ? a.$ngfDataUrl : a.$ngfBlobUrl) || a.$ngfDataUrl;
                    i ? e.css("background-image", "url('" + (b || "") + "')") : e.attr("src", b), b ? e.removeClass("ng-hide") : e.addClass("ng-hide");
                });
            });
        }
        c(function() {
            var c = d.$watch(f[g], function(c) {
                var k = h;
                if ("ngfThumbnail" === g && (k || (k = {
                    width: e[0].naturalWidth || e[0].clientWidth,
                    height: e[0].naturalHeight || e[0].clientHeight
                }), 0 === k.width && window.getComputedStyle)) {
                    var l = getComputedStyle(e[0]);
                    l.width && l.width.indexOf("px") > -1 && l.height && l.height.indexOf("px") > -1 && (k = {
                        width: parseInt(l.width.slice(0, -2)),
                        height: parseInt(l.height.slice(0, -2))
                    });
                }
                return angular.isString(c) ? (e.removeClass("ng-hide"), i ? e.css("background-image", "url('" + c + "')") : e.attr("src", c)) : void (!c || !c.type || 0 !== c.type.search(a(e[0])) || i && 0 !== c.type.indexOf("image") ? e.addClass("ng-hide") : k && b.isResizeSupported() ? (k.resizeIf = function(a, e) {
                    return b.attrGetter("ngfResizeIf", f, d, {
                        $width: a,
                        $height: e,
                        $file: c
                    });
                }, b.resize(c, k).then(function(a) {
                    j(a);
                }, function(a) {
                    throw a;
                })) : j(c));
            });
            d.$on("$destroy", function() {
                c();
            });
        });
    }
    ngFileUpload.service("UploadDataUrl", [ "UploadBase", "$timeout", "$q", function(a, b, c) {
        var d = a;
        return d.base64DataUrl = function(a) {
            if (angular.isArray(a)) {
                var b = c.defer(), e = 0;
                return angular.forEach(a, function(c) {
                    d.dataUrl(c, !0)["finally"](function() {
                        if (e++, e === a.length) {
                            var c = [];
                            angular.forEach(a, function(a) {
                                c.push(a.$ngfDataUrl);
                            }), b.resolve(c, a);
                        }
                    });
                }), b.promise;
            }
            return d.dataUrl(a, !0);
        }, d.dataUrl = function(a, e) {
            if (!a) return d.emptyPromise(a, a);
            if (e && null != a.$ngfDataUrl || !e && null != a.$ngfBlobUrl) return d.emptyPromise(e ? a.$ngfDataUrl : a.$ngfBlobUrl, a);
            var f = e ? a.$$ngfDataUrlPromise : a.$$ngfBlobUrlPromise;
            if (f) return f;
            var g = c.defer();
            return b(function() {
                if (window.FileReader && a && (!window.FileAPI || -1 === navigator.userAgent.indexOf("MSIE 8") || a.size < 2e4) && (!window.FileAPI || -1 === navigator.userAgent.indexOf("MSIE 9") || a.size < 4e6)) {
                    var c = window.URL || window.webkitURL;
                    if (c && c.createObjectURL && !e) {
                        var f;
                        try {
                            f = c.createObjectURL(a);
                        } catch (h) {
                            return void b(function() {
                                a.$ngfBlobUrl = "", g.reject();
                            });
                        }
                        b(function() {
                            if (a.$ngfBlobUrl = f, f) {
                                g.resolve(f, a), d.blobUrls = d.blobUrls || [], d.blobUrlsTotalSize = d.blobUrlsTotalSize || 0, 
                                d.blobUrls.push({
                                    url: f,
                                    size: a.size
                                }), d.blobUrlsTotalSize += a.size || 0;
                                for (var b = d.defaults.blobUrlsMaxMemory || 268435456, e = d.defaults.blobUrlsMaxQueueSize || 200; (d.blobUrlsTotalSize > b || d.blobUrls.length > e) && d.blobUrls.length > 1; ) {
                                    var h = d.blobUrls.splice(0, 1)[0];
                                    c.revokeObjectURL(h.url), d.blobUrlsTotalSize -= h.size;
                                }
                            }
                        });
                    } else {
                        var i = new FileReader();
                        i.onload = function(c) {
                            b(function() {
                                a.$ngfDataUrl = c.target.result, g.resolve(c.target.result, a), b(function() {
                                    delete a.$ngfDataUrl;
                                }, 1e3);
                            });
                        }, i.onerror = function() {
                            b(function() {
                                a.$ngfDataUrl = "", g.reject();
                            });
                        }, i.readAsDataURL(a);
                    }
                } else b(function() {
                    a[e ? "$ngfDataUrl" : "$ngfBlobUrl"] = "", g.reject();
                });
            }), f = e ? a.$$ngfDataUrlPromise = g.promise : a.$$ngfBlobUrlPromise = g.promise, 
            f["finally"](function() {
                delete a[e ? "$$ngfDataUrlPromise" : "$$ngfBlobUrlPromise"];
            }), f;
        }, d;
    } ]), ngFileUpload.directive("ngfSrc", [ "Upload", "$timeout", function(a, c) {
        return {
            restrict: "AE",
            link: function(d, e, f) {
                b(a, c, d, e, f, "ngfSrc", a.attrGetter("ngfResize", f, d), !1);
            }
        };
    } ]), ngFileUpload.directive("ngfBackground", [ "Upload", "$timeout", function(a, c) {
        return {
            restrict: "AE",
            link: function(d, e, f) {
                b(a, c, d, e, f, "ngfBackground", a.attrGetter("ngfResize", f, d), !0);
            }
        };
    } ]), ngFileUpload.directive("ngfThumbnail", [ "Upload", "$timeout", function(a, c) {
        return {
            restrict: "AE",
            link: function(d, e, f) {
                var g = a.attrGetter("ngfSize", f, d);
                b(a, c, d, e, f, "ngfThumbnail", g, a.attrGetter("ngfAsBackground", f, d));
            }
        };
    } ]), ngFileUpload.config([ "$compileProvider", function(a) {
        a.imgSrcSanitizationWhitelist && a.imgSrcSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|webcal|local|file|data|blob):/), 
        a.aHrefSanitizationWhitelist && a.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|tel|webcal|local|file|data|blob):/);
    } ]), ngFileUpload.filter("ngfDataUrl", [ "UploadDataUrl", "$sce", function(a, b) {
        return function(c, d, e) {
            if (angular.isString(c)) return b.trustAsResourceUrl(c);
            var f = c && ((d ? c.$ngfDataUrl : c.$ngfBlobUrl) || c.$ngfDataUrl);
            return c && !f ? (!c.$ngfDataUrlFilterInProgress && angular.isObject(c) && (c.$ngfDataUrlFilterInProgress = !0, 
            a.dataUrl(c, d)), "") : (c && delete c.$ngfDataUrlFilterInProgress, (c && f ? e ? b.trustAsResourceUrl(f) : f : c) || "");
        };
    } ]);
}(), ngFileUpload.service("UploadValidate", [ "UploadDataUrl", "$q", "$timeout", function(a, b, c) {
    function d(a) {
        var b = "", c = [];
        if (a.length > 2 && "/" === a[0] && "/" === a[a.length - 1]) b = a.substring(1, a.length - 1); else {
            var e = a.split(",");
            if (e.length > 1) for (var f = 0; f < e.length; f++) {
                var g = d(e[f]);
                g.regexp ? (b += "(" + g.regexp + ")", f < e.length - 1 && (b += "|")) : c = c.concat(g.excludes);
            } else 0 === a.indexOf("!") ? c.push("^((?!" + d(a.substring(1)).regexp + ").)*$") : (0 === a.indexOf(".") && (a = "*" + a), 
            b = "^" + a.replace(new RegExp("[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\-]", "g"), "\\$&") + "$", 
            b = b.replace(/\\\*/g, ".*").replace(/\\\?/g, "."));
        }
        return {
            regexp: b,
            excludes: c
        };
    }
    function e(a, b) {
        null == b || a.$dirty || (a.$setDirty ? a.$setDirty() : a.$dirty = !0);
    }
    var f = a;
    return f.validatePattern = function(a, b) {
        if (!b) return !0;
        var c = d(b), e = !0;
        if (c.regexp && c.regexp.length) {
            var f = new RegExp(c.regexp, "i");
            e = null != a.type && f.test(a.type) || null != a.name && f.test(a.name);
        }
        for (var g = c.excludes.length; g--; ) {
            var h = new RegExp(c.excludes[g], "i");
            e = e && (null == a.type || h.test(a.type)) && (null == a.name || h.test(a.name));
        }
        return e;
    }, f.ratioToFloat = function(a) {
        var b = a.toString(), c = b.search(/[x:]/i);
        return b = c > -1 ? parseFloat(b.substring(0, c)) / parseFloat(b.substring(c + 1)) : parseFloat(b);
    }, f.registerModelChangeValidator = function(a, b, c) {
        a && a.$formatters.push(function(d) {
            if (a.$dirty) {
                var e = d;
                d && !angular.isArray(d) && (e = [ d ]), f.validate(e, 0, a, b, c).then(function() {
                    f.applyModelValidation(a, e);
                });
            }
            return d;
        });
    }, f.applyModelValidation = function(a, b) {
        e(a, b), angular.forEach(a.$ngfValidations, function(b) {
            a.$setValidity(b.name, b.valid);
        });
    }, f.getValidationAttr = function(a, b, c, d, e) {
        var g = "ngf" + c[0].toUpperCase() + c.substr(1), h = f.attrGetter(g, a, b, {
            $file: e
        });
        if (null == h && (h = f.attrGetter("ngfValidate", a, b, {
            $file: e
        }))) {
            var i = (d || c).split(".");
            h = h[i[0]], i.length > 1 && (h = h && h[i[1]]);
        }
        return h;
    }, f.validate = function(a, c, d, e, g) {
        function h(b, c, h) {
            if (a) {
                for (var i = a.length, j = null; i--; ) {
                    var n = a[i];
                    if (n) {
                        var o = f.getValidationAttr(e, g, b, c, n);
                        null != o && (h(n, o, i) || (-1 === k.indexOf(b) ? (n.$error = b, (n.$errorMessages = n.$errorMessages || {})[b] = !0, 
                        n.$errorParam = o, -1 === m.indexOf(n) && m.push(n), l || a.splice(i, 1), j = !1) : a.splice(i, 1)));
                    }
                }
                null !== j && d.$ngfValidations.push({
                    name: b,
                    valid: j
                });
            }
        }
        function i(c, h, i, n, o) {
            function p(b, d, e) {
                function f(f) {
                    if (f()) if (-1 === k.indexOf(c)) {
                        if (d.$error = c, (d.$errorMessages = d.$errorMessages || {})[c] = !0, d.$errorParam = e, 
                        -1 === m.indexOf(d) && m.push(d), !l) {
                            var g = a.indexOf(d);
                            g > -1 && a.splice(g, 1);
                        }
                        b.resolve(!1);
                    } else {
                        var h = a.indexOf(d);
                        h > -1 && a.splice(h, 1), b.resolve(!0);
                    } else b.resolve(!0);
                }
                null != e ? n(d, e).then(function(a) {
                    f(function() {
                        return !o(a, e);
                    });
                }, function() {
                    f(function() {
                        return j("ngfValidateForce", {
                            $file: d
                        });
                    });
                }) : b.resolve(!0);
            }
            var q = [ f.emptyPromise(!0) ];
            a && (a = void 0 === a.length ? [ a ] : a, angular.forEach(a, function(a) {
                var d = b.defer();
                return q.push(d.promise), !i || null != a.type && 0 === a.type.search(i) ? void ("dimensions" === c && null != f.attrGetter("ngfDimensions", e) ? f.imageDimensions(a).then(function(b) {
                    p(d, a, j("ngfDimensions", {
                        $file: a,
                        $width: b.width,
                        $height: b.height
                    }));
                }, function() {
                    d.resolve(!1);
                }) : "duration" === c && null != f.attrGetter("ngfDuration", e) ? f.mediaDuration(a).then(function(b) {
                    p(d, a, j("ngfDuration", {
                        $file: a,
                        $duration: b
                    }));
                }, function() {
                    d.resolve(!1);
                }) : p(d, a, f.getValidationAttr(e, g, c, h, a))) : void d.resolve(!0);
            }));
            var r = b.defer();
            return b.all(q).then(function(a) {
                for (var b = !0, e = 0; e < a.length; e++) if (!a[e]) {
                    b = !1;
                    break;
                }
                d.$ngfValidations.push({
                    name: c,
                    valid: b
                }), r.resolve(b);
            }), r.promise;
        }
        d = d || {}, d.$ngfValidations = d.$ngfValidations || [], angular.forEach(d.$ngfValidations, function(a) {
            a.valid = !0;
        });
        var j = function(a, b) {
            return f.attrGetter(a, e, g, b);
        }, k = (f.attrGetter("ngfIgnoreInvalid", e, g) || "").split(" "), l = f.attrGetter("ngfRunAllValidations", e, g);
        if (null == a || 0 === a.length) return f.emptyPromise({
            validFiles: a,
            invalidFiles: []
        });
        a = void 0 === a.length ? [ a ] : a.slice(0);
        var m = [];
        h("pattern", null, f.validatePattern), h("minSize", "size.min", function(a, b) {
            return a.size + .1 >= f.translateScalars(b);
        }), h("maxSize", "size.max", function(a, b) {
            return a.size - .1 <= f.translateScalars(b);
        });
        var n = 0;
        if (h("maxTotalSize", null, function(b, c) {
            return n += b.size, n > f.translateScalars(c) ? (a.splice(0, a.length), !1) : !0;
        }), h("validateFn", null, function(a, b) {
            return b === !0 || null === b || "" === b;
        }), !a.length) return f.emptyPromise({
            validFiles: [],
            invalidFiles: m
        });
        var o = b.defer(), p = [];
        return p.push(i("maxHeight", "height.max", /image/, this.imageDimensions, function(a, b) {
            return a.height <= b;
        })), p.push(i("minHeight", "height.min", /image/, this.imageDimensions, function(a, b) {
            return a.height >= b;
        })), p.push(i("maxWidth", "width.max", /image/, this.imageDimensions, function(a, b) {
            return a.width <= b;
        })), p.push(i("minWidth", "width.min", /image/, this.imageDimensions, function(a, b) {
            return a.width >= b;
        })), p.push(i("dimensions", null, /image/, function(a, b) {
            return f.emptyPromise(b);
        }, function(a) {
            return a;
        })), p.push(i("ratio", null, /image/, this.imageDimensions, function(a, b) {
            for (var c = b.toString().split(","), d = !1, e = 0; e < c.length; e++) Math.abs(a.width / a.height - f.ratioToFloat(c[e])) < .01 && (d = !0);
            return d;
        })), p.push(i("maxRatio", "ratio.max", /image/, this.imageDimensions, function(a, b) {
            return a.width / a.height - f.ratioToFloat(b) < 1e-4;
        })), p.push(i("minRatio", "ratio.min", /image/, this.imageDimensions, function(a, b) {
            return a.width / a.height - f.ratioToFloat(b) > -1e-4;
        })), p.push(i("maxDuration", "duration.max", /audio|video/, this.mediaDuration, function(a, b) {
            return a <= f.translateScalars(b);
        })), p.push(i("minDuration", "duration.min", /audio|video/, this.mediaDuration, function(a, b) {
            return a >= f.translateScalars(b);
        })), p.push(i("duration", null, /audio|video/, function(a, b) {
            return f.emptyPromise(b);
        }, function(a) {
            return a;
        })), p.push(i("validateAsyncFn", null, null, function(a, b) {
            return b;
        }, function(a) {
            return a === !0 || null === a || "" === a;
        })), b.all(p).then(function() {
            if (l) for (var b = 0; b < a.length; b++) {
                var d = a[b];
                d.$error && a.splice(b--, 1);
            }
            l = !1, h("maxFiles", null, function(a, b, d) {
                return b > c + d;
            }), o.resolve({
                validFiles: a,
                invalidFiles: m
            });
        }), o.promise;
    }, f.imageDimensions = function(a) {
        if (a.$ngfWidth && a.$ngfHeight) {
            var d = b.defer();
            return c(function() {
                d.resolve({
                    width: a.$ngfWidth,
                    height: a.$ngfHeight
                });
            }), d.promise;
        }
        if (a.$ngfDimensionPromise) return a.$ngfDimensionPromise;
        var e = b.defer();
        return c(function() {
            return 0 !== a.type.indexOf("image") ? void e.reject("not image") : void f.dataUrl(a).then(function(b) {
                function d() {
                    var b = h[0].naturalWidth || h[0].clientWidth, c = h[0].naturalHeight || h[0].clientHeight;
                    h.remove(), a.$ngfWidth = b, a.$ngfHeight = c, e.resolve({
                        width: b,
                        height: c
                    });
                }
                function f() {
                    h.remove(), e.reject("load error");
                }
                function g() {
                    c(function() {
                        h[0].parentNode && (h[0].clientWidth ? d() : i++ > 10 ? f() : g());
                    }, 1e3);
                }
                var h = angular.element("<img>").attr("src", b).css("visibility", "hidden").css("position", "fixed").css("max-width", "none !important").css("max-height", "none !important");
                h.on("load", d), h.on("error", f);
                var i = 0;
                g(), angular.element(document.getElementsByTagName("body")[0]).append(h);
            }, function() {
                e.reject("load error");
            });
        }), a.$ngfDimensionPromise = e.promise, a.$ngfDimensionPromise["finally"](function() {
            delete a.$ngfDimensionPromise;
        }), a.$ngfDimensionPromise;
    }, f.mediaDuration = function(a) {
        if (a.$ngfDuration) {
            var d = b.defer();
            return c(function() {
                d.resolve(a.$ngfDuration);
            }), d.promise;
        }
        if (a.$ngfDurationPromise) return a.$ngfDurationPromise;
        var e = b.defer();
        return c(function() {
            return 0 !== a.type.indexOf("audio") && 0 !== a.type.indexOf("video") ? void e.reject("not media") : void f.dataUrl(a).then(function(b) {
                function d() {
                    var b = h[0].duration;
                    a.$ngfDuration = b, h.remove(), e.resolve(b);
                }
                function f() {
                    h.remove(), e.reject("load error");
                }
                function g() {
                    c(function() {
                        h[0].parentNode && (h[0].duration ? d() : i > 10 ? f() : g());
                    }, 1e3);
                }
                var h = angular.element(0 === a.type.indexOf("audio") ? "<audio>" : "<video>").attr("src", b).css("visibility", "none").css("position", "fixed");
                h.on("loadedmetadata", d), h.on("error", f);
                var i = 0;
                g(), angular.element(document.body).append(h);
            }, function() {
                e.reject("load error");
            });
        }), a.$ngfDurationPromise = e.promise, a.$ngfDurationPromise["finally"](function() {
            delete a.$ngfDurationPromise;
        }), a.$ngfDurationPromise;
    }, f;
} ]), ngFileUpload.service("UploadResize", [ "UploadValidate", "$q", function(a, b) {
    var c = a, d = function(a, b, c, d, e) {
        var f = e ? Math.max(c / a, d / b) : Math.min(c / a, d / b);
        return {
            width: a * f,
            height: b * f,
            marginX: a * f - c,
            marginY: b * f - d
        };
    }, e = function(a, e, f, g, h, i, j, k) {
        var l = b.defer(), m = document.createElement("canvas"), n = document.createElement("img");
        return n.setAttribute("style", "visibility:hidden;position:fixed;z-index:-100000"), 
        document.body.appendChild(n), n.onload = function() {
            var a = n.width, b = n.height;
            if (n.parentNode.removeChild(n), null != k && k(a, b) === !1) return void l.reject("resizeIf");
            try {
                if (i) {
                    var o = c.ratioToFloat(i), p = a / b;
                    o > p ? (e = a, f = e / o) : (f = b, e = f * o);
                }
                e || (e = a), f || (f = b);
                var q = d(a, b, e, f, j);
                m.width = Math.min(q.width, e), m.height = Math.min(q.height, f);
                var r = m.getContext("2d");
                r.drawImage(n, Math.min(0, -q.marginX / 2), Math.min(0, -q.marginY / 2), q.width, q.height), 
                l.resolve(m.toDataURL(h || "image/WebP", g || .934));
            } catch (s) {
                l.reject(s);
            }
        }, n.onerror = function() {
            n.parentNode.removeChild(n), l.reject();
        }, n.src = a, l.promise;
    };
    return c.dataUrltoBlob = function(a, b, c) {
        for (var d = a.split(","), e = d[0].match(/:(.*?);/)[1], f = atob(d[1]), g = f.length, h = new Uint8Array(g); g--; ) h[g] = f.charCodeAt(g);
        var i = new window.Blob([ h ], {
            type: e
        });
        return i.name = b, i.$ngfOrigSize = c, i;
    }, c.isResizeSupported = function() {
        var a = document.createElement("canvas");
        return window.atob && a.getContext && a.getContext("2d") && window.Blob;
    }, c.isResizeSupported() && Object.defineProperty(window.Blob.prototype, "name", {
        get: function() {
            return this.$ngfName;
        },
        set: function(a) {
            this.$ngfName = a;
        },
        configurable: !0
    }), c.resize = function(a, d) {
        if (0 !== a.type.indexOf("image")) return c.emptyPromise(a);
        var f = b.defer();
        return c.dataUrl(a, !0).then(function(b) {
            e(b, d.width, d.height, d.quality, d.type || a.type, d.ratio, d.centerCrop, d.resizeIf).then(function(e) {
                if ("image/jpeg" === a.type && d.restoreExif !== !1) try {
                    e = c.restoreExif(b, e);
                } catch (g) {
                    setTimeout(function() {
                        throw g;
                    }, 1);
                }
                try {
                    var h = c.dataUrltoBlob(e, a.name, a.size);
                    f.resolve(h);
                } catch (g) {
                    f.reject(g);
                }
            }, function(b) {
                "resizeIf" === b && f.resolve(a), f.reject(b);
            });
        }, function(a) {
            f.reject(a);
        }), f.promise;
    }, c;
} ]), function() {
    function a(a, c, d, e, f, g, h, i, j, k) {
        function l() {
            return c.attr("disabled") || s("ngfDropDisabled", a);
        }
        function m(b, c, d) {
            if (b) {
                var e;
                try {
                    e = b && b.getData && b.getData("text/html");
                } catch (f) {}
                q(b.items, b.files, s("ngfAllowDir", a) !== !1, s("multiple") || s("ngfMultiple", a)).then(function(a) {
                    a.length ? n(a, c) : o(d, e).then(function(a) {
                        n(a, c);
                    });
                });
            }
        }
        function n(b, c) {
            i.updateModel(e, d, a, s("ngfChange") || s("ngfDrop"), b, c);
        }
        function o(b, c) {
            if (!i.shouldUpdateOn(b, d, a) || "string" != typeof c) return i.rejectPromise([]);
            var e = [];
            c.replace(/<(img src|img [^>]* src) *=\"([^\"]*)\"/gi, function(a, b, c) {
                e.push(c);
            });
            var f = [], g = [];
            if (e.length) {
                angular.forEach(e, function(a) {
                    f.push(i.urlToBlob(a).then(function(a) {
                        g.push(a);
                    }));
                });
                var h = k.defer();
                return k.all(f).then(function() {
                    h.resolve(g);
                }, function(a) {
                    h.reject(a);
                }), h.promise;
            }
            return i.emptyPromise();
        }
        function p(a, b, c, d) {
            var e = s("ngfDragOverClass", a, {
                $event: c
            }), f = "dragover";
            if (angular.isString(e)) f = e; else if (e && (e.delay && (w = e.delay), e.accept || e.reject)) {
                var g = c.dataTransfer.items;
                if (null != g && g.length) for (var h = e.pattern || s("ngfPattern", a, {
                    $event: c
                }), j = g.length; j--; ) {
                    if (!i.validatePattern(g[j], h)) {
                        f = e.reject;
                        break;
                    }
                    f = e.accept;
                } else f = e.accept;
            }
            d(f);
        }
        function q(b, c, e, f) {
            function g(a, b) {
                var c = k.defer();
                if (null != a) if (a.isDirectory) {
                    var d = [ i.emptyPromise() ];
                    if (m) {
                        var e = {
                            type: "directory"
                        };
                        e.name = e.path = (b || "") + a.name, n.push(e);
                    }
                    var f = a.createReader(), h = [], p = function() {
                        f.readEntries(function(e) {
                            try {
                                e.length ? (h = h.concat(Array.prototype.slice.call(e || [], 0)), p()) : (angular.forEach(h.slice(0), function(c) {
                                    n.length <= j && l >= o && d.push(g(c, (b ? b : "") + a.name + "/"));
                                }), k.all(d).then(function() {
                                    c.resolve();
                                }, function(a) {
                                    c.reject(a);
                                }));
                            } catch (f) {
                                c.reject(f);
                            }
                        }, function(a) {
                            c.reject(a);
                        });
                    };
                    p();
                } else a.file(function(a) {
                    try {
                        a.path = (b ? b : "") + a.name, m && (a = i.rename(a, a.path)), n.push(a), o += a.size, 
                        c.resolve();
                    } catch (d) {
                        c.reject(d);
                    }
                }, function(a) {
                    c.reject(a);
                });
                return c.promise;
            }
            var j = i.getValidationAttr(d, a, "maxFiles");
            null == j && (j = Number.MAX_VALUE);
            var l = i.getValidationAttr(d, a, "maxTotalSize");
            null == l && (l = Number.MAX_VALUE);
            var m = s("ngfIncludeDir", a), n = [], o = 0, p = [ i.emptyPromise() ];
            if (b && b.length > 0 && "file:" !== h.location.protocol) for (var q = 0; q < b.length; q++) {
                if (b[q].webkitGetAsEntry && b[q].webkitGetAsEntry() && b[q].webkitGetAsEntry().isDirectory) {
                    var r = b[q].webkitGetAsEntry();
                    if (r.isDirectory && !e) continue;
                    null != r && p.push(g(r));
                } else {
                    var t = b[q].getAsFile();
                    null != t && (n.push(t), o += t.size);
                }
                if (n.length > j || o > l || !f && n.length > 0) break;
            } else if (null != c) for (var u = 0; u < c.length; u++) {
                var v = c.item(u);
                if ((v.type || v.size > 0) && (n.push(v), o += v.size), n.length > j || o > l || !f && n.length > 0) break;
            }
            var w = k.defer();
            return k.all(p).then(function() {
                if (f || m || !n.length) w.resolve(n); else {
                    for (var a = 0; n[a] && "directory" === n[a].type; ) a++;
                    w.resolve([ n[a] ]);
                }
            }, function(a) {
                w.reject(a);
            }), w.promise;
        }
        var r = b(), s = function(a, b, c) {
            return i.attrGetter(a, d, b, c);
        };
        if (s("dropAvailable") && g(function() {
            a[s("dropAvailable")] ? a[s("dropAvailable")].value = r : a[s("dropAvailable")] = r;
        }), !r) return void (s("ngfHideOnDropNotAvailable", a) === !0 && c.css("display", "none"));
        null == s("ngfSelect") && i.registerModelChangeValidator(e, d, a);
        var t, u = null, v = f(s("ngfStopPropagation")), w = 1;
        c[0].addEventListener("dragover", function(b) {
            if (!l() && i.shouldUpdateOn("drop", d, a)) {
                if (b.preventDefault(), v(a) && b.stopPropagation(), navigator.userAgent.indexOf("Chrome") > -1) {
                    var e = b.dataTransfer.effectAllowed;
                    b.dataTransfer.dropEffect = "move" === e || "linkMove" === e ? "move" : "copy";
                }
                g.cancel(u), t || (t = "C", p(a, d, b, function(d) {
                    t = d, c.addClass(t), s("ngfDrag", a, {
                        $isDragging: !0,
                        $class: t,
                        $event: b
                    });
                }));
            }
        }, !1), c[0].addEventListener("dragenter", function(b) {
            !l() && i.shouldUpdateOn("drop", d, a) && (b.preventDefault(), v(a) && b.stopPropagation());
        }, !1), c[0].addEventListener("dragleave", function(b) {
            !l() && i.shouldUpdateOn("drop", d, a) && (b.preventDefault(), v(a) && b.stopPropagation(), 
            u = g(function() {
                t && c.removeClass(t), t = null, s("ngfDrag", a, {
                    $isDragging: !1,
                    $event: b
                });
            }, w || 100));
        }, !1), c[0].addEventListener("drop", function(b) {
            !l() && i.shouldUpdateOn("drop", d, a) && (b.preventDefault(), v(a) && b.stopPropagation(), 
            t && c.removeClass(t), t = null, m(b.dataTransfer, b, "dropUrl"));
        }, !1), c[0].addEventListener("paste", function(b) {
            navigator.userAgent.toLowerCase().indexOf("firefox") > -1 && s("ngfEnableFirefoxPaste", a) && b.preventDefault(), 
            !l() && i.shouldUpdateOn("paste", d, a) && m(b.clipboardData || b.originalEvent.clipboardData, b, "pasteUrl");
        }, !1), navigator.userAgent.toLowerCase().indexOf("firefox") > -1 && s("ngfEnableFirefoxPaste", a) && (c.attr("contenteditable", !0), 
        c.on("keypress", function(a) {
            a.metaKey || a.ctrlKey || a.preventDefault();
        }));
    }
    function b() {
        var a = document.createElement("div");
        return "draggable" in a && "ondrop" in a && !/Edge\/12./i.test(navigator.userAgent);
    }
    ngFileUpload.directive("ngfDrop", [ "$parse", "$timeout", "$window", "Upload", "$http", "$q", function(b, c, d, e, f, g) {
        return {
            restrict: "AEC",
            require: "?ngModel",
            link: function(h, i, j, k) {
                a(h, i, j, k, b, c, d, e, f, g);
            }
        };
    } ]), ngFileUpload.directive("ngfNoFileDrop", function() {
        return function(a, c) {
            b() && c.css("display", "none");
        };
    }), ngFileUpload.directive("ngfDropAvailable", [ "$parse", "$timeout", "Upload", function(a, c, d) {
        return function(e, f, g) {
            if (b()) {
                var h = a(d.attrGetter("ngfDropAvailable", g));
                c(function() {
                    h(e), h.assign && h.assign(e, !0);
                });
            }
        };
    } ]);
}(), ngFileUpload.service("UploadExif", [ "UploadResize", "$q", function(a, b) {
    function c(a, b, c, d) {
        switch (b) {
          case 2:
            return a.transform(-1, 0, 0, 1, c, 0);

          case 3:
            return a.transform(-1, 0, 0, -1, c, d);

          case 4:
            return a.transform(1, 0, 0, -1, 0, d);

          case 5:
            return a.transform(0, 1, 1, 0, 0, 0);

          case 6:
            return a.transform(0, 1, -1, 0, d, 0);

          case 7:
            return a.transform(0, -1, -1, 0, d, c);

          case 8:
            return a.transform(0, -1, 1, 0, 0, c);
        }
    }
    function d(a) {
        for (var b = "", c = new Uint8Array(a), d = c.byteLength, e = 0; d > e; e++) b += String.fromCharCode(c[e]);
        return window.btoa(b);
    }
    var e = a;
    return e.isExifSupported = function() {
        return window.FileReader && new FileReader().readAsArrayBuffer && e.isResizeSupported();
    }, e.readOrientation = function(a) {
        var c = b.defer(), d = new FileReader(), e = a.slice ? a.slice(0, 65536) : a;
        return d.readAsArrayBuffer(e), d.onerror = function(a) {
            return c.reject(a);
        }, d.onload = function(a) {
            var b = {
                orientation: 1
            }, d = new DataView(this.result);
            if (65496 !== d.getUint16(0, !1)) return c.resolve(b);
            for (var e = d.byteLength, f = 2; e > f; ) {
                var g = d.getUint16(f, !1);
                if (f += 2, 65505 === g) {
                    if (1165519206 !== d.getUint32(f += 2, !1)) return c.resolve(b);
                    var h = 18761 === d.getUint16(f += 6, !1);
                    f += d.getUint32(f + 4, h);
                    var i = d.getUint16(f, h);
                    f += 2;
                    for (var j = 0; i > j; j++) if (274 === d.getUint16(f + 12 * j, h)) {
                        var k = d.getUint16(f + 12 * j + 8, h);
                        return k >= 2 && 8 >= k && (d.setUint16(f + 12 * j + 8, 1, h), b.fixedArrayBuffer = a.target.result), 
                        b.orientation = k, c.resolve(b);
                    }
                } else {
                    if (65280 !== (65280 & g)) break;
                    f += d.getUint16(f, !1);
                }
            }
            return c.resolve(b);
        }, c.promise;
    }, e.applyExifRotation = function(a) {
        if (0 !== a.type.indexOf("image/jpeg")) return e.emptyPromise(a);
        var f = b.defer();
        return e.readOrientation(a).then(function(b) {
            return b.orientation < 2 || b.orientation > 8 ? f.resolve(a) : void e.dataUrl(a, !0).then(function(g) {
                var h = document.createElement("canvas"), i = document.createElement("img");
                i.onload = function() {
                    try {
                        h.width = b.orientation > 4 ? i.height : i.width, h.height = b.orientation > 4 ? i.width : i.height;
                        var g = h.getContext("2d");
                        c(g, b.orientation, i.width, i.height), g.drawImage(i, 0, 0);
                        var j = h.toDataURL(a.type || "image/WebP", .934);
                        j = e.restoreExif(d(b.fixedArrayBuffer), j);
                        var k = e.dataUrltoBlob(j, a.name);
                        f.resolve(k);
                    } catch (l) {
                        return f.reject(l);
                    }
                }, i.onerror = function() {
                    f.reject();
                }, i.src = g;
            }, function(a) {
                f.reject(a);
            });
        }, function(a) {
            f.reject(a);
        }), f.promise;
    }, e.restoreExif = function(a, b) {
        var c = {};
        return c.KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", 
        c.encode64 = function(a) {
            var b, c, d, e, f, g = "", h = "", i = "", j = 0;
            do b = a[j++], c = a[j++], h = a[j++], d = b >> 2, e = (3 & b) << 4 | c >> 4, f = (15 & c) << 2 | h >> 6, 
            i = 63 & h, isNaN(c) ? f = i = 64 : isNaN(h) && (i = 64), g = g + this.KEY_STR.charAt(d) + this.KEY_STR.charAt(e) + this.KEY_STR.charAt(f) + this.KEY_STR.charAt(i), 
            b = c = h = "", d = e = f = i = ""; while (j < a.length);
            return g;
        }, c.restore = function(a, b) {
            a.match("data:image/jpeg;base64,") && (a = a.replace("data:image/jpeg;base64,", ""));
            var c = this.decode64(a), d = this.slice2Segments(c), e = this.exifManipulation(b, d);
            return "data:image/jpeg;base64," + this.encode64(e);
        }, c.exifManipulation = function(a, b) {
            var c = this.getExifArray(b), d = this.insertExif(a, c);
            return new Uint8Array(d);
        }, c.getExifArray = function(a) {
            for (var b, c = 0; c < a.length; c++) if (b = a[c], 255 === b[0] & 225 === b[1]) return b;
            return [];
        }, c.insertExif = function(a, b) {
            var c = a.replace("data:image/jpeg;base64,", ""), d = this.decode64(c), e = d.indexOf(255, 3), f = d.slice(0, e), g = d.slice(e), h = f;
            return h = h.concat(b), h = h.concat(g);
        }, c.slice2Segments = function(a) {
            for (var b = 0, c = []; ;) {
                if (255 === a[b] & 218 === a[b + 1]) break;
                if (255 === a[b] & 216 === a[b + 1]) b += 2; else {
                    var d = 256 * a[b + 2] + a[b + 3], e = b + d + 2, f = a.slice(b, e);
                    c.push(f), b = e;
                }
                if (b > a.length) break;
            }
            return c;
        }, c.decode64 = function(a) {
            var b, c, d, e, f, g = "", h = "", i = 0, j = [], k = /[^A-Za-z0-9\+\/\=]/g;
            k.exec(a) && console.log("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, NaNExpect errors in decoding."), 
            a = a.replace(/[^A-Za-z0-9\+\/\=]/g, "");
            do d = this.KEY_STR.indexOf(a.charAt(i++)), e = this.KEY_STR.indexOf(a.charAt(i++)), 
            f = this.KEY_STR.indexOf(a.charAt(i++)), h = this.KEY_STR.indexOf(a.charAt(i++)), 
            b = d << 2 | e >> 4, c = (15 & e) << 4 | f >> 2, g = (3 & f) << 6 | h, j.push(b), 
            64 !== f && j.push(c), 64 !== h && j.push(g), b = c = g = "", d = e = f = h = ""; while (i < a.length);
            return j;
        }, c.restore(a, b);
    }, e;
} ]);

(function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) return installedModules[moduleId].exports;
        var module = installedModules[moduleId] = {
            exports: {},
            id: moduleId,
            loaded: false
        };
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        module.loaded = true;
        return module.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.p = "./dist/";
    return __webpack_require__(0);
})([ function(module, exports, __webpack_require__) {
    "use strict";
    var BsLoadingOverlayDirective_1 = __webpack_require__(1);
    var BsLoadingOverlayService_1 = __webpack_require__(3);
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = angular.module("bsLoadingOverlay", []).directive("bsLoadingOverlay", BsLoadingOverlayDirective_1.BsLoadingOverlayDirectiveFactory).factory("bsLoadingOverlayService", BsLoadingOverlayService_1.default);
}, function(module, exports, __webpack_require__) {
    "use strict";
    var BsLoadingOverlayInstance_1 = __webpack_require__(2);
    var BsLoadingOverlayDirective = function() {
        function BsLoadingOverlayDirective($compile, $rootScope, $templateRequest, $q, $timeout, bsLoadingOverlayService) {
            var _this = this;
            this.$compile = $compile;
            this.$rootScope = $rootScope;
            this.$templateRequest = $templateRequest;
            this.$q = $q;
            this.$timeout = $timeout;
            this.bsLoadingOverlayService = bsLoadingOverlayService;
            this.restrict = "EA";
            this.link = function(scope, $element, $attributes) {
                var templatePromise;
                var overlayElementScope;
                var globalConfig = _this.bsLoadingOverlayService.getGlobalConfig();
                var templateUrl = $attributes.bsLoadingOverlayTemplateUrl || globalConfig.templateUrl;
                var templateOptions = scope.$eval($attributes.bsLoadingOverlayTemplateOptions) || globalConfig.templateOptions;
                var overlayElement = null;
                if (templateUrl) {
                    templatePromise = _this.$templateRequest(templateUrl);
                } else {
                    templatePromise = _this.$q.reject();
                }
                templatePromise.then(function(loadedTemplate) {
                    overlayElementScope = scope.$new();
                    overlayElementScope.bsLoadingOverlayTemplateOptions = templateOptions;
                    overlayElement = _this.$compile(loadedTemplate)(overlayElementScope);
                    overlayElement.data("isAttached", false);
                }).finally(function() {
                    var overlayInstance = new BsLoadingOverlayInstance_1.default($attributes.bsLoadingOverlayReferenceId || ($attributes.bsLoadingOverlay === "" ? undefined : $attributes.bsLoadingOverlay), +$attributes.bsLoadingOverlayDelay || globalConfig.delay, $attributes.bsLoadingOverlayActiveClass || globalConfig.activeClass, $element, overlayElement, _this.$timeout, _this.$q);
                    var unsubscribe = _this.$rootScope.$on("bsLoadingOverlayUpdateEvent", function(event, options) {
                        if (options.referenceId === overlayInstance.referenceId) {
                            _this.updateOverlayElement(overlayInstance);
                        }
                    });
                    $element.on("$destroy", function() {
                        overlayElementScope.$destroy();
                        unsubscribe();
                    });
                    _this.updateOverlayElement(overlayInstance);
                });
            };
        }
        BsLoadingOverlayDirective.prototype.updateOverlayElement = function(overlayInstance) {
            if (this.bsLoadingOverlayService.isActive(overlayInstance.referenceId)) {
                overlayInstance.add();
            } else {
                overlayInstance.remove();
            }
        };
        return BsLoadingOverlayDirective;
    }();
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = BsLoadingOverlayDirective;
    exports.BsLoadingOverlayDirectiveFactory = function($compile, $rootScope, $templateRequest, $q, $timeout, bsLoadingOverlayService) {
        return new BsLoadingOverlayDirective($compile, $rootScope, $templateRequest, $q, $timeout, bsLoadingOverlayService);
    };
    exports.BsLoadingOverlayDirectiveFactory.$inject = [ "$compile", "$rootScope", "$templateRequest", "$q", "$timeout", "bsLoadingOverlayService" ];
}, function(module, exports) {
    "use strict";
    var BsLoadingOverlayInstance = function() {
        function BsLoadingOverlayInstance(referenceId, delay, activeClass, $element, overlayElement, $timeout, $q) {
            this.referenceId = referenceId;
            this.delay = delay;
            this.activeClass = activeClass;
            this.$element = $element;
            this.overlayElement = overlayElement;
            this.$timeout = $timeout;
            this.$q = $q;
        }
        BsLoadingOverlayInstance.prototype.isAdded = function() {
            return !!this.delayPromise;
        };
        BsLoadingOverlayInstance.prototype.add = function() {
            if (this.delay) {
                if (this.delayPromise) {
                    this.$timeout.cancel(this.delayPromise);
                }
                this.delayPromise = this.$timeout(angular.noop, this.delay);
            } else {
                this.delayPromise = this.$q.when();
            }
            if (this.overlayElement && !this.overlayElement.data("isAttached")) {
                this.$element.append(this.overlayElement);
                this.overlayElement.data("isAttached", true);
            }
            this.$element.addClass(this.activeClass);
        };
        BsLoadingOverlayInstance.prototype.remove = function() {
            var _this = this;
            if (this.isAdded()) {
                this.delayPromise.then(function() {
                    if (_this.overlayElement && _this.overlayElement.data("isAttached")) {
                        _this.overlayElement.data("isAttached", false);
                        _this.overlayElement.detach();
                    }
                    _this.$element.removeClass(_this.activeClass);
                    _this.delayPromise = undefined;
                });
            }
        };
        return BsLoadingOverlayInstance;
    }();
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = BsLoadingOverlayInstance;
}, function(module, exports) {
    "use strict";
    var BsLoadingOverlayService = function() {
        function BsLoadingOverlayService($rootScope, $q) {
            var _this = this;
            this.$rootScope = $rootScope;
            this.$q = $q;
            this.globalConfig = {};
            this.activeOverlays = {};
            this.createHandler = function(options) {
                return {
                    start: _this.start.bind(_this, options),
                    stop: _this.stop.bind(_this, options),
                    wrap: _this.wrap.bind(_this, options)
                };
            };
            this.isActive = function(referenceId) {
                if (referenceId === void 0) {
                    referenceId = undefined;
                }
                return _this.activeOverlays[referenceId];
            };
            this.setGlobalConfig = function(options) {
                return angular.extend(_this.globalConfig, options);
            };
            this.getGlobalConfig = function() {
                return _this.globalConfig;
            };
        }
        BsLoadingOverlayService.prototype.start = function(options) {
            if (options === void 0) {
                options = {};
            }
            this.activeOverlays[options.referenceId] = true;
            this.notifyOverlays(options.referenceId);
        };
        BsLoadingOverlayService.prototype.wrap = function(options, promiseFunction) {
            var promise;
            if (typeof promiseFunction === "function") {
                promise = promiseFunction;
            } else {
                promise = function() {
                    return promiseFunction;
                };
            }
            return this.$q.when(this.start(options)).then(promise).finally(this.stop.bind(this, options));
        };
        BsLoadingOverlayService.prototype.notifyOverlays = function(referenceId) {
            this.$rootScope.$emit("bsLoadingOverlayUpdateEvent", {
                referenceId: referenceId
            });
        };
        BsLoadingOverlayService.prototype.stop = function(options) {
            if (options === void 0) {
                options = {};
            }
            delete this.activeOverlays[options.referenceId];
            this.notifyOverlays(options.referenceId);
        };
        return BsLoadingOverlayService;
    }();
    exports.BsLoadingOverlayService = BsLoadingOverlayService;
    var bsLoadingOverlayServiceFactory = function($rootScope, $q) {
        return new BsLoadingOverlayService($rootScope, $q);
    };
    bsLoadingOverlayServiceFactory.$inject = [ "$rootScope", "$q" ];
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = bsLoadingOverlayServiceFactory;
} ]);

(function() {
    "use strict";
    angular.module("ui.tree", []).constant("treeConfig", {
        treeClass: "angular-ui-tree",
        emptyTreeClass: "angular-ui-tree-empty",
        dropzoneClass: "angular-ui-tree-dropzone",
        hiddenClass: "angular-ui-tree-hidden",
        nodesClass: "angular-ui-tree-nodes",
        nodeClass: "angular-ui-tree-node",
        handleClass: "angular-ui-tree-handle",
        placeholderClass: "angular-ui-tree-placeholder",
        dragClass: "angular-ui-tree-drag",
        dragThreshold: 3,
        defaultCollapsed: false,
        appendChildOnHover: true
    });
})();

(function() {
    "use strict";
    angular.module("ui.tree").controller("TreeHandleController", [ "$scope", "$element", function($scope, $element) {
        this.scope = $scope;
        $scope.$element = $element;
        $scope.$nodeScope = null;
        $scope.$type = "uiTreeHandle";
    } ]);
})();

(function() {
    "use strict";
    angular.module("ui.tree").controller("TreeNodeController", [ "$scope", "$element", function($scope, $element) {
        this.scope = $scope;
        $scope.$element = $element;
        $scope.$modelValue = null;
        $scope.$parentNodeScope = null;
        $scope.$childNodesScope = null;
        $scope.$parentNodesScope = null;
        $scope.$treeScope = null;
        $scope.$handleScope = null;
        $scope.$type = "uiTreeNode";
        $scope.$$allowNodeDrop = false;
        $scope.collapsed = false;
        $scope.expandOnHover = false;
        $scope.init = function(controllersArr) {
            var treeNodesCtrl = controllersArr[0];
            $scope.$treeScope = controllersArr[1] ? controllersArr[1].scope : null;
            $scope.$parentNodeScope = treeNodesCtrl.scope.$nodeScope;
            $scope.$modelValue = treeNodesCtrl.scope.$modelValue[$scope.$index];
            $scope.$parentNodesScope = treeNodesCtrl.scope;
            treeNodesCtrl.scope.initSubNode($scope);
            $element.on("$destroy", function() {
                treeNodesCtrl.scope.destroySubNode($scope);
            });
        };
        $scope.index = function() {
            return $scope.$parentNodesScope.$modelValue.indexOf($scope.$modelValue);
        };
        $scope.dragEnabled = function() {
            return !($scope.$treeScope && !$scope.$treeScope.dragEnabled);
        };
        $scope.isSibling = function(targetNode) {
            return $scope.$parentNodesScope == targetNode.$parentNodesScope;
        };
        $scope.isChild = function(targetNode) {
            var nodes = $scope.childNodes();
            return nodes && nodes.indexOf(targetNode) > -1;
        };
        $scope.prev = function() {
            var index = $scope.index();
            if (index > 0) {
                return $scope.siblings()[index - 1];
            }
            return null;
        };
        $scope.siblings = function() {
            return $scope.$parentNodesScope.childNodes();
        };
        $scope.childNodesCount = function() {
            return $scope.childNodes() ? $scope.childNodes().length : 0;
        };
        $scope.hasChild = function() {
            return $scope.childNodesCount() > 0;
        };
        $scope.childNodes = function() {
            return $scope.$childNodesScope && $scope.$childNodesScope.$modelValue ? $scope.$childNodesScope.childNodes() : null;
        };
        $scope.accept = function(sourceNode, destIndex) {
            return $scope.$childNodesScope && $scope.$childNodesScope.$modelValue && $scope.$childNodesScope.accept(sourceNode, destIndex);
        };
        $scope.remove = function() {
            return $scope.$parentNodesScope.removeNode($scope);
        };
        $scope.toggle = function() {
            $scope.collapsed = !$scope.collapsed;
            $scope.$treeScope.$callbacks.toggle($scope.collapsed, $scope);
        };
        $scope.collapse = function() {
            $scope.collapsed = true;
        };
        $scope.expand = function() {
            $scope.collapsed = false;
        };
        $scope.depth = function() {
            var parentNode = $scope.$parentNodeScope;
            if (parentNode) {
                return parentNode.depth() + 1;
            }
            return 1;
        };
        function countSubTreeDepth(scope) {
            if (!scope) {
                return 0;
            }
            var thisLevelDepth = 0, childNodes = scope.childNodes(), childNode, childDepth, i;
            if (!childNodes || childNodes.length === 0) {
                return 0;
            }
            for (i = childNodes.length - 1; i >= 0; i--) {
                childNode = childNodes[i], childDepth = 1 + countSubTreeDepth(childNode);
                thisLevelDepth = Math.max(thisLevelDepth, childDepth);
            }
            return thisLevelDepth;
        }
        $scope.maxSubDepth = function() {
            return $scope.$childNodesScope ? countSubTreeDepth($scope.$childNodesScope) : 0;
        };
    } ]);
})();

(function() {
    "use strict";
    angular.module("ui.tree").controller("TreeNodesController", [ "$scope", "$element", "$timeout", function($scope, $element, $timeout) {
        this.scope = $scope;
        $scope.$element = $element;
        $scope.$modelValue = null;
        $scope.$nodeScope = null;
        $scope.$treeScope = null;
        $scope.$type = "uiTreeNodes";
        $scope.$nodesMap = {};
        $scope.nodropEnabled = false;
        $scope.maxDepth = 0;
        $scope.cloneEnabled = false;
        $scope.initSubNode = function(subNode) {
            if (!subNode.$modelValue) {
                return null;
            }
            $scope.$nodesMap[subNode.$modelValue.$$hashKey] = subNode;
        };
        $scope.destroySubNode = function(subNode) {
            if (!subNode.$modelValue) {
                return null;
            }
            $scope.$nodesMap[subNode.$modelValue.$$hashKey] = null;
        };
        $scope.accept = function(sourceNode, destIndex) {
            return $scope.$treeScope.$callbacks.accept(sourceNode, $scope, destIndex);
        };
        $scope.beforeDrag = function(sourceNode) {
            return $scope.$treeScope.$callbacks.beforeDrag(sourceNode);
        };
        $scope.isParent = function(node) {
            return node.$parentNodesScope == $scope;
        };
        $scope.hasChild = function() {
            return $scope.$modelValue.length > 0;
        };
        $scope.removeNode = function(node) {
            var index = $scope.$modelValue.indexOf(node.$modelValue);
            if (index > -1) {
                $timeout(function() {
                    $scope.$modelValue.splice(index, 1)[0];
                });
                return $scope.$treeScope.$callbacks.removed(node);
            }
            return null;
        };
        $scope.insertNode = function(index, nodeData) {
            $timeout(function() {
                $scope.$modelValue.splice(index, 0, nodeData);
            });
        };
        $scope.childNodes = function() {
            var i, nodes = [];
            if ($scope.$modelValue) {
                for (i = 0; i < $scope.$modelValue.length; i++) {
                    nodes.push($scope.$nodesMap[$scope.$modelValue[i].$$hashKey]);
                }
            }
            return nodes;
        };
        $scope.depth = function() {
            if ($scope.$nodeScope) {
                return $scope.$nodeScope.depth();
            }
            return 0;
        };
        $scope.outOfDepth = function(sourceNode) {
            var maxDepth = $scope.maxDepth || $scope.$treeScope.maxDepth;
            if (maxDepth > 0) {
                return $scope.depth() + sourceNode.maxSubDepth() + 1 > maxDepth;
            }
            return false;
        };
    } ]);
})();

(function() {
    "use strict";
    angular.module("ui.tree").controller("TreeController", [ "$scope", "$element", function($scope, $element) {
        this.scope = $scope;
        $scope.$element = $element;
        $scope.$nodesScope = null;
        $scope.$type = "uiTree";
        $scope.$emptyElm = null;
        $scope.$dropzoneElm = null;
        $scope.$callbacks = null;
        $scope.dragEnabled = true;
        $scope.emptyPlaceholderEnabled = true;
        $scope.maxDepth = 0;
        $scope.dragDelay = 0;
        $scope.cloneEnabled = false;
        $scope.nodropEnabled = false;
        $scope.dropzoneEnabled = false;
        $scope.isEmpty = function() {
            return $scope.$nodesScope && $scope.$nodesScope.$modelValue && $scope.$nodesScope.$modelValue.length === 0;
        };
        $scope.place = function(placeElm) {
            $scope.$nodesScope.$element.append(placeElm);
            $scope.$emptyElm.remove();
        };
        this.resetEmptyElement = function() {
            if ((!$scope.$nodesScope.$modelValue || $scope.$nodesScope.$modelValue.length === 0) && $scope.emptyPlaceholderEnabled) {
                $element.append($scope.$emptyElm);
            } else {
                $scope.$emptyElm.remove();
            }
        };
        this.resetDropzoneElement = function() {
            if ((!$scope.$nodesScope.$modelValue || $scope.$nodesScope.$modelValue.length !== 0) && $scope.dropzoneEnabled) {
                $element.append($scope.$dropzoneElm);
            } else {
                $scope.$dropzoneElm.remove();
            }
        };
        $scope.resetEmptyElement = this.resetEmptyElement;
        $scope.resetDropzoneElement = this.resetDropzoneElement;
    } ]);
})();

(function() {
    "use strict";
    angular.module("ui.tree").directive("uiTree", [ "treeConfig", "$window", function(treeConfig, $window) {
        return {
            restrict: "A",
            scope: true,
            controller: "TreeController",
            link: function(scope, element, attrs, ctrl) {
                var callbacks = {
                    accept: null,
                    beforeDrag: null
                }, config = {}, tdElm, $trElm, emptyElmColspan;
                angular.extend(config, treeConfig);
                if (config.treeClass) {
                    element.addClass(config.treeClass);
                }
                if (element.prop("tagName").toLowerCase() === "table") {
                    scope.$emptyElm = angular.element($window.document.createElement("tr"));
                    $trElm = element.find("tr");
                    if ($trElm.length > 0) {
                        emptyElmColspan = angular.element($trElm).children().length;
                    } else {
                        emptyElmColspan = 1e6;
                    }
                    tdElm = angular.element($window.document.createElement("td")).attr("colspan", emptyElmColspan);
                    scope.$emptyElm.append(tdElm);
                } else {
                    scope.$emptyElm = angular.element($window.document.createElement("div"));
                    scope.$dropzoneElm = angular.element($window.document.createElement("div"));
                }
                if (config.emptyTreeClass) {
                    scope.$emptyElm.addClass(config.emptyTreeClass);
                }
                if (config.dropzoneClass) {
                    scope.$dropzoneElm.addClass(config.dropzoneClass);
                }
                scope.$watch("$nodesScope.$modelValue.length", function(val) {
                    if (!angular.isNumber(val)) {
                        return;
                    }
                    ctrl.resetEmptyElement();
                    ctrl.resetDropzoneElement();
                }, true);
                scope.$watch(attrs.dragEnabled, function(val) {
                    if (typeof val == "boolean") {
                        scope.dragEnabled = val;
                    }
                });
                scope.$watch(attrs.emptyPlaceholderEnabled, function(val) {
                    if (typeof val == "boolean") {
                        scope.emptyPlaceholderEnabled = val;
                        ctrl.resetEmptyElement();
                    }
                });
                scope.$watch(attrs.nodropEnabled, function(val) {
                    if (typeof val == "boolean") {
                        scope.nodropEnabled = val;
                    }
                });
                scope.$watch(attrs.dropzoneEnabled, function(val) {
                    if (typeof val == "boolean") {
                        scope.dropzoneEnabled = val;
                        ctrl.resetDropzoneElement();
                    }
                });
                scope.$watch(attrs.cloneEnabled, function(val) {
                    if (typeof val == "boolean") {
                        scope.cloneEnabled = val;
                    }
                });
                scope.$watch(attrs.maxDepth, function(val) {
                    if (typeof val == "number") {
                        scope.maxDepth = val;
                    }
                });
                scope.$watch(attrs.dragDelay, function(val) {
                    if (typeof val == "number") {
                        scope.dragDelay = val;
                    }
                });
                callbacks.accept = function(sourceNodeScope, destNodesScope, destIndex) {
                    return !(destNodesScope.nodropEnabled || destNodesScope.$treeScope.nodropEnabled || destNodesScope.outOfDepth(sourceNodeScope));
                };
                callbacks.beforeDrag = function(sourceNodeScope) {
                    return true;
                };
                callbacks.expandTimeoutStart = function() {};
                callbacks.expandTimeoutCancel = function() {};
                callbacks.expandTimeoutEnd = function() {};
                callbacks.removed = function(node) {};
                callbacks.dropped = function(event) {};
                callbacks.dragStart = function(event) {};
                callbacks.dragMove = function(event) {};
                callbacks.dragStop = function(event) {};
                callbacks.beforeDrop = function(event) {};
                callbacks.toggle = function(collapsed, sourceNodeScope) {};
                scope.$watch(attrs.uiTree, function(newVal, oldVal) {
                    angular.forEach(newVal, function(value, key) {
                        if (callbacks[key]) {
                            if (typeof value === "function") {
                                callbacks[key] = value;
                            }
                        }
                    });
                    scope.$callbacks = callbacks;
                }, true);
            }
        };
    } ]);
})();

(function() {
    "use strict";
    angular.module("ui.tree").directive("uiTreeHandle", [ "treeConfig", function(treeConfig) {
        return {
            require: "^uiTreeNode",
            restrict: "A",
            scope: true,
            controller: "TreeHandleController",
            link: function(scope, element, attrs, treeNodeCtrl) {
                var config = {};
                angular.extend(config, treeConfig);
                if (config.handleClass) {
                    element.addClass(config.handleClass);
                }
                if (scope != treeNodeCtrl.scope) {
                    scope.$nodeScope = treeNodeCtrl.scope;
                    treeNodeCtrl.scope.$handleScope = scope;
                }
            }
        };
    } ]);
})();

(function() {
    "use strict";
    angular.module("ui.tree").directive("uiTreeNode", [ "treeConfig", "UiTreeHelper", "$window", "$document", "$timeout", "$q", function(treeConfig, UiTreeHelper, $window, $document, $timeout, $q) {
        return {
            require: [ "^uiTreeNodes", "^uiTree" ],
            restrict: "A",
            controller: "TreeNodeController",
            link: function(scope, element, attrs, controllersArr) {
                var config = {}, hasTouch = "ontouchstart" in window, firstMoving, dragInfo, pos, placeElm, hiddenPlaceElm, dragElm, scrollContainerElm, unhover, treeScope = null, elements, dragDelaying = true, dragStarted = false, dragTimer = null, body = document.body, html = document.documentElement, document_height, document_width, dragStart, tagName, dragMove, dragEnd, dragStartEvent, dragMoveEvent, dragEndEvent, dragCancelEvent, dragDelay, bindDragStartEvents, bindDragMoveEvents, unbindDragMoveEvents, keydownHandler, isHandleChild, el, isUiTreeRoot, treeOfOrigin;
                angular.extend(config, treeConfig);
                if (config.nodeClass) {
                    element.addClass(config.nodeClass);
                }
                scope.init(controllersArr);
                scope.collapsed = !!UiTreeHelper.getNodeAttribute(scope, "collapsed") || treeConfig.defaultCollapsed;
                scope.expandOnHover = !!UiTreeHelper.getNodeAttribute(scope, "expandOnHover");
                scope.scrollContainer = UiTreeHelper.getNodeAttribute(scope, "scrollContainer") || attrs.scrollContainer || null;
                scope.sourceOnly = scope.nodropEnabled || scope.$treeScope.nodropEnabled;
                scope.$watch(attrs.collapsed, function(val) {
                    if (typeof val == "boolean") {
                        scope.collapsed = val;
                    }
                });
                scope.$watch("collapsed", function(val) {
                    UiTreeHelper.setNodeAttribute(scope, "collapsed", val);
                    attrs.$set("collapsed", val);
                });
                scope.$watch(attrs.expandOnHover, function(val) {
                    if (typeof val === "boolean" || typeof val === "number") {
                        scope.expandOnHover = val;
                    }
                });
                scope.$watch("expandOnHover", function(val) {
                    UiTreeHelper.setNodeAttribute(scope, "expandOnHover", val);
                    attrs.$set("expandOnHover", val);
                });
                attrs.$observe("scrollContainer", function(val) {
                    if (typeof val === "string") {
                        scope.scrollContainer = val;
                    }
                });
                scope.$watch("scrollContainer", function(val) {
                    UiTreeHelper.setNodeAttribute(scope, "scrollContainer", val);
                    attrs.$set("scrollContainer", val);
                    scrollContainerElm = document.querySelector(val);
                });
                scope.$on("angular-ui-tree:collapse-all", function() {
                    scope.collapsed = true;
                });
                scope.$on("angular-ui-tree:expand-all", function() {
                    scope.collapsed = false;
                });
                dragStart = function(e) {
                    if (!hasTouch && (e.button === 2 || e.which === 3)) {
                        return;
                    }
                    if (e.uiTreeDragging || e.originalEvent && e.originalEvent.uiTreeDragging) {
                        return;
                    }
                    var eventElm = angular.element(e.target), isHandleChild, cloneElm, eventElmTagName, tagName, eventObj, tdElm, hStyle, isTreeNode, isTreeNodeHandle;
                    isHandleChild = UiTreeHelper.treeNodeHandlerContainerOfElement(eventElm);
                    if (isHandleChild) {
                        eventElm = angular.element(isHandleChild);
                    }
                    cloneElm = element.clone();
                    isTreeNode = UiTreeHelper.elementIsTreeNode(eventElm);
                    isTreeNodeHandle = UiTreeHelper.elementIsTreeNodeHandle(eventElm);
                    if (!isTreeNode && !isTreeNodeHandle) {
                        return;
                    }
                    if (isTreeNode && UiTreeHelper.elementContainsTreeNodeHandler(eventElm)) {
                        return;
                    }
                    eventElmTagName = eventElm.prop("tagName").toLowerCase();
                    if (eventElmTagName == "input" || eventElmTagName == "textarea" || eventElmTagName == "button" || eventElmTagName == "select") {
                        return;
                    }
                    el = angular.element(e.target);
                    isUiTreeRoot = el[0].attributes["ui-tree"];
                    while (el && el[0] && el[0] !== element && !isUiTreeRoot) {
                        if (el[0].attributes) {
                            isUiTreeRoot = el[0].attributes["ui-tree"];
                        }
                        if (UiTreeHelper.nodrag(el)) {
                            return;
                        }
                        el = el.parent();
                    }
                    if (!scope.beforeDrag(scope)) {
                        return;
                    }
                    e.uiTreeDragging = true;
                    if (e.originalEvent) {
                        e.originalEvent.uiTreeDragging = true;
                    }
                    e.preventDefault();
                    eventObj = UiTreeHelper.eventObj(e);
                    firstMoving = true;
                    dragInfo = UiTreeHelper.dragInfo(scope);
                    treeOfOrigin = dragInfo.source.$treeScope.$id;
                    tagName = element.prop("tagName");
                    if (tagName.toLowerCase() === "tr") {
                        placeElm = angular.element($window.document.createElement(tagName));
                        tdElm = angular.element($window.document.createElement("td")).addClass(config.placeholderClass).attr("colspan", element[0].children.length);
                        placeElm.append(tdElm);
                    } else {
                        placeElm = angular.element($window.document.createElement(tagName)).addClass(config.placeholderClass);
                    }
                    hiddenPlaceElm = angular.element($window.document.createElement(tagName));
                    if (config.hiddenClass) {
                        hiddenPlaceElm.addClass(config.hiddenClass);
                    }
                    pos = UiTreeHelper.positionStarted(eventObj, element);
                    placeElm.css("height", element.prop("offsetHeight") + "px");
                    dragElm = angular.element($window.document.createElement(scope.$parentNodesScope.$element.prop("tagName"))).addClass(scope.$parentNodesScope.$element.attr("class")).addClass(config.dragClass);
                    dragElm.css("width", UiTreeHelper.width(element) + "px");
                    dragElm.css("z-index", 9999);
                    hStyle = (element[0].querySelector(".angular-ui-tree-handle") || element[0]).currentStyle;
                    if (hStyle) {
                        document.body.setAttribute("ui-tree-cursor", $document.find("body").css("cursor") || "");
                        $document.find("body").css({
                            cursor: hStyle.cursor + "!important"
                        });
                    }
                    if (scope.sourceOnly) {
                        placeElm.css("display", "none");
                    }
                    element.after(placeElm);
                    element.after(hiddenPlaceElm);
                    if (dragInfo.isClone() && scope.sourceOnly) {
                        dragElm.append(cloneElm);
                    } else {
                        dragElm.append(element);
                    }
                    $document.find("body").append(dragElm);
                    dragElm.css({
                        left: eventObj.pageX - pos.offsetX + "px",
                        top: eventObj.pageY - pos.offsetY + "px"
                    });
                    elements = {
                        placeholder: placeElm,
                        dragging: dragElm
                    };
                    bindDragMoveEvents();
                    scope.$apply(function() {
                        scope.$treeScope.$callbacks.dragStart(dragInfo.eventArgs(elements, pos));
                    });
                    document_height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
                    document_width = Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);
                };
                dragMove = function(e) {
                    var eventObj = UiTreeHelper.eventObj(e), prev, next, leftElmPos, topElmPos, top_scroll, bottom_scroll, scrollContainerElmRect, target, targetX, targetY, displayElm, targetNode, targetElm, isEmpty, scrollDownBy, scrollUpBy, targetOffset, targetBefore, moveWithinTree, targetBeforeBuffer, targetHeight, targetChildElm, targetChildHeight, isDropzone;
                    if (dragElm) {
                        e.preventDefault();
                        if ($window.getSelection) {
                            $window.getSelection().removeAllRanges();
                        } else if ($window.document.selection) {
                            $window.document.selection.empty();
                        }
                        leftElmPos = eventObj.pageX - pos.offsetX;
                        topElmPos = eventObj.pageY - pos.offsetY;
                        if (leftElmPos < 0) {
                            leftElmPos = 0;
                        }
                        if (topElmPos < 0) {
                            topElmPos = 0;
                        }
                        if (topElmPos + 10 > document_height) {
                            topElmPos = document_height - 10;
                        }
                        if (leftElmPos + 10 > document_width) {
                            leftElmPos = document_width - 10;
                        }
                        dragElm.css({
                            left: leftElmPos + "px",
                            top: topElmPos + "px"
                        });
                        if (scrollContainerElm) {
                            scrollContainerElmRect = scrollContainerElm.getBoundingClientRect();
                            top_scroll = scrollContainerElm.scrollTop;
                            bottom_scroll = top_scroll + scrollContainerElm.clientHeight;
                            if (scrollContainerElmRect.bottom < eventObj.clientY && bottom_scroll < scrollContainerElm.scrollHeight) {
                                scrollDownBy = Math.min(scrollContainerElm.scrollHeight - bottom_scroll, 10);
                                scrollContainerElm.scrollTop += scrollDownBy;
                            }
                            if (scrollContainerElmRect.top > eventObj.clientY && top_scroll > 0) {
                                scrollUpBy = Math.min(top_scroll, 10);
                                scrollContainerElm.scrollTop -= scrollUpBy;
                            }
                        } else {
                            top_scroll = window.pageYOffset || $window.document.documentElement.scrollTop;
                            bottom_scroll = top_scroll + (window.innerHeight || $window.document.clientHeight || $window.document.clientHeight);
                            if (bottom_scroll < eventObj.pageY && bottom_scroll < document_height) {
                                scrollDownBy = Math.min(document_height - bottom_scroll, 10);
                                window.scrollBy(0, scrollDownBy);
                            }
                            if (top_scroll > eventObj.pageY) {
                                scrollUpBy = Math.min(top_scroll, 10);
                                window.scrollBy(0, -scrollUpBy);
                            }
                        }
                        UiTreeHelper.positionMoved(e, pos, firstMoving);
                        if (firstMoving) {
                            firstMoving = false;
                            return;
                        }
                        targetX = eventObj.pageX - ($window.pageXOffset || $window.document.body.scrollLeft || $window.document.documentElement.scrollLeft) - ($window.document.documentElement.clientLeft || 0);
                        targetY = eventObj.pageY - ($window.pageYOffset || $window.document.body.scrollTop || $window.document.documentElement.scrollTop) - ($window.document.documentElement.clientTop || 0);
                        if (angular.isFunction(dragElm.hide)) {
                            dragElm.hide();
                        } else {
                            displayElm = dragElm[0].style.display;
                            dragElm[0].style.display = "none";
                        }
                        $window.document.elementFromPoint(targetX, targetY);
                        targetElm = angular.element($window.document.elementFromPoint(targetX, targetY));
                        isHandleChild = UiTreeHelper.treeNodeHandlerContainerOfElement(targetElm);
                        if (isHandleChild) {
                            targetElm = angular.element(isHandleChild);
                        }
                        if (angular.isFunction(dragElm.show)) {
                            dragElm.show();
                        } else {
                            dragElm[0].style.display = displayElm;
                        }
                        if (UiTreeHelper.elementIsTree(targetElm)) {
                            targetNode = targetElm.controller("uiTree").scope;
                        } else if (UiTreeHelper.elementIsTreeNodeHandle(targetElm)) {
                            targetNode = targetElm.controller("uiTreeHandle").scope;
                        } else if (UiTreeHelper.elementIsTreeNode(targetElm)) {
                            targetNode = targetElm.controller("uiTreeNode").scope;
                        } else if (UiTreeHelper.elementIsTreeNodes(targetElm)) {
                            targetNode = targetElm.controller("uiTreeNodes").scope;
                        } else if (UiTreeHelper.elementIsPlaceholder(targetElm)) {
                            targetNode = targetElm.controller("uiTreeNodes").scope;
                        } else if (UiTreeHelper.elementIsDropzone(targetElm)) {
                            targetNode = targetElm.controller("uiTree").scope;
                            isDropzone = true;
                        } else if (targetElm.controller("uiTreeNode")) {
                            targetNode = targetElm.controller("uiTreeNode").scope;
                        }
                        moveWithinTree = targetNode && targetNode.$treeScope && targetNode.$treeScope.$id && targetNode.$treeScope.$id === treeOfOrigin;
                        if (moveWithinTree && pos.dirAx) {
                            if (pos.distX > 0) {
                                prev = dragInfo.prev();
                                if (prev && !prev.collapsed && prev.accept(scope, prev.childNodesCount())) {
                                    prev.$childNodesScope.$element.append(placeElm);
                                    dragInfo.moveTo(prev.$childNodesScope, prev.childNodes(), prev.childNodesCount());
                                }
                            }
                            if (pos.distX < 0) {
                                next = dragInfo.next();
                                if (!next) {
                                    target = dragInfo.parentNode();
                                    if (target && target.$parentNodesScope.accept(scope, target.index() + 1)) {
                                        target.$element.after(placeElm);
                                        dragInfo.moveTo(target.$parentNodesScope, target.siblings(), target.index() + 1);
                                    }
                                }
                            }
                        } else {
                            isEmpty = false;
                            if (!targetNode) {
                                return;
                            }
                            if (targetNode.$treeScope && !targetNode.$parent.nodropEnabled && !targetNode.$treeScope.nodropEnabled) {
                                placeElm.css("display", "");
                            }
                            if (targetNode.$type === "uiTree" && targetNode.dragEnabled) {
                                isEmpty = targetNode.isEmpty();
                            }
                            if (targetNode.$type === "uiTreeHandle") {
                                targetNode = targetNode.$nodeScope;
                            }
                            if (targetNode.$type !== "uiTreeNode" && !isEmpty && !isDropzone) {
                                if (config.appendChildOnHover) {
                                    next = dragInfo.next();
                                    if (!next && unhover) {
                                        target = dragInfo.parentNode();
                                        target.$element.after(placeElm);
                                        dragInfo.moveTo(target.$parentNodesScope, target.siblings(), target.index() + 1);
                                        unhover = false;
                                    }
                                }
                                return;
                            }
                            if (treeScope && placeElm.parent()[0] != treeScope.$element[0]) {
                                treeScope.resetEmptyElement();
                                treeScope.resetDropzoneElement();
                                treeScope = null;
                            }
                            if (isEmpty) {
                                treeScope = targetNode;
                                if (targetNode.$nodesScope.accept(scope, 0)) {
                                    dragInfo.moveTo(targetNode.$nodesScope, targetNode.$nodesScope.childNodes(), 0);
                                }
                            } else if (isDropzone) {
                                treeScope = targetNode;
                                if (targetNode.$nodesScope.accept(scope, targetNode.$nodesScope.childNodes().length)) {
                                    dragInfo.moveTo(targetNode.$nodesScope, targetNode.$nodesScope.childNodes(), targetNode.$nodesScope.childNodes().length);
                                }
                            } else if (targetNode.dragEnabled()) {
                                if (angular.isDefined(scope.expandTimeoutOn) && scope.expandTimeoutOn !== targetNode.id) {
                                    $timeout.cancel(scope.expandTimeout);
                                    delete scope.expandTimeout;
                                    delete scope.expandTimeoutOn;
                                    scope.$callbacks.expandTimeoutCancel();
                                }
                                if (targetNode.collapsed) {
                                    if (scope.expandOnHover === true || angular.isNumber(scope.expandOnHover) && scope.expandOnHover === 0) {
                                        targetNode.collapsed = false;
                                        targetNode.$treeScope.$callbacks.toggle(false, targetNode);
                                    } else if (scope.expandOnHover !== false && angular.isNumber(scope.expandOnHover) && scope.expandOnHover > 0) {
                                        if (angular.isUndefined(scope.expandTimeoutOn)) {
                                            scope.expandTimeoutOn = targetNode.$id;
                                            scope.$callbacks.expandTimeoutStart();
                                            scope.expandTimeout = $timeout(function() {
                                                scope.$callbacks.expandTimeoutEnd();
                                                targetNode.collapsed = false;
                                                targetNode.$treeScope.$callbacks.toggle(false, targetNode);
                                            }, scope.expandOnHover);
                                        }
                                    }
                                }
                                targetElm = targetNode.$element;
                                targetOffset = UiTreeHelper.offset(targetElm);
                                targetHeight = UiTreeHelper.height(targetElm);
                                targetChildElm = targetNode.$childNodesScope ? targetNode.$childNodesScope.$element : null;
                                targetChildHeight = targetChildElm ? UiTreeHelper.height(targetChildElm) : 0;
                                targetHeight -= targetChildHeight;
                                targetBeforeBuffer = config.appendChildOnHover ? targetHeight * .25 : UiTreeHelper.height(targetElm) / 2;
                                targetBefore = eventObj.pageY < targetOffset.top + targetBeforeBuffer;
                                if (targetNode.$parentNodesScope.accept(scope, targetNode.index())) {
                                    if (targetBefore) {
                                        targetElm[0].parentNode.insertBefore(placeElm[0], targetElm[0]);
                                        dragInfo.moveTo(targetNode.$parentNodesScope, targetNode.siblings(), targetNode.index());
                                    } else {
                                        if (config.appendChildOnHover && targetNode.accept(scope, targetNode.childNodesCount())) {
                                            targetNode.$childNodesScope.$element.prepend(placeElm);
                                            dragInfo.moveTo(targetNode.$childNodesScope, targetNode.childNodes(), 0);
                                            unhover = true;
                                        } else {
                                            targetElm.after(placeElm);
                                            dragInfo.moveTo(targetNode.$parentNodesScope, targetNode.siblings(), targetNode.index() + 1);
                                        }
                                    }
                                } else if (!targetBefore && targetNode.accept(scope, targetNode.childNodesCount())) {
                                    targetNode.$childNodesScope.$element.append(placeElm);
                                    dragInfo.moveTo(targetNode.$childNodesScope, targetNode.childNodes(), targetNode.childNodesCount());
                                }
                            }
                        }
                        scope.$apply(function() {
                            scope.$treeScope.$callbacks.dragMove(dragInfo.eventArgs(elements, pos));
                        });
                    }
                };
                dragEnd = function(e) {
                    var dragEventArgs = dragInfo.eventArgs(elements, pos);
                    e.preventDefault();
                    unbindDragMoveEvents();
                    $timeout.cancel(scope.expandTimeout);
                    scope.$treeScope.$apply(function() {
                        $q.when(scope.$treeScope.$callbacks.beforeDrop(dragEventArgs)).then(function(allowDrop) {
                            if (allowDrop !== false && scope.$$allowNodeDrop) {
                                dragInfo.apply();
                                scope.$treeScope.$callbacks.dropped(dragEventArgs);
                            } else {
                                bindDragStartEvents();
                            }
                        }).catch(function() {
                            bindDragStartEvents();
                        }).finally(function() {
                            hiddenPlaceElm.replaceWith(scope.$element);
                            placeElm.remove();
                            if (dragElm) {
                                dragElm.remove();
                                dragElm = null;
                            }
                            scope.$treeScope.$callbacks.dragStop(dragEventArgs);
                            scope.$$allowNodeDrop = false;
                            dragInfo = null;
                            var oldCur = document.body.getAttribute("ui-tree-cursor");
                            if (oldCur !== null) {
                                $document.find("body").css({
                                    cursor: oldCur
                                });
                                document.body.removeAttribute("ui-tree-cursor");
                            }
                        });
                    });
                };
                dragStartEvent = function(e) {
                    if (scope.dragEnabled()) {
                        dragStart(e);
                    }
                };
                dragMoveEvent = function(e) {
                    dragMove(e);
                };
                dragEndEvent = function(e) {
                    scope.$$allowNodeDrop = true;
                    dragEnd(e);
                };
                dragCancelEvent = function(e) {
                    dragEnd(e);
                };
                dragDelay = function() {
                    var to;
                    return {
                        exec: function(fn, ms) {
                            if (!ms) {
                                ms = 0;
                            }
                            this.cancel();
                            to = $timeout(fn, ms);
                        },
                        cancel: function() {
                            $timeout.cancel(to);
                        }
                    };
                }();
                keydownHandler = function(e) {
                    if (e.keyCode === 27) {
                        dragEndEvent(e);
                    }
                };
                bindDragStartEvents = function() {
                    element.bind("touchstart mousedown", function(e) {
                        if (scope.dragDelay > 0) {
                            dragDelay.exec(function() {
                                dragStartEvent(e);
                            }, scope.dragDelay);
                        } else {
                            dragStartEvent(e);
                        }
                    });
                    element.bind("touchend touchcancel mouseup", function() {
                        if (scope.dragDelay > 0) {
                            dragDelay.cancel();
                        }
                    });
                };
                bindDragStartEvents();
                bindDragMoveEvents = function() {
                    angular.element($document).bind("touchend", dragEndEvent);
                    angular.element($document).bind("touchcancel", dragEndEvent);
                    angular.element($document).bind("touchmove", dragMoveEvent);
                    angular.element($document).bind("mouseup", dragEndEvent);
                    angular.element($document).bind("mousemove", dragMoveEvent);
                    angular.element($document).bind("mouseleave", dragCancelEvent);
                    angular.element($document).bind("keydown", keydownHandler);
                };
                unbindDragMoveEvents = function() {
                    angular.element($document).unbind("touchend", dragEndEvent);
                    angular.element($document).unbind("touchcancel", dragEndEvent);
                    angular.element($document).unbind("touchmove", dragMoveEvent);
                    angular.element($document).unbind("mouseup", dragEndEvent);
                    angular.element($document).unbind("mousemove", dragMoveEvent);
                    angular.element($document).unbind("mouseleave", dragCancelEvent);
                    angular.element($document).unbind("keydown", keydownHandler);
                };
            }
        };
    } ]);
})();

(function() {
    "use strict";
    angular.module("ui.tree").directive("uiTreeNodes", [ "treeConfig", "$window", function(treeConfig) {
        return {
            require: [ "ngModel", "?^uiTreeNode", "^uiTree" ],
            restrict: "A",
            scope: true,
            controller: "TreeNodesController",
            link: function(scope, element, attrs, controllersArr) {
                var config = {}, ngModel = controllersArr[0], treeNodeCtrl = controllersArr[1], treeCtrl = controllersArr[2];
                angular.extend(config, treeConfig);
                if (config.nodesClass) {
                    element.addClass(config.nodesClass);
                }
                if (treeNodeCtrl) {
                    treeNodeCtrl.scope.$childNodesScope = scope;
                    scope.$nodeScope = treeNodeCtrl.scope;
                } else {
                    treeCtrl.scope.$nodesScope = scope;
                }
                scope.$treeScope = treeCtrl.scope;
                if (ngModel) {
                    ngModel.$render = function() {
                        scope.$modelValue = ngModel.$modelValue;
                    };
                }
                scope.$watch(function() {
                    return attrs.maxDepth;
                }, function(val) {
                    if (typeof val == "number") {
                        scope.maxDepth = val;
                    }
                });
                scope.$watch(function() {
                    return attrs.nodropEnabled;
                }, function(newVal) {
                    if (typeof newVal != "undefined") {
                        scope.nodropEnabled = true;
                    }
                }, true);
            }
        };
    } ]);
})();

(function() {
    "use strict";
    angular.module("ui.tree").factory("UiTreeHelper", [ "$document", "$window", "treeConfig", function($document, $window, treeConfig) {
        return {
            nodesData: {},
            setNodeAttribute: function(scope, attrName, val) {
                if (!scope.$modelValue) {
                    return null;
                }
                var data = this.nodesData[scope.$modelValue.$$hashKey];
                if (!data) {
                    data = {};
                    this.nodesData[scope.$modelValue.$$hashKey] = data;
                }
                data[attrName] = val;
            },
            getNodeAttribute: function(scope, attrName) {
                if (!scope.$modelValue) {
                    return null;
                }
                var data = this.nodesData[scope.$modelValue.$$hashKey];
                if (data) {
                    return data[attrName];
                }
                return null;
            },
            nodrag: function(targetElm) {
                if (typeof targetElm.attr("data-nodrag") != "undefined") {
                    return targetElm.attr("data-nodrag") !== "false";
                }
                return false;
            },
            eventObj: function(e) {
                var obj = e;
                if (e.targetTouches !== undefined) {
                    obj = e.targetTouches.item(0);
                } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {
                    obj = e.originalEvent.targetTouches.item(0);
                }
                return obj;
            },
            dragInfo: function(node) {
                return {
                    source: node,
                    sourceInfo: {
                        cloneModel: node.$treeScope.cloneEnabled === true ? angular.copy(node.$modelValue) : undefined,
                        nodeScope: node,
                        index: node.index(),
                        nodesScope: node.$parentNodesScope
                    },
                    index: node.index(),
                    siblings: node.siblings().slice(0),
                    parent: node.$parentNodesScope,
                    resetParent: function() {
                        this.parent = node.$parentNodesScope;
                    },
                    moveTo: function(parent, siblings, index) {
                        this.parent = parent;
                        this.siblings = siblings.slice(0);
                        var i = this.siblings.indexOf(this.source);
                        if (i > -1) {
                            this.siblings.splice(i, 1);
                            if (this.source.index() < index) {
                                index--;
                            }
                        }
                        this.siblings.splice(index, 0, this.source);
                        this.index = index;
                    },
                    parentNode: function() {
                        return this.parent.$nodeScope;
                    },
                    prev: function() {
                        if (this.index > 0) {
                            return this.siblings[this.index - 1];
                        }
                        return null;
                    },
                    next: function() {
                        if (this.index < this.siblings.length - 1) {
                            return this.siblings[this.index + 1];
                        }
                        return null;
                    },
                    isClone: function() {
                        return this.source.$treeScope.cloneEnabled === true;
                    },
                    clonedNode: function(node) {
                        return angular.copy(node);
                    },
                    isDirty: function() {
                        return this.source.$parentNodesScope != this.parent || this.source.index() != this.index;
                    },
                    isForeign: function() {
                        return this.source.$treeScope !== this.parent.$treeScope;
                    },
                    eventArgs: function(elements, pos) {
                        return {
                            source: this.sourceInfo,
                            dest: {
                                index: this.index,
                                nodesScope: this.parent
                            },
                            elements: elements,
                            pos: pos
                        };
                    },
                    apply: function() {
                        var nodeData = this.source.$modelValue;
                        if (this.parent.nodropEnabled || this.parent.$treeScope.nodropEnabled) {
                            return;
                        }
                        if (!this.isDirty()) {
                            return;
                        }
                        if (this.isClone() && this.isForeign()) {
                            this.parent.insertNode(this.index, this.sourceInfo.cloneModel);
                        } else {
                            this.source.remove();
                            this.parent.insertNode(this.index, nodeData);
                        }
                    }
                };
            },
            height: function(element) {
                return element.prop("scrollHeight");
            },
            width: function(element) {
                return element.prop("scrollWidth");
            },
            offset: function(element) {
                var boundingClientRect = element[0].getBoundingClientRect();
                return {
                    width: element.prop("offsetWidth"),
                    height: element.prop("offsetHeight"),
                    top: boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),
                    left: boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)
                };
            },
            positionStarted: function(e, target) {
                var pos = {}, pageX = e.pageX, pageY = e.pageY;
                if (e.originalEvent && e.originalEvent.touches && e.originalEvent.touches.length > 0) {
                    pageX = e.originalEvent.touches[0].pageX;
                    pageY = e.originalEvent.touches[0].pageY;
                }
                pos.offsetX = pageX - this.offset(target).left;
                pos.offsetY = pageY - this.offset(target).top;
                pos.startX = pos.lastX = pageX;
                pos.startY = pos.lastY = pageY;
                pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;
                pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;
                return pos;
            },
            positionMoved: function(e, pos, firstMoving) {
                var pageX = e.pageX, pageY = e.pageY, newAx;
                if (e.originalEvent && e.originalEvent.touches && e.originalEvent.touches.length > 0) {
                    pageX = e.originalEvent.touches[0].pageX;
                    pageY = e.originalEvent.touches[0].pageY;
                }
                pos.lastX = pos.nowX;
                pos.lastY = pos.nowY;
                pos.nowX = pageX;
                pos.nowY = pageY;
                pos.distX = pos.nowX - pos.lastX;
                pos.distY = pos.nowY - pos.lastY;
                pos.lastDirX = pos.dirX;
                pos.lastDirY = pos.dirY;
                pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;
                pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;
                newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;
                if (firstMoving) {
                    pos.dirAx = newAx;
                    pos.moving = true;
                    return;
                }
                if (pos.dirAx !== newAx) {
                    pos.distAxX = 0;
                    pos.distAxY = 0;
                } else {
                    pos.distAxX += Math.abs(pos.distX);
                    if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {
                        pos.distAxX = 0;
                    }
                    pos.distAxY += Math.abs(pos.distY);
                    if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {
                        pos.distAxY = 0;
                    }
                }
                pos.dirAx = newAx;
            },
            elementIsTreeNode: function(element) {
                return typeof element.attr("ui-tree-node") !== "undefined";
            },
            elementIsTreeNodeHandle: function(element) {
                return typeof element.attr("ui-tree-handle") !== "undefined";
            },
            elementIsTree: function(element) {
                return typeof element.attr("ui-tree") !== "undefined";
            },
            elementIsTreeNodes: function(element) {
                return typeof element.attr("ui-tree-nodes") !== "undefined";
            },
            elementIsPlaceholder: function(element) {
                return element.hasClass(treeConfig.placeholderClass);
            },
            elementIsDropzone: function(element) {
                return element.hasClass(treeConfig.dropzoneClass);
            },
            elementContainsTreeNodeHandler: function(element) {
                return element[0].querySelectorAll("[ui-tree-handle]").length >= 1;
            },
            treeNodeHandlerContainerOfElement: function(element) {
                return findFirstParentElementWithAttribute("ui-tree-handle", element[0]);
            }
        };
    } ]);
    function findFirstParentElementWithAttribute(attributeName, childObj) {
        if (childObj === undefined) {
            return null;
        }
        var testObj = childObj.parentNode, count = 1, res = typeof testObj.setAttribute === "function" && testObj.hasAttribute(attributeName) ? testObj : null;
        while (testObj && typeof testObj.setAttribute === "function" && !testObj.hasAttribute(attributeName)) {
            testObj = testObj.parentNode;
            res = testObj;
            if (testObj === document.documentElement) {
                res = null;
                break;
            }
            count++;
        }
        return res;
    }
})();

(function() {
    "use strict";
    var KEY = {
        TAB: 9,
        ENTER: 13,
        ESC: 27,
        SPACE: 32,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        HOME: 36,
        END: 35,
        BACKSPACE: 8,
        DELETE: 46,
        COMMAND: 91,
        MAP: {
            91: "COMMAND",
            8: "BACKSPACE",
            9: "TAB",
            13: "ENTER",
            16: "SHIFT",
            17: "CTRL",
            18: "ALT",
            19: "PAUSEBREAK",
            20: "CAPSLOCK",
            27: "ESC",
            32: "SPACE",
            33: "PAGE_UP",
            34: "PAGE_DOWN",
            35: "END",
            36: "HOME",
            37: "LEFT",
            38: "UP",
            39: "RIGHT",
            40: "DOWN",
            43: "+",
            44: "PRINTSCREEN",
            45: "INSERT",
            46: "DELETE",
            48: "0",
            49: "1",
            50: "2",
            51: "3",
            52: "4",
            53: "5",
            54: "6",
            55: "7",
            56: "8",
            57: "9",
            59: ";",
            61: "=",
            65: "A",
            66: "B",
            67: "C",
            68: "D",
            69: "E",
            70: "F",
            71: "G",
            72: "H",
            73: "I",
            74: "J",
            75: "K",
            76: "L",
            77: "M",
            78: "N",
            79: "O",
            80: "P",
            81: "Q",
            82: "R",
            83: "S",
            84: "T",
            85: "U",
            86: "V",
            87: "W",
            88: "X",
            89: "Y",
            90: "Z",
            96: "0",
            97: "1",
            98: "2",
            99: "3",
            100: "4",
            101: "5",
            102: "6",
            103: "7",
            104: "8",
            105: "9",
            106: "*",
            107: "+",
            109: "-",
            110: ".",
            111: "/",
            112: "F1",
            113: "F2",
            114: "F3",
            115: "F4",
            116: "F5",
            117: "F6",
            118: "F7",
            119: "F8",
            120: "F9",
            121: "F10",
            122: "F11",
            123: "F12",
            144: "NUMLOCK",
            145: "SCROLLLOCK",
            186: ";",
            187: "=",
            188: ",",
            189: "-",
            190: ".",
            191: "/",
            192: "`",
            219: "[",
            220: "\\",
            221: "]",
            222: "'"
        },
        isControl: function(e) {
            var k = e.which;
            switch (k) {
              case KEY.COMMAND:
              case KEY.SHIFT:
              case KEY.CTRL:
              case KEY.ALT:
                return true;
            }
            if (e.metaKey || e.ctrlKey || e.altKey) return true;
            return false;
        },
        isFunctionKey: function(k) {
            k = k.which ? k.which : k;
            return k >= 112 && k <= 123;
        },
        isVerticalMovement: function(k) {
            return ~[ KEY.UP, KEY.DOWN ].indexOf(k);
        },
        isHorizontalMovement: function(k) {
            return ~[ KEY.LEFT, KEY.RIGHT, KEY.BACKSPACE, KEY.DELETE ].indexOf(k);
        },
        toSeparator: function(k) {
            var sep = {
                ENTER: "\n",
                TAB: "\t",
                SPACE: " "
            }[k];
            if (sep) return sep;
            return KEY[k] ? undefined : k;
        }
    };
    function isNil(value) {
        return angular.isUndefined(value) || value === null;
    }
    if (angular.element.prototype.querySelectorAll === undefined) {
        angular.element.prototype.querySelectorAll = function(selector) {
            return angular.element(this[0].querySelectorAll(selector));
        };
    }
    if (angular.element.prototype.closest === undefined) {
        angular.element.prototype.closest = function(selector) {
            var elem = this[0];
            var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;
            while (elem) {
                if (matchesSelector.bind(elem)(selector)) {
                    return elem;
                } else {
                    elem = elem.parentElement;
                }
            }
            return false;
        };
    }
    var latestId = 0;
    var uis = angular.module("ui.select", []).constant("uiSelectConfig", {
        theme: "bootstrap",
        searchEnabled: true,
        sortable: false,
        placeholder: "",
        refreshDelay: 1e3,
        closeOnSelect: true,
        skipFocusser: false,
        dropdownPosition: "auto",
        removeSelected: true,
        resetSearchInput: true,
        generateId: function() {
            return latestId++;
        },
        appendToBody: false,
        spinnerEnabled: false,
        spinnerClass: "glyphicon glyphicon-refresh ui-select-spin",
        backspaceReset: true
    }).service("uiSelectMinErr", function() {
        var minErr = angular.$$minErr("ui.select");
        return function() {
            var error = minErr.apply(this, arguments);
            var message = error.message.replace(new RegExp("\nhttp://errors.angularjs.org/.*"), "");
            return new Error(message);
        };
    }).directive("uisTranscludeAppend", function() {
        return {
            link: function(scope, element, attrs, ctrl, transclude) {
                transclude(scope, function(clone) {
                    element.append(clone);
                });
            }
        };
    }).filter("highlight", function() {
        function escapeRegexp(queryToEscape) {
            return ("" + queryToEscape).replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
        }
        return function(matchItem, query) {
            return query && matchItem ? ("" + matchItem).replace(new RegExp(escapeRegexp(query), "gi"), '<span class="ui-select-highlight">$&</span>') : matchItem;
        };
    }).factory("uisOffset", [ "$document", "$window", function($document, $window) {
        return function(element) {
            var boundingClientRect = element[0].getBoundingClientRect();
            return {
                width: boundingClientRect.width || element.prop("offsetWidth"),
                height: boundingClientRect.height || element.prop("offsetHeight"),
                top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
                left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
            };
        };
    } ]);
    uis.factory("$$uisDebounce", [ "$timeout", function($timeout) {
        return function(callback, debounceTime) {
            var timeoutPromise;
            return function() {
                var self = this;
                var args = Array.prototype.slice.call(arguments);
                if (timeoutPromise) {
                    $timeout.cancel(timeoutPromise);
                }
                timeoutPromise = $timeout(function() {
                    callback.apply(self, args);
                }, debounceTime);
            };
        };
    } ]);
    uis.directive("uiSelectChoices", [ "uiSelectConfig", "uisRepeatParser", "uiSelectMinErr", "$compile", "$window", function(uiSelectConfig, RepeatParser, uiSelectMinErr, $compile, $window) {
        return {
            restrict: "EA",
            require: "^uiSelect",
            replace: true,
            transclude: true,
            templateUrl: function(tElement) {
                tElement.addClass("ui-select-choices");
                var theme = tElement.parent().attr("theme") || uiSelectConfig.theme;
                return theme + "/choices.tpl.html";
            },
            compile: function(tElement, tAttrs) {
                if (!tAttrs.repeat) throw uiSelectMinErr("repeat", "Expected 'repeat' expression.");
                var groupByExp = tAttrs.groupBy;
                var groupFilterExp = tAttrs.groupFilter;
                if (groupByExp) {
                    var groups = tElement.querySelectorAll(".ui-select-choices-group");
                    if (groups.length !== 1) throw uiSelectMinErr("rows", "Expected 1 .ui-select-choices-group but got '{0}'.", groups.length);
                    groups.attr("ng-repeat", RepeatParser.getGroupNgRepeatExpression());
                }
                var parserResult = RepeatParser.parse(tAttrs.repeat);
                var choices = tElement.querySelectorAll(".ui-select-choices-row");
                if (choices.length !== 1) {
                    throw uiSelectMinErr("rows", "Expected 1 .ui-select-choices-row but got '{0}'.", choices.length);
                }
                choices.attr("ng-repeat", parserResult.repeatExpression(groupByExp)).attr("ng-if", "$select.open");
                var rowsInner = tElement.querySelectorAll(".ui-select-choices-row-inner");
                if (rowsInner.length !== 1) {
                    throw uiSelectMinErr("rows", "Expected 1 .ui-select-choices-row-inner but got '{0}'.", rowsInner.length);
                }
                rowsInner.attr("uis-transclude-append", "");
                var clickTarget = $window.document.addEventListener ? choices : rowsInner;
                clickTarget.attr("ng-click", "$select.select(" + parserResult.itemName + ",$select.skipFocusser,$event)");
                return function link(scope, element, attrs, $select) {
                    $select.parseRepeatAttr(attrs.repeat, groupByExp, groupFilterExp);
                    $select.disableChoiceExpression = attrs.uiDisableChoice;
                    $select.onHighlightCallback = attrs.onHighlight;
                    $select.minimumInputLength = parseInt(attrs.minimumInputLength) || 0;
                    $select.dropdownPosition = attrs.position ? attrs.position.toLowerCase() : uiSelectConfig.dropdownPosition;
                    scope.$watch("$select.search", function(newValue) {
                        if (newValue && !$select.open && $select.multiple) $select.activate(false, true);
                        $select.activeIndex = $select.tagging.isActivated ? -1 : 0;
                        if (!attrs.minimumInputLength || $select.search.length >= attrs.minimumInputLength) {
                            $select.refresh(attrs.refresh);
                        } else {
                            $select.items = [];
                        }
                    });
                    attrs.$observe("refreshDelay", function() {
                        var refreshDelay = scope.$eval(attrs.refreshDelay);
                        $select.refreshDelay = refreshDelay !== undefined ? refreshDelay : uiSelectConfig.refreshDelay;
                    });
                    scope.$watch("$select.open", function(open) {
                        if (open) {
                            tElement.attr("role", "listbox");
                            $select.refresh(attrs.refresh);
                        } else {
                            element.removeAttr("role");
                        }
                    });
                };
            }
        };
    } ]);
    uis.controller("uiSelectCtrl", [ "$scope", "$element", "$timeout", "$filter", "$$uisDebounce", "uisRepeatParser", "uiSelectMinErr", "uiSelectConfig", "$parse", "$injector", "$window", function($scope, $element, $timeout, $filter, $$uisDebounce, RepeatParser, uiSelectMinErr, uiSelectConfig, $parse, $injector, $window) {
        var ctrl = this;
        var EMPTY_SEARCH = "";
        ctrl.placeholder = uiSelectConfig.placeholder;
        ctrl.searchEnabled = uiSelectConfig.searchEnabled;
        ctrl.sortable = uiSelectConfig.sortable;
        ctrl.refreshDelay = uiSelectConfig.refreshDelay;
        ctrl.paste = uiSelectConfig.paste;
        ctrl.resetSearchInput = uiSelectConfig.resetSearchInput;
        ctrl.refreshing = false;
        ctrl.spinnerEnabled = uiSelectConfig.spinnerEnabled;
        ctrl.spinnerClass = uiSelectConfig.spinnerClass;
        ctrl.removeSelected = uiSelectConfig.removeSelected;
        ctrl.closeOnSelect = true;
        ctrl.skipFocusser = false;
        ctrl.search = EMPTY_SEARCH;
        ctrl.activeIndex = 0;
        ctrl.items = [];
        ctrl.open = false;
        ctrl.focus = false;
        ctrl.disabled = false;
        ctrl.selected = undefined;
        ctrl.dropdownPosition = "auto";
        ctrl.focusser = undefined;
        ctrl.multiple = undefined;
        ctrl.disableChoiceExpression = undefined;
        ctrl.tagging = {
            isActivated: false,
            fct: undefined
        };
        ctrl.taggingTokens = {
            isActivated: false,
            tokens: undefined
        };
        ctrl.lockChoiceExpression = undefined;
        ctrl.clickTriggeredSelect = false;
        ctrl.$filter = $filter;
        ctrl.$element = $element;
        ctrl.$animate = function() {
            try {
                return $injector.get("$animate");
            } catch (err) {
                return null;
            }
        }();
        ctrl.searchInput = $element.querySelectorAll("input.ui-select-search");
        if (ctrl.searchInput.length !== 1) {
            throw uiSelectMinErr("searchInput", "Expected 1 input.ui-select-search but got '{0}'.", ctrl.searchInput.length);
        }
        ctrl.isEmpty = function() {
            return isNil(ctrl.selected) || ctrl.selected === "" || ctrl.multiple && ctrl.selected.length === 0;
        };
        function _findIndex(collection, predicate, thisArg) {
            if (collection.findIndex) {
                return collection.findIndex(predicate, thisArg);
            } else {
                var list = Object(collection);
                var length = list.length >>> 0;
                var value;
                for (var i = 0; i < length; i++) {
                    value = list[i];
                    if (predicate.call(thisArg, value, i, list)) {
                        return i;
                    }
                }
                return -1;
            }
        }
        function _resetSearchInput() {
            if (ctrl.resetSearchInput) {
                ctrl.search = EMPTY_SEARCH;
                if (ctrl.selected && ctrl.items.length && !ctrl.multiple) {
                    ctrl.activeIndex = _findIndex(ctrl.items, function(item) {
                        return angular.equals(this, item);
                    }, ctrl.selected);
                }
            }
        }
        function _groupsFilter(groups, groupNames) {
            var i, j, result = [];
            for (i = 0; i < groupNames.length; i++) {
                for (j = 0; j < groups.length; j++) {
                    if (groups[j].name == [ groupNames[i] ]) {
                        result.push(groups[j]);
                    }
                }
            }
            return result;
        }
        ctrl.activate = function(initSearchValue, avoidReset) {
            if (!ctrl.disabled && !ctrl.open) {
                if (!avoidReset) _resetSearchInput();
                $scope.$broadcast("uis:activate");
                ctrl.open = true;
                ctrl.activeIndex = ctrl.activeIndex >= ctrl.items.length ? 0 : ctrl.activeIndex;
                if (ctrl.activeIndex === -1 && ctrl.taggingLabel !== false) {
                    ctrl.activeIndex = 0;
                }
                var container = $element.querySelectorAll(".ui-select-choices-content");
                var searchInput = $element.querySelectorAll(".ui-select-search");
                if (ctrl.$animate && ctrl.$animate.on && ctrl.$animate.enabled(container[0])) {
                    var animateHandler = function(elem, phase) {
                        if (phase === "start" && ctrl.items.length === 0) {
                            ctrl.$animate.off("removeClass", searchInput[0], animateHandler);
                            $timeout(function() {
                                ctrl.focusSearchInput(initSearchValue);
                            });
                        } else if (phase === "close") {
                            ctrl.$animate.off("enter", container[0], animateHandler);
                            $timeout(function() {
                                ctrl.focusSearchInput(initSearchValue);
                            });
                        }
                    };
                    if (ctrl.items.length > 0) {
                        ctrl.$animate.on("enter", container[0], animateHandler);
                    } else {
                        ctrl.$animate.on("removeClass", searchInput[0], animateHandler);
                    }
                } else {
                    $timeout(function() {
                        ctrl.focusSearchInput(initSearchValue);
                        if (!ctrl.tagging.isActivated && ctrl.items.length > 1) {
                            _ensureHighlightVisible();
                        }
                    });
                }
            } else if (ctrl.open && !ctrl.searchEnabled) {
                ctrl.close();
            }
        };
        ctrl.focusSearchInput = function(initSearchValue) {
            ctrl.search = initSearchValue || ctrl.search;
            ctrl.searchInput[0].focus();
        };
        ctrl.findGroupByName = function(name) {
            return ctrl.groups && ctrl.groups.filter(function(group) {
                return group.name === name;
            })[0];
        };
        ctrl.parseRepeatAttr = function(repeatAttr, groupByExp, groupFilterExp) {
            function updateGroups(items) {
                var groupFn = $scope.$eval(groupByExp);
                ctrl.groups = [];
                angular.forEach(items, function(item) {
                    var groupName = angular.isFunction(groupFn) ? groupFn(item) : item[groupFn];
                    var group = ctrl.findGroupByName(groupName);
                    if (group) {
                        group.items.push(item);
                    } else {
                        ctrl.groups.push({
                            name: groupName,
                            items: [ item ]
                        });
                    }
                });
                if (groupFilterExp) {
                    var groupFilterFn = $scope.$eval(groupFilterExp);
                    if (angular.isFunction(groupFilterFn)) {
                        ctrl.groups = groupFilterFn(ctrl.groups);
                    } else if (angular.isArray(groupFilterFn)) {
                        ctrl.groups = _groupsFilter(ctrl.groups, groupFilterFn);
                    }
                }
                ctrl.items = [];
                ctrl.groups.forEach(function(group) {
                    ctrl.items = ctrl.items.concat(group.items);
                });
            }
            function setPlainItems(items) {
                ctrl.items = items || [];
            }
            ctrl.setItemsFn = groupByExp ? updateGroups : setPlainItems;
            ctrl.parserResult = RepeatParser.parse(repeatAttr);
            ctrl.isGrouped = !!groupByExp;
            ctrl.itemProperty = ctrl.parserResult.itemName;
            var originalSource = ctrl.parserResult.source;
            var createArrayFromObject = function() {
                var origSrc = originalSource($scope);
                $scope.$uisSource = Object.keys(origSrc).map(function(v) {
                    var result = {};
                    result[ctrl.parserResult.keyName] = v;
                    result.value = origSrc[v];
                    return result;
                });
            };
            if (ctrl.parserResult.keyName) {
                createArrayFromObject();
                ctrl.parserResult.source = $parse("$uisSource" + ctrl.parserResult.filters);
                $scope.$watch(originalSource, function(newVal, oldVal) {
                    if (newVal !== oldVal) createArrayFromObject();
                }, true);
            }
            ctrl.refreshItems = function(data) {
                data = data || ctrl.parserResult.source($scope);
                var selectedItems = ctrl.selected;
                if (ctrl.isEmpty() || angular.isArray(selectedItems) && !selectedItems.length || !ctrl.multiple || !ctrl.removeSelected) {
                    ctrl.setItemsFn(data);
                } else {
                    if (data !== undefined && data !== null) {
                        var filteredItems = data.filter(function(i) {
                            return angular.isArray(selectedItems) ? selectedItems.every(function(selectedItem) {
                                return !angular.equals(i, selectedItem);
                            }) : !angular.equals(i, selectedItems);
                        });
                        ctrl.setItemsFn(filteredItems);
                    }
                }
                if (ctrl.dropdownPosition === "auto" || ctrl.dropdownPosition === "up") {
                    $scope.calculateDropdownPos();
                }
                $scope.$broadcast("uis:refresh");
            };
            $scope.$watchCollection(ctrl.parserResult.source, function(items) {
                if (items === undefined || items === null) {
                    ctrl.items = [];
                } else {
                    if (!angular.isArray(items)) {
                        throw uiSelectMinErr("items", "Expected an array but got '{0}'.", items);
                    } else {
                        ctrl.refreshItems(items);
                        if (angular.isDefined(ctrl.ngModel.$modelValue)) {
                            ctrl.ngModel.$modelValue = null;
                        }
                    }
                }
            });
        };
        var _refreshDelayPromise;
        ctrl.refresh = function(refreshAttr) {
            if (refreshAttr !== undefined) {
                if (_refreshDelayPromise) {
                    $timeout.cancel(_refreshDelayPromise);
                }
                _refreshDelayPromise = $timeout(function() {
                    if ($scope.$select.search.length >= $scope.$select.minimumInputLength) {
                        var refreshPromise = $scope.$eval(refreshAttr);
                        if (refreshPromise && angular.isFunction(refreshPromise.then) && !ctrl.refreshing) {
                            ctrl.refreshing = true;
                            refreshPromise.finally(function() {
                                ctrl.refreshing = false;
                            });
                        }
                    }
                }, ctrl.refreshDelay);
            }
        };
        ctrl.isActive = function(itemScope) {
            if (!ctrl.open) {
                return false;
            }
            var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);
            var isActive = itemIndex == ctrl.activeIndex;
            if (!isActive || itemIndex < 0) {
                return false;
            }
            if (isActive && !angular.isUndefined(ctrl.onHighlightCallback)) {
                itemScope.$eval(ctrl.onHighlightCallback);
            }
            return isActive;
        };
        var _isItemSelected = function(item) {
            return ctrl.selected && angular.isArray(ctrl.selected) && ctrl.selected.filter(function(selection) {
                return angular.equals(selection, item);
            }).length > 0;
        };
        var disabledItems = [];
        function _updateItemDisabled(item, isDisabled) {
            var disabledItemIndex = disabledItems.indexOf(item);
            if (isDisabled && disabledItemIndex === -1) {
                disabledItems.push(item);
            }
            if (!isDisabled && disabledItemIndex > -1) {
                disabledItems.splice(disabledItemIndex, 1);
            }
        }
        function _isItemDisabled(item) {
            return disabledItems.indexOf(item) > -1;
        }
        ctrl.isDisabled = function(itemScope) {
            if (!ctrl.open) return;
            var item = itemScope[ctrl.itemProperty];
            var itemIndex = ctrl.items.indexOf(item);
            var isDisabled = false;
            if (itemIndex >= 0 && (angular.isDefined(ctrl.disableChoiceExpression) || ctrl.multiple)) {
                if (item.isTag) return false;
                if (ctrl.multiple) {
                    isDisabled = _isItemSelected(item);
                }
                if (!isDisabled && angular.isDefined(ctrl.disableChoiceExpression)) {
                    isDisabled = !!itemScope.$eval(ctrl.disableChoiceExpression);
                }
                _updateItemDisabled(item, isDisabled);
            }
            return isDisabled;
        };
        ctrl.select = function(item, skipFocusser, $event) {
            if (isNil(item) || !_isItemDisabled(item)) {
                if (!ctrl.items && !ctrl.search && !ctrl.tagging.isActivated) return;
                if (!item || !_isItemDisabled(item)) {
                    ctrl.clickTriggeredSelect = false;
                    if ($event && ($event.type === "click" || $event.type === "touchend") && item) ctrl.clickTriggeredSelect = true;
                    if (ctrl.tagging.isActivated && ctrl.clickTriggeredSelect === false) {
                        if (ctrl.taggingLabel === false) {
                            if (ctrl.activeIndex < 0) {
                                if (item === undefined) {
                                    item = ctrl.tagging.fct !== undefined ? ctrl.tagging.fct(ctrl.search) : ctrl.search;
                                }
                                if (!item || angular.equals(ctrl.items[0], item)) {
                                    return;
                                }
                            } else {
                                item = ctrl.items[ctrl.activeIndex];
                            }
                        } else {
                            if (ctrl.activeIndex === 0) {
                                if (item === undefined) return;
                                if (ctrl.tagging.fct !== undefined && typeof item === "string") {
                                    item = ctrl.tagging.fct(item);
                                    if (!item) return;
                                } else if (typeof item === "string") {
                                    item = item.replace(ctrl.taggingLabel, "").trim();
                                }
                            }
                        }
                        if (_isItemSelected(item)) {
                            ctrl.close(skipFocusser);
                            return;
                        }
                    }
                    _resetSearchInput();
                    $scope.$broadcast("uis:select", item);
                    if (ctrl.closeOnSelect) {
                        ctrl.close(skipFocusser);
                    }
                }
            }
        };
        ctrl.close = function(skipFocusser) {
            if (!ctrl.open) return;
            if (ctrl.ngModel && ctrl.ngModel.$setTouched) ctrl.ngModel.$setTouched();
            ctrl.open = false;
            _resetSearchInput();
            $scope.$broadcast("uis:close", skipFocusser);
        };
        ctrl.setFocus = function() {
            if (!ctrl.focus) ctrl.focusInput[0].focus();
        };
        ctrl.clear = function($event) {
            ctrl.select(null);
            $event.stopPropagation();
            $timeout(function() {
                ctrl.focusser[0].focus();
            }, 0, false);
        };
        ctrl.toggle = function(e) {
            if (ctrl.open) {
                ctrl.close();
                e.preventDefault();
                e.stopPropagation();
            } else {
                ctrl.activate();
            }
        };
        ctrl.isLocked = function() {
            return false;
        };
        $scope.$watch(function() {
            return angular.isDefined(ctrl.lockChoiceExpression) && ctrl.lockChoiceExpression !== "";
        }, _initaliseLockedChoices);
        function _initaliseLockedChoices(doInitalise) {
            if (!doInitalise) return;
            var lockedItems = [];
            function _updateItemLocked(item, isLocked) {
                var lockedItemIndex = lockedItems.indexOf(item);
                if (isLocked && lockedItemIndex === -1) {
                    lockedItems.push(item);
                }
                if (!isLocked && lockedItemIndex > -1) {
                    lockedItems.splice(lockedItemIndex, 1);
                }
            }
            function _isItemlocked(item) {
                return lockedItems.indexOf(item) > -1;
            }
            ctrl.isLocked = function(itemScope, itemIndex) {
                var isLocked = false, item = ctrl.selected[itemIndex];
                if (item) {
                    if (itemScope) {
                        isLocked = !!itemScope.$eval(ctrl.lockChoiceExpression);
                        _updateItemLocked(item, isLocked);
                    } else {
                        isLocked = _isItemlocked(item);
                    }
                }
                return isLocked;
            };
        }
        var sizeWatch = null;
        var updaterScheduled = false;
        ctrl.sizeSearchInput = function() {
            var input = ctrl.searchInput[0], container = ctrl.$element[0], calculateContainerWidth = function() {
                return container.clientWidth * !!input.offsetParent;
            }, updateIfVisible = function(containerWidth) {
                if (containerWidth === 0) {
                    return false;
                }
                var inputWidth = containerWidth - input.offsetLeft;
                if (inputWidth < 50) inputWidth = containerWidth;
                ctrl.searchInput.css("width", inputWidth + "px");
                return true;
            };
            ctrl.searchInput.css("width", "10px");
            $timeout(function() {
                if (sizeWatch === null && !updateIfVisible(calculateContainerWidth())) {
                    sizeWatch = $scope.$watch(function() {
                        if (!updaterScheduled) {
                            updaterScheduled = true;
                            $scope.$$postDigest(function() {
                                updaterScheduled = false;
                                if (updateIfVisible(calculateContainerWidth())) {
                                    sizeWatch();
                                    sizeWatch = null;
                                }
                            });
                        }
                    }, angular.noop);
                }
            });
        };
        function _handleDropDownSelection(key) {
            var processed = true;
            switch (key) {
              case KEY.DOWN:
                if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); else if (ctrl.activeIndex < ctrl.items.length - 1) {
                    var idx = ++ctrl.activeIndex;
                    while (_isItemDisabled(ctrl.items[idx]) && idx < ctrl.items.length) {
                        ctrl.activeIndex = ++idx;
                    }
                }
                break;

              case KEY.UP:
                var minActiveIndex = ctrl.search.length === 0 && ctrl.tagging.isActivated ? -1 : 0;
                if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); else if (ctrl.activeIndex > minActiveIndex) {
                    var idxmin = --ctrl.activeIndex;
                    while (_isItemDisabled(ctrl.items[idxmin]) && idxmin > minActiveIndex) {
                        ctrl.activeIndex = --idxmin;
                    }
                }
                break;

              case KEY.TAB:
                if (!ctrl.multiple || ctrl.open) ctrl.select(ctrl.items[ctrl.activeIndex], true);
                break;

              case KEY.ENTER:
                if (ctrl.open && (ctrl.tagging.isActivated || ctrl.activeIndex >= 0)) {
                    ctrl.select(ctrl.items[ctrl.activeIndex], ctrl.skipFocusser);
                } else {
                    ctrl.activate(false, true);
                }
                break;

              case KEY.ESC:
                ctrl.close();
                break;

              default:
                processed = false;
            }
            return processed;
        }
        ctrl.searchInput.on("keydown", function(e) {
            var key = e.which;
            if (~[ KEY.ENTER, KEY.ESC ].indexOf(key)) {
                e.preventDefault();
                e.stopPropagation();
            }
            $scope.$apply(function() {
                var tagged = false;
                if (ctrl.items.length > 0 || ctrl.tagging.isActivated) {
                    if (!_handleDropDownSelection(key) && !ctrl.searchEnabled) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                    if (ctrl.taggingTokens.isActivated) {
                        for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {
                            if (ctrl.taggingTokens.tokens[i] === KEY.MAP[e.keyCode]) {
                                if (ctrl.search.length > 0) {
                                    tagged = true;
                                }
                            }
                        }
                        if (tagged) {
                            $timeout(function() {
                                ctrl.searchInput.triggerHandler("tagged");
                                var newItem = ctrl.search.replace(KEY.MAP[e.keyCode], "").trim();
                                if (ctrl.tagging.fct) {
                                    newItem = ctrl.tagging.fct(newItem);
                                }
                                if (newItem) ctrl.select(newItem, true);
                            });
                        }
                    }
                }
            });
            if (KEY.isVerticalMovement(key) && ctrl.items.length > 0) {
                _ensureHighlightVisible();
            }
            if (key === KEY.ENTER || key === KEY.ESC) {
                e.preventDefault();
                e.stopPropagation();
            }
        });
        ctrl.searchInput.on("paste", function(e) {
            var data;
            if (window.clipboardData && window.clipboardData.getData) {
                data = window.clipboardData.getData("Text");
            } else {
                data = (e.originalEvent || e).clipboardData.getData("text/plain");
            }
            data = ctrl.search + data;
            if (data && data.length > 0) {
                if (ctrl.taggingTokens.isActivated) {
                    var items = [];
                    for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {
                        var separator = KEY.toSeparator(ctrl.taggingTokens.tokens[i]) || ctrl.taggingTokens.tokens[i];
                        if (data.indexOf(separator) > -1) {
                            items = data.split(separator);
                            break;
                        }
                    }
                    if (items.length === 0) {
                        items = [ data ];
                    }
                    var oldsearch = ctrl.search;
                    angular.forEach(items, function(item) {
                        var newItem = ctrl.tagging.fct ? ctrl.tagging.fct(item) : item;
                        if (newItem) {
                            ctrl.select(newItem, true);
                        }
                    });
                    ctrl.search = oldsearch || EMPTY_SEARCH;
                    e.preventDefault();
                    e.stopPropagation();
                } else if (ctrl.paste) {
                    ctrl.paste(data);
                    ctrl.search = EMPTY_SEARCH;
                    e.preventDefault();
                    e.stopPropagation();
                }
            }
        });
        ctrl.searchInput.on("tagged", function() {
            $timeout(function() {
                _resetSearchInput();
            });
        });
        function _ensureHighlightVisible() {
            var container = $element.querySelectorAll(".ui-select-choices-content");
            var choices = container.querySelectorAll(".ui-select-choices-row");
            if (choices.length < 1) {
                throw uiSelectMinErr("choices", "Expected multiple .ui-select-choices-row but got '{0}'.", choices.length);
            }
            if (ctrl.activeIndex < 0) {
                return;
            }
            var highlighted = choices[ctrl.activeIndex];
            var posY = highlighted.offsetTop + highlighted.clientHeight - container[0].scrollTop;
            var height = container[0].offsetHeight;
            if (posY > height) {
                container[0].scrollTop += posY - height;
            } else if (posY < highlighted.clientHeight) {
                if (ctrl.isGrouped && ctrl.activeIndex === 0) container[0].scrollTop = 0; else container[0].scrollTop -= highlighted.clientHeight - posY;
            }
        }
        var onResize = $$uisDebounce(function() {
            ctrl.sizeSearchInput();
        }, 50);
        angular.element($window).bind("resize", onResize);
        $scope.$on("$destroy", function() {
            ctrl.searchInput.off("keyup keydown tagged blur paste");
            angular.element($window).off("resize", onResize);
        });
        $scope.$watch("$select.activeIndex", function(activeIndex) {
            if (activeIndex) $element.find("input").attr("aria-activedescendant", "ui-select-choices-row-" + ctrl.generatedId + "-" + activeIndex);
        });
        $scope.$watch("$select.open", function(open) {
            if (!open) $element.find("input").removeAttr("aria-activedescendant");
        });
    } ]);
    uis.directive("uiSelect", [ "$document", "uiSelectConfig", "uiSelectMinErr", "uisOffset", "$compile", "$parse", "$timeout", function($document, uiSelectConfig, uiSelectMinErr, uisOffset, $compile, $parse, $timeout) {
        return {
            restrict: "EA",
            templateUrl: function(tElement, tAttrs) {
                var theme = tAttrs.theme || uiSelectConfig.theme;
                return theme + (angular.isDefined(tAttrs.multiple) ? "/select-multiple.tpl.html" : "/select.tpl.html");
            },
            replace: true,
            transclude: true,
            require: [ "uiSelect", "^ngModel" ],
            scope: true,
            controller: "uiSelectCtrl",
            controllerAs: "$select",
            compile: function(tElement, tAttrs) {
                var match = /{(.*)}\s*{(.*)}/.exec(tAttrs.ngClass);
                if (match) {
                    var combined = "{" + match[1] + ", " + match[2] + "}";
                    tAttrs.ngClass = combined;
                    tElement.attr("ng-class", combined);
                }
                if (angular.isDefined(tAttrs.multiple)) tElement.append("<ui-select-multiple/>").removeAttr("multiple"); else tElement.append("<ui-select-single/>");
                if (tAttrs.inputId) tElement.querySelectorAll("input.ui-select-search")[0].id = tAttrs.inputId;
                return function(scope, element, attrs, ctrls, transcludeFn) {
                    var $select = ctrls[0];
                    var ngModel = ctrls[1];
                    $select.generatedId = uiSelectConfig.generateId();
                    $select.baseTitle = attrs.title || "Select box";
                    $select.focusserTitle = $select.baseTitle + " focus";
                    $select.focusserId = "focusser-" + $select.generatedId;
                    $select.closeOnSelect = function() {
                        if (angular.isDefined(attrs.closeOnSelect)) {
                            return $parse(attrs.closeOnSelect)();
                        } else {
                            return uiSelectConfig.closeOnSelect;
                        }
                    }();
                    scope.$watch("skipFocusser", function() {
                        var skipFocusser = scope.$eval(attrs.skipFocusser);
                        $select.skipFocusser = skipFocusser !== undefined ? skipFocusser : uiSelectConfig.skipFocusser;
                    });
                    $select.onSelectCallback = $parse(attrs.onSelect);
                    $select.onRemoveCallback = $parse(attrs.onRemove);
                    $select.ngModel = ngModel;
                    $select.choiceGrouped = function(group) {
                        return $select.isGrouped && group && group.name;
                    };
                    if (attrs.tabindex) {
                        attrs.$observe("tabindex", function(value) {
                            $select.focusInput.attr("tabindex", value);
                            element.removeAttr("tabindex");
                        });
                    }
                    scope.$watch(function() {
                        return scope.$eval(attrs.searchEnabled);
                    }, function(newVal) {
                        $select.searchEnabled = newVal !== undefined ? newVal : uiSelectConfig.searchEnabled;
                    });
                    scope.$watch("sortable", function() {
                        var sortable = scope.$eval(attrs.sortable);
                        $select.sortable = sortable !== undefined ? sortable : uiSelectConfig.sortable;
                    });
                    attrs.$observe("backspaceReset", function() {
                        var backspaceReset = scope.$eval(attrs.backspaceReset);
                        $select.backspaceReset = backspaceReset !== undefined ? backspaceReset : true;
                    });
                    attrs.$observe("limit", function() {
                        $select.limit = angular.isDefined(attrs.limit) ? parseInt(attrs.limit, 10) : undefined;
                    });
                    scope.$watch("removeSelected", function() {
                        var removeSelected = scope.$eval(attrs.removeSelected);
                        $select.removeSelected = removeSelected !== undefined ? removeSelected : uiSelectConfig.removeSelected;
                    });
                    attrs.$observe("disabled", function() {
                        $select.disabled = attrs.disabled !== undefined ? attrs.disabled : false;
                    });
                    attrs.$observe("resetSearchInput", function() {
                        var resetSearchInput = scope.$eval(attrs.resetSearchInput);
                        $select.resetSearchInput = resetSearchInput !== undefined ? resetSearchInput : true;
                    });
                    attrs.$observe("paste", function() {
                        $select.paste = scope.$eval(attrs.paste);
                    });
                    attrs.$observe("tagging", function() {
                        if (attrs.tagging !== undefined) {
                            var taggingEval = scope.$eval(attrs.tagging);
                            $select.tagging = {
                                isActivated: true,
                                fct: taggingEval !== true ? taggingEval : undefined
                            };
                        } else {
                            $select.tagging = {
                                isActivated: false,
                                fct: undefined
                            };
                        }
                    });
                    attrs.$observe("taggingLabel", function() {
                        if (attrs.tagging !== undefined) {
                            if (attrs.taggingLabel === "false") {
                                $select.taggingLabel = false;
                            } else {
                                $select.taggingLabel = attrs.taggingLabel !== undefined ? attrs.taggingLabel : "(new)";
                            }
                        }
                    });
                    attrs.$observe("taggingTokens", function() {
                        if (attrs.tagging !== undefined) {
                            var tokens = attrs.taggingTokens !== undefined ? attrs.taggingTokens.split("|") : [ ",", "ENTER" ];
                            $select.taggingTokens = {
                                isActivated: true,
                                tokens: tokens
                            };
                        }
                    });
                    attrs.$observe("spinnerEnabled", function() {
                        var spinnerEnabled = scope.$eval(attrs.spinnerEnabled);
                        $select.spinnerEnabled = spinnerEnabled !== undefined ? spinnerEnabled : uiSelectConfig.spinnerEnabled;
                    });
                    attrs.$observe("spinnerClass", function() {
                        var spinnerClass = attrs.spinnerClass;
                        $select.spinnerClass = spinnerClass !== undefined ? attrs.spinnerClass : uiSelectConfig.spinnerClass;
                    });
                    if (angular.isDefined(attrs.autofocus)) {
                        $timeout(function() {
                            $select.setFocus();
                        });
                    }
                    if (angular.isDefined(attrs.focusOn)) {
                        scope.$on(attrs.focusOn, function() {
                            $timeout(function() {
                                $select.setFocus();
                            });
                        });
                    }
                    function onDocumentClick(e) {
                        if (!$select.open) return;
                        var contains = false;
                        if (window.jQuery) {
                            contains = window.jQuery.contains(element[0], e.target);
                        } else {
                            contains = element[0].contains(e.target);
                        }
                        if (!contains && !$select.clickTriggeredSelect) {
                            var skipFocusser;
                            if (!$select.skipFocusser) {
                                var focusableControls = [ "input", "button", "textarea", "select" ];
                                var targetController = angular.element(e.target).controller("uiSelect");
                                skipFocusser = targetController && targetController !== $select;
                                if (!skipFocusser) skipFocusser = ~focusableControls.indexOf(e.target.tagName.toLowerCase());
                            } else {
                                skipFocusser = true;
                            }
                            $select.close(skipFocusser);
                            scope.$digest();
                        }
                        $select.clickTriggeredSelect = false;
                    }
                    $document.on("click", onDocumentClick);
                    scope.$on("$destroy", function() {
                        $document.off("click", onDocumentClick);
                    });
                    transcludeFn(scope, function(clone) {
                        var transcluded = angular.element("<div>").append(clone);
                        var transcludedMatch = transcluded.querySelectorAll(".ui-select-match");
                        transcludedMatch.removeAttr("ui-select-match");
                        transcludedMatch.removeAttr("data-ui-select-match");
                        if (transcludedMatch.length !== 1) {
                            throw uiSelectMinErr("transcluded", "Expected 1 .ui-select-match but got '{0}'.", transcludedMatch.length);
                        }
                        element.querySelectorAll(".ui-select-match").replaceWith(transcludedMatch);
                        var transcludedChoices = transcluded.querySelectorAll(".ui-select-choices");
                        transcludedChoices.removeAttr("ui-select-choices");
                        transcludedChoices.removeAttr("data-ui-select-choices");
                        if (transcludedChoices.length !== 1) {
                            throw uiSelectMinErr("transcluded", "Expected 1 .ui-select-choices but got '{0}'.", transcludedChoices.length);
                        }
                        element.querySelectorAll(".ui-select-choices").replaceWith(transcludedChoices);
                        var transcludedNoChoice = transcluded.querySelectorAll(".ui-select-no-choice");
                        transcludedNoChoice.removeAttr("ui-select-no-choice");
                        transcludedNoChoice.removeAttr("data-ui-select-no-choice");
                        if (transcludedNoChoice.length == 1) {
                            element.querySelectorAll(".ui-select-no-choice").replaceWith(transcludedNoChoice);
                        }
                    });
                    var appendToBody = scope.$eval(attrs.appendToBody);
                    if (appendToBody !== undefined ? appendToBody : uiSelectConfig.appendToBody) {
                        scope.$watch("$select.open", function(isOpen) {
                            if (isOpen) {
                                positionDropdown();
                            } else {
                                resetDropdown();
                            }
                        });
                        scope.$on("$destroy", function() {
                            resetDropdown();
                        });
                    }
                    var placeholder = null, originalWidth = "";
                    function positionDropdown() {
                        var offset = uisOffset(element);
                        placeholder = angular.element('<div class="ui-select-placeholder"></div>');
                        placeholder[0].style.width = offset.width + "px";
                        placeholder[0].style.height = offset.height + "px";
                        element.after(placeholder);
                        originalWidth = element[0].style.width;
                        $document.find("body").append(element);
                        element[0].style.position = "absolute";
                        element[0].style.left = offset.left + "px";
                        element[0].style.top = offset.top + "px";
                        element[0].style.width = offset.width + "px";
                    }
                    function resetDropdown() {
                        if (placeholder === null) {
                            return;
                        }
                        placeholder.replaceWith(element);
                        placeholder = null;
                        element[0].style.position = "";
                        element[0].style.left = "";
                        element[0].style.top = "";
                        element[0].style.width = originalWidth;
                        $select.setFocus();
                    }
                    var dropdown = null, directionUpClassName = "direction-up";
                    scope.$watch("$select.open", function() {
                        if ($select.dropdownPosition === "auto" || $select.dropdownPosition === "up") {
                            scope.calculateDropdownPos();
                        }
                    });
                    var setDropdownPosUp = function(offset, offsetDropdown) {
                        offset = offset || uisOffset(element);
                        offsetDropdown = offsetDropdown || uisOffset(dropdown);
                        dropdown[0].style.position = "absolute";
                        dropdown[0].style.top = offsetDropdown.height * -1 + "px";
                        element.addClass(directionUpClassName);
                    };
                    var setDropdownPosDown = function(offset, offsetDropdown) {
                        element.removeClass(directionUpClassName);
                        offset = offset || uisOffset(element);
                        offsetDropdown = offsetDropdown || uisOffset(dropdown);
                        dropdown[0].style.position = "";
                        dropdown[0].style.top = "";
                    };
                    var calculateDropdownPosAfterAnimation = function() {
                        $timeout(function() {
                            if ($select.dropdownPosition === "up") {
                                setDropdownPosUp();
                            } else {
                                element.removeClass(directionUpClassName);
                                var offset = uisOffset(element);
                                var offsetDropdown = uisOffset(dropdown);
                                var scrollTop = $document[0].documentElement.scrollTop || $document[0].body.scrollTop;
                                if (offset.top + offset.height + offsetDropdown.height > scrollTop + $document[0].documentElement.clientHeight) {
                                    setDropdownPosUp(offset, offsetDropdown);
                                } else {
                                    setDropdownPosDown(offset, offsetDropdown);
                                }
                            }
                            dropdown[0].style.opacity = 1;
                        });
                    };
                    var opened = false;
                    scope.calculateDropdownPos = function() {
                        if ($select.open) {
                            dropdown = angular.element(element).querySelectorAll(".ui-select-dropdown");
                            if (dropdown.length === 0) {
                                return;
                            }
                            if ($select.search === "" && !opened) {
                                dropdown[0].style.opacity = 0;
                                opened = true;
                            }
                            if (!uisOffset(dropdown).height && $select.$animate && $select.$animate.on && $select.$animate.enabled(dropdown)) {
                                var needsCalculated = true;
                                $select.$animate.on("enter", dropdown, function(elem, phase) {
                                    if (phase === "close" && needsCalculated) {
                                        calculateDropdownPosAfterAnimation();
                                        needsCalculated = false;
                                    }
                                });
                            } else {
                                calculateDropdownPosAfterAnimation();
                            }
                        } else {
                            if (dropdown === null || dropdown.length === 0) {
                                return;
                            }
                            dropdown[0].style.opacity = 0;
                            dropdown[0].style.position = "";
                            dropdown[0].style.top = "";
                            element.removeClass(directionUpClassName);
                        }
                    };
                };
            }
        };
    } ]);
    uis.directive("uiSelectMatch", [ "uiSelectConfig", function(uiSelectConfig) {
        return {
            restrict: "EA",
            require: "^uiSelect",
            replace: true,
            transclude: true,
            templateUrl: function(tElement) {
                tElement.addClass("ui-select-match");
                var parent = tElement.parent();
                var theme = getAttribute(parent, "theme") || uiSelectConfig.theme;
                var multi = angular.isDefined(getAttribute(parent, "multiple"));
                return theme + (multi ? "/match-multiple.tpl.html" : "/match.tpl.html");
            },
            link: function(scope, element, attrs, $select) {
                $select.lockChoiceExpression = attrs.uiLockChoice;
                attrs.$observe("placeholder", function(placeholder) {
                    $select.placeholder = placeholder !== undefined ? placeholder : uiSelectConfig.placeholder;
                });
                function setAllowClear(allow) {
                    $select.allowClear = angular.isDefined(allow) ? allow === "" ? true : allow.toLowerCase() === "true" : false;
                }
                attrs.$observe("allowClear", setAllowClear);
                setAllowClear(attrs.allowClear);
                if ($select.multiple) {
                    $select.sizeSearchInput();
                }
            }
        };
        function getAttribute(elem, attribute) {
            if (elem[0].hasAttribute(attribute)) return elem.attr(attribute);
            if (elem[0].hasAttribute("data-" + attribute)) return elem.attr("data-" + attribute);
            if (elem[0].hasAttribute("x-" + attribute)) return elem.attr("x-" + attribute);
        }
    } ]);
    uis.directive("uiSelectMultiple", [ "uiSelectMinErr", "$timeout", function(uiSelectMinErr, $timeout) {
        return {
            restrict: "EA",
            require: [ "^uiSelect", "^ngModel" ],
            controller: [ "$scope", "$timeout", function($scope, $timeout) {
                var ctrl = this, $select = $scope.$select, ngModel;
                if (angular.isUndefined($select.selected)) $select.selected = [];
                $scope.$evalAsync(function() {
                    ngModel = $scope.ngModel;
                });
                ctrl.activeMatchIndex = -1;
                ctrl.updateModel = function() {
                    ngModel.$setViewValue(Date.now());
                    ctrl.refreshComponent();
                };
                ctrl.refreshComponent = function() {
                    if ($select.refreshItems) {
                        $select.refreshItems();
                    }
                    if ($select.sizeSearchInput) {
                        $select.sizeSearchInput();
                    }
                };
                ctrl.removeChoice = function(index) {
                    if ($select.isLocked(null, index)) return false;
                    var removedChoice = $select.selected[index];
                    var locals = {};
                    locals[$select.parserResult.itemName] = removedChoice;
                    $select.selected.splice(index, 1);
                    ctrl.activeMatchIndex = -1;
                    $select.sizeSearchInput();
                    $timeout(function() {
                        $select.onRemoveCallback($scope, {
                            $item: removedChoice,
                            $model: $select.parserResult.modelMapper($scope, locals)
                        });
                    });
                    ctrl.updateModel();
                    return true;
                };
                ctrl.getPlaceholder = function() {
                    if ($select.selected && $select.selected.length) return;
                    return $select.placeholder;
                };
            } ],
            controllerAs: "$selectMultiple",
            link: function(scope, element, attrs, ctrls) {
                var $select = ctrls[0];
                var ngModel = scope.ngModel = ctrls[1];
                var $selectMultiple = scope.$selectMultiple;
                $select.multiple = true;
                $select.focusInput = $select.searchInput;
                ngModel.$isEmpty = function(value) {
                    return !value || value.length === 0;
                };
                ngModel.$parsers.unshift(function() {
                    var locals = {}, result, resultMultiple = [];
                    for (var j = $select.selected.length - 1; j >= 0; j--) {
                        locals = {};
                        locals[$select.parserResult.itemName] = $select.selected[j];
                        result = $select.parserResult.modelMapper(scope, locals);
                        resultMultiple.unshift(result);
                    }
                    return resultMultiple;
                });
                ngModel.$formatters.unshift(function(inputValue) {
                    var data = $select.parserResult && $select.parserResult.source(scope, {
                        $select: {
                            search: ""
                        }
                    }), locals = {}, result;
                    if (!data) return inputValue;
                    var resultMultiple = [];
                    var checkFnMultiple = function(list, value) {
                        if (!list || !list.length) return;
                        for (var p = list.length - 1; p >= 0; p--) {
                            locals[$select.parserResult.itemName] = list[p];
                            result = $select.parserResult.modelMapper(scope, locals);
                            if ($select.parserResult.trackByExp) {
                                var propsItemNameMatches = /(\w*)\./.exec($select.parserResult.trackByExp);
                                var matches = /\.([^\s]+)/.exec($select.parserResult.trackByExp);
                                if (propsItemNameMatches && propsItemNameMatches.length > 0 && propsItemNameMatches[1] == $select.parserResult.itemName) {
                                    if (matches && matches.length > 0 && result[matches[1]] == value[matches[1]]) {
                                        resultMultiple.unshift(list[p]);
                                        return true;
                                    }
                                }
                            }
                            if (angular.equals(result, value)) {
                                resultMultiple.unshift(list[p]);
                                return true;
                            }
                        }
                        return false;
                    };
                    if (!inputValue) return resultMultiple;
                    for (var k = inputValue.length - 1; k >= 0; k--) {
                        if (!checkFnMultiple($select.selected, inputValue[k])) {
                            if (!checkFnMultiple(data, inputValue[k])) {
                                resultMultiple.unshift(inputValue[k]);
                            }
                        }
                    }
                    return resultMultiple;
                });
                scope.$watchCollection(function() {
                    return ngModel.$modelValue;
                }, function(newValue, oldValue) {
                    if (oldValue != newValue) {
                        if (angular.isDefined(ngModel.$modelValue)) {
                            ngModel.$modelValue = null;
                        }
                        $selectMultiple.refreshComponent();
                    }
                });
                ngModel.$render = function() {
                    if (!angular.isArray(ngModel.$viewValue)) {
                        if (isNil(ngModel.$viewValue)) {
                            ngModel.$viewValue = [];
                        } else {
                            throw uiSelectMinErr("multiarr", "Expected model value to be array but got '{0}'", ngModel.$viewValue);
                        }
                    }
                    $select.selected = ngModel.$viewValue;
                    $selectMultiple.refreshComponent();
                    scope.$evalAsync();
                };
                scope.$on("uis:select", function(event, item) {
                    if ($select.selected.length >= $select.limit) {
                        return;
                    }
                    $select.selected.push(item);
                    var locals = {};
                    locals[$select.parserResult.itemName] = item;
                    $timeout(function() {
                        $select.onSelectCallback(scope, {
                            $item: item,
                            $model: $select.parserResult.modelMapper(scope, locals)
                        });
                    });
                    $selectMultiple.updateModel();
                });
                scope.$on("uis:activate", function() {
                    $selectMultiple.activeMatchIndex = -1;
                });
                scope.$watch("$select.disabled", function(newValue, oldValue) {
                    if (oldValue && !newValue) $select.sizeSearchInput();
                });
                $select.searchInput.on("keydown", function(e) {
                    var key = e.which;
                    scope.$apply(function() {
                        var processed = false;
                        if (KEY.isHorizontalMovement(key)) {
                            processed = _handleMatchSelection(key);
                        }
                        if (processed && key != KEY.TAB) {
                            e.preventDefault();
                            e.stopPropagation();
                        }
                    });
                });
                function _getCaretPosition(el) {
                    if (angular.isNumber(el.selectionStart)) return el.selectionStart; else return el.value.length;
                }
                function _handleMatchSelection(key) {
                    var caretPosition = _getCaretPosition($select.searchInput[0]), length = $select.selected.length, first = 0, last = length - 1, curr = $selectMultiple.activeMatchIndex, next = $selectMultiple.activeMatchIndex + 1, prev = $selectMultiple.activeMatchIndex - 1, newIndex = curr;
                    if (caretPosition > 0 || $select.search.length && key == KEY.RIGHT) return false;
                    $select.close();
                    function getNewActiveMatchIndex() {
                        switch (key) {
                          case KEY.LEFT:
                            if (~$selectMultiple.activeMatchIndex) return prev; else return last;
                            break;

                          case KEY.RIGHT:
                            if (!~$selectMultiple.activeMatchIndex || curr === last) {
                                $select.activate();
                                return false;
                            } else return next;
                            break;

                          case KEY.BACKSPACE:
                            if (~$selectMultiple.activeMatchIndex) {
                                if ($selectMultiple.removeChoice(curr)) {
                                    return prev;
                                } else {
                                    return curr;
                                }
                            } else {
                                return last;
                            }
                            break;

                          case KEY.DELETE:
                            if (~$selectMultiple.activeMatchIndex) {
                                $selectMultiple.removeChoice($selectMultiple.activeMatchIndex);
                                return curr;
                            } else return false;
                        }
                    }
                    newIndex = getNewActiveMatchIndex();
                    if (!$select.selected.length || newIndex === false) $selectMultiple.activeMatchIndex = -1; else $selectMultiple.activeMatchIndex = Math.min(last, Math.max(first, newIndex));
                    return true;
                }
                $select.searchInput.on("keyup", function(e) {
                    if (!KEY.isVerticalMovement(e.which)) {
                        scope.$evalAsync(function() {
                            $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
                        });
                    }
                    if ($select.tagging.isActivated && $select.search.length > 0) {
                        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || KEY.isVerticalMovement(e.which)) {
                            return;
                        }
                        $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
                        if ($select.taggingLabel === false) return;
                        var items = angular.copy($select.items);
                        var stashArr = angular.copy($select.items);
                        var newItem;
                        var item;
                        var hasTag = false;
                        var dupeIndex = -1;
                        var tagItems;
                        var tagItem;
                        if ($select.tagging.fct !== undefined) {
                            tagItems = $select.$filter("filter")(items, {
                                isTag: true
                            });
                            if (tagItems.length > 0) {
                                tagItem = tagItems[0];
                            }
                            if (items.length > 0 && tagItem) {
                                hasTag = true;
                                items = items.slice(1, items.length);
                                stashArr = stashArr.slice(1, stashArr.length);
                            }
                            newItem = $select.tagging.fct($select.search);
                            if (stashArr.some(function(origItem) {
                                return angular.equals(origItem, newItem);
                            }) || $select.selected.some(function(origItem) {
                                return angular.equals(origItem, newItem);
                            })) {
                                scope.$evalAsync(function() {
                                    $select.activeIndex = 0;
                                    $select.items = items;
                                });
                                return;
                            }
                            if (newItem) newItem.isTag = true;
                        } else {
                            tagItems = $select.$filter("filter")(items, function(item) {
                                return item.match($select.taggingLabel);
                            });
                            if (tagItems.length > 0) {
                                tagItem = tagItems[0];
                            }
                            item = items[0];
                            if (item !== undefined && items.length > 0 && tagItem) {
                                hasTag = true;
                                items = items.slice(1, items.length);
                                stashArr = stashArr.slice(1, stashArr.length);
                            }
                            newItem = $select.search + " " + $select.taggingLabel;
                            if (_findApproxDupe($select.selected, $select.search) > -1) {
                                return;
                            }
                            if (_findCaseInsensitiveDupe(stashArr.concat($select.selected))) {
                                if (hasTag) {
                                    items = stashArr;
                                    scope.$evalAsync(function() {
                                        $select.activeIndex = 0;
                                        $select.items = items;
                                    });
                                }
                                return;
                            }
                            if (_findCaseInsensitiveDupe(stashArr)) {
                                if (hasTag) {
                                    $select.items = stashArr.slice(1, stashArr.length);
                                }
                                return;
                            }
                        }
                        if (hasTag) dupeIndex = _findApproxDupe($select.selected, newItem);
                        if (dupeIndex > -1) {
                            items = items.slice(dupeIndex + 1, items.length - 1);
                        } else {
                            items = [];
                            if (newItem) items.push(newItem);
                            items = items.concat(stashArr);
                        }
                        scope.$evalAsync(function() {
                            $select.activeIndex = 0;
                            $select.items = items;
                            if ($select.isGrouped) {
                                var itemsWithoutTag = newItem ? items.slice(1) : items;
                                $select.setItemsFn(itemsWithoutTag);
                                if (newItem) {
                                    $select.items.unshift(newItem);
                                    $select.groups.unshift({
                                        name: "",
                                        items: [ newItem ],
                                        tagging: true
                                    });
                                }
                            }
                        });
                    }
                });
                function _findCaseInsensitiveDupe(arr) {
                    if (arr === undefined || $select.search === undefined) {
                        return false;
                    }
                    var hasDupe = arr.filter(function(origItem) {
                        if ($select.search.toUpperCase() === undefined || origItem === undefined) {
                            return false;
                        }
                        return origItem.toUpperCase() === $select.search.toUpperCase();
                    }).length > 0;
                    return hasDupe;
                }
                function _findApproxDupe(haystack, needle) {
                    var dupeIndex = -1;
                    if (angular.isArray(haystack)) {
                        var tempArr = angular.copy(haystack);
                        for (var i = 0; i < tempArr.length; i++) {
                            if ($select.tagging.fct === undefined) {
                                if (tempArr[i] + " " + $select.taggingLabel === needle) {
                                    dupeIndex = i;
                                }
                            } else {
                                var mockObj = tempArr[i];
                                if (angular.isObject(mockObj)) {
                                    mockObj.isTag = true;
                                }
                                if (angular.equals(mockObj, needle)) {
                                    dupeIndex = i;
                                }
                            }
                        }
                    }
                    return dupeIndex;
                }
                $select.searchInput.on("blur", function() {
                    $timeout(function() {
                        $selectMultiple.activeMatchIndex = -1;
                    });
                });
            }
        };
    } ]);
    uis.directive("uiSelectNoChoice", [ "uiSelectConfig", function(uiSelectConfig) {
        return {
            restrict: "EA",
            require: "^uiSelect",
            replace: true,
            transclude: true,
            templateUrl: function(tElement) {
                tElement.addClass("ui-select-no-choice");
                var theme = tElement.parent().attr("theme") || uiSelectConfig.theme;
                return theme + "/no-choice.tpl.html";
            }
        };
    } ]);
    uis.directive("uiSelectSingle", [ "$timeout", "$compile", function($timeout, $compile) {
        return {
            restrict: "EA",
            require: [ "^uiSelect", "^ngModel" ],
            link: function(scope, element, attrs, ctrls) {
                var $select = ctrls[0];
                var ngModel = ctrls[1];
                ngModel.$parsers.unshift(function(inputValue) {
                    if (isNil(inputValue)) {
                        return inputValue;
                    }
                    var locals = {}, result;
                    locals[$select.parserResult.itemName] = inputValue;
                    result = $select.parserResult.modelMapper(scope, locals);
                    return result;
                });
                ngModel.$formatters.unshift(function(inputValue) {
                    if (isNil(inputValue)) {
                        return inputValue;
                    }
                    var data = $select.parserResult && $select.parserResult.source(scope, {
                        $select: {
                            search: ""
                        }
                    }), locals = {}, result;
                    if (data) {
                        var checkFnSingle = function(d) {
                            locals[$select.parserResult.itemName] = d;
                            result = $select.parserResult.modelMapper(scope, locals);
                            return result === inputValue;
                        };
                        if ($select.selected && checkFnSingle($select.selected)) {
                            return $select.selected;
                        }
                        for (var i = data.length - 1; i >= 0; i--) {
                            if (checkFnSingle(data[i])) return data[i];
                        }
                    }
                    return inputValue;
                });
                scope.$watch("$select.selected", function(newValue) {
                    if (ngModel.$viewValue !== newValue) {
                        ngModel.$setViewValue(newValue);
                    }
                });
                ngModel.$render = function() {
                    $select.selected = ngModel.$viewValue;
                };
                scope.$on("uis:select", function(event, item) {
                    $select.selected = item;
                    var locals = {};
                    locals[$select.parserResult.itemName] = item;
                    $timeout(function() {
                        $select.onSelectCallback(scope, {
                            $item: item,
                            $model: isNil(item) ? item : $select.parserResult.modelMapper(scope, locals)
                        });
                    });
                });
                scope.$on("uis:close", function(event, skipFocusser) {
                    $timeout(function() {
                        $select.focusser.prop("disabled", false);
                        if (!skipFocusser) $select.focusser[0].focus();
                    }, 0, false);
                });
                scope.$on("uis:activate", function() {
                    focusser.prop("disabled", true);
                });
                var focusser = angular.element("<input ng-disabled='$select.disabled' class='ui-select-focusser ui-select-offscreen' type='text' id='{{ $select.focusserId }}' aria-label='{{ $select.focusserTitle }}' aria-haspopup='true' role='button' />");
                $compile(focusser)(scope);
                $select.focusser = focusser;
                $select.focusInput = focusser;
                element.parent().append(focusser);
                focusser.bind("focus", function() {
                    scope.$evalAsync(function() {
                        $select.focus = true;
                    });
                });
                focusser.bind("blur", function() {
                    scope.$evalAsync(function() {
                        $select.focus = false;
                    });
                });
                focusser.bind("keydown", function(e) {
                    if (e.which === KEY.BACKSPACE && $select.backspaceReset !== false) {
                        e.preventDefault();
                        e.stopPropagation();
                        $select.select(undefined);
                        scope.$apply();
                        return;
                    }
                    if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {
                        return;
                    }
                    if (e.which == KEY.DOWN || e.which == KEY.UP || e.which == KEY.ENTER || e.which == KEY.SPACE) {
                        e.preventDefault();
                        e.stopPropagation();
                        $select.activate();
                    }
                    scope.$digest();
                });
                focusser.bind("keyup input", function(e) {
                    if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || e.which == KEY.ENTER || e.which === KEY.BACKSPACE) {
                        return;
                    }
                    $select.activate(focusser.val());
                    focusser.val("");
                    scope.$digest();
                });
            }
        };
    } ]);
    uis.directive("uiSelectSort", [ "$timeout", "uiSelectConfig", "uiSelectMinErr", function($timeout, uiSelectConfig, uiSelectMinErr) {
        return {
            require: [ "^^uiSelect", "^ngModel" ],
            link: function(scope, element, attrs, ctrls) {
                if (scope[attrs.uiSelectSort] === null) {
                    throw uiSelectMinErr("sort", "Expected a list to sort");
                }
                var $select = ctrls[0];
                var $ngModel = ctrls[1];
                var options = angular.extend({
                    axis: "horizontal"
                }, scope.$eval(attrs.uiSelectSortOptions));
                var axis = options.axis;
                var draggingClassName = "dragging";
                var droppingClassName = "dropping";
                var droppingBeforeClassName = "dropping-before";
                var droppingAfterClassName = "dropping-after";
                scope.$watch(function() {
                    return $select.sortable;
                }, function(newValue) {
                    if (newValue) {
                        element.attr("draggable", true);
                    } else {
                        element.removeAttr("draggable");
                    }
                });
                element.on("dragstart", function(event) {
                    element.addClass(draggingClassName);
                    (event.dataTransfer || event.originalEvent.dataTransfer).setData("text", scope.$index.toString());
                });
                element.on("dragend", function() {
                    removeClass(draggingClassName);
                });
                var move = function(from, to) {
                    this.splice(to, 0, this.splice(from, 1)[0]);
                };
                var removeClass = function(className) {
                    angular.forEach($select.$element.querySelectorAll("." + className), function(el) {
                        angular.element(el).removeClass(className);
                    });
                };
                var dragOverHandler = function(event) {
                    event.preventDefault();
                    var offset = axis === "vertical" ? event.offsetY || event.layerY || (event.originalEvent ? event.originalEvent.offsetY : 0) : event.offsetX || event.layerX || (event.originalEvent ? event.originalEvent.offsetX : 0);
                    if (offset < this[axis === "vertical" ? "offsetHeight" : "offsetWidth"] / 2) {
                        removeClass(droppingAfterClassName);
                        element.addClass(droppingBeforeClassName);
                    } else {
                        removeClass(droppingBeforeClassName);
                        element.addClass(droppingAfterClassName);
                    }
                };
                var dropTimeout;
                var dropHandler = function(event) {
                    event.preventDefault();
                    var droppedItemIndex = parseInt((event.dataTransfer || event.originalEvent.dataTransfer).getData("text"), 10);
                    $timeout.cancel(dropTimeout);
                    dropTimeout = $timeout(function() {
                        _dropHandler(droppedItemIndex);
                    }, 20);
                };
                var _dropHandler = function(droppedItemIndex) {
                    var theList = scope.$eval(attrs.uiSelectSort);
                    var itemToMove = theList[droppedItemIndex];
                    var newIndex = null;
                    if (element.hasClass(droppingBeforeClassName)) {
                        if (droppedItemIndex < scope.$index) {
                            newIndex = scope.$index - 1;
                        } else {
                            newIndex = scope.$index;
                        }
                    } else {
                        if (droppedItemIndex < scope.$index) {
                            newIndex = scope.$index;
                        } else {
                            newIndex = scope.$index + 1;
                        }
                    }
                    move.apply(theList, [ droppedItemIndex, newIndex ]);
                    $ngModel.$setViewValue(Date.now());
                    scope.$apply(function() {
                        scope.$emit("uiSelectSort:change", {
                            array: theList,
                            item: itemToMove,
                            from: droppedItemIndex,
                            to: newIndex
                        });
                    });
                    removeClass(droppingClassName);
                    removeClass(droppingBeforeClassName);
                    removeClass(droppingAfterClassName);
                    element.off("drop", dropHandler);
                };
                element.on("dragenter", function() {
                    if (element.hasClass(draggingClassName)) {
                        return;
                    }
                    element.addClass(droppingClassName);
                    element.on("dragover", dragOverHandler);
                    element.on("drop", dropHandler);
                });
                element.on("dragleave", function(event) {
                    if (event.target != element) {
                        return;
                    }
                    removeClass(droppingClassName);
                    removeClass(droppingBeforeClassName);
                    removeClass(droppingAfterClassName);
                    element.off("dragover", dragOverHandler);
                    element.off("drop", dropHandler);
                });
            }
        };
    } ]);
    uis.directive("uisOpenClose", [ "$parse", "$timeout", function($parse, $timeout) {
        return {
            restrict: "A",
            require: "uiSelect",
            link: function(scope, element, attrs, $select) {
                $select.onOpenCloseCallback = $parse(attrs.uisOpenClose);
                scope.$watch("$select.open", function(isOpen, previousState) {
                    if (isOpen !== previousState) {
                        $timeout(function() {
                            $select.onOpenCloseCallback(scope, {
                                isOpen: isOpen
                            });
                        });
                    }
                });
            }
        };
    } ]);
    uis.service("uisRepeatParser", [ "uiSelectMinErr", "$parse", function(uiSelectMinErr, $parse) {
        var self = this;
        self.parse = function(expression) {
            var match;
            match = expression.match(/^\s*(?:([\s\S]+?)\s+as\s+)?(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(\s*[\s\S]+?)?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
            if (!match) {
                throw uiSelectMinErr("iexp", "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.", expression);
            }
            var source = match[5], filters = "";
            if (match[3]) {
                source = match[5].replace(/(^\()|(\)$)/g, "");
                var filterMatch = match[5].match(/^\s*(?:[\s\S]+?)(?:[^\|]|\|\|)+([\s\S]*)\s*$/);
                if (filterMatch && filterMatch[1].trim()) {
                    filters = filterMatch[1];
                    source = source.replace(filters, "");
                }
            }
            return {
                itemName: match[4] || match[2],
                keyName: match[3],
                source: $parse(source),
                filters: filters,
                trackByExp: match[6],
                modelMapper: $parse(match[1] || match[4] || match[2]),
                repeatExpression: function(grouped) {
                    var expression = this.itemName + " in " + (grouped ? "$group.items" : "$select.items");
                    if (this.trackByExp) {
                        expression += " track by " + this.trackByExp;
                    }
                    return expression;
                }
            };
        };
        self.getGroupNgRepeatExpression = function() {
            return "$group in $select.groups track by $group.name";
        };
    } ]);
})();

angular.module("ui.select").run([ "$templateCache", function($templateCache) {
    $templateCache.put("bootstrap/choices.tpl.html", '<ul class="ui-select-choices ui-select-choices-content ui-select-dropdown dropdown-menu" ng-show="$select.open && $select.items.length > 0"><li class="ui-select-choices-group" id="ui-select-choices-{{ $select.generatedId }}"><div class="divider" ng-show="$select.isGrouped && $index > 0"></div><div ng-show="$select.isGrouped" class="ui-select-choices-group-label dropdown-header" ng-bind="$group.name"></div><div ng-attr-id="ui-select-choices-row-{{ $select.generatedId }}-{{$index}}" class="ui-select-choices-row" ng-class="{active: $select.isActive(this), disabled: $select.isDisabled(this)}" role="option"><span class="ui-select-choices-row-inner"></span></div></li></ul>');
    $templateCache.put("bootstrap/match-multiple.tpl.html", '<span class="ui-select-match"><span ng-repeat="$item in $select.selected track by $index"><span class="ui-select-match-item btn btn-default btn-xs" tabindex="-1" type="button" ng-disabled="$select.disabled" ng-click="$selectMultiple.activeMatchIndex = $index;" ng-class="{\'btn-primary\':$selectMultiple.activeMatchIndex === $index, \'select-locked\':$select.isLocked(this, $index)}" ui-select-sort="$select.selected"><span class="close ui-select-match-close" ng-hide="$select.disabled" ng-click="$selectMultiple.removeChoice($index)">&nbsp;&times;</span> <span uis-transclude-append=""></span></span></span></span>');
    $templateCache.put("bootstrap/match.tpl.html", '<div class="ui-select-match" ng-hide="$select.open && $select.searchEnabled" ng-disabled="$select.disabled" ng-class="{\'btn-default-focus\':$select.focus}"><span tabindex="-1" class="btn btn-default form-control ui-select-toggle" aria-label="{{ $select.baseTitle }} activate" ng-disabled="$select.disabled" ng-click="$select.activate()" style="outline: 0;"><span ng-show="$select.isEmpty()" class="ui-select-placeholder text-muted">{{$select.placeholder}}</span> <span ng-hide="$select.isEmpty()" class="ui-select-match-text pull-left" ng-class="{\'ui-select-allow-clear\': $select.allowClear && !$select.isEmpty()}" ng-transclude=""></span> <i class="caret pull-right" ng-click="$select.toggle($event)"></i> <a ng-show="$select.allowClear && !$select.isEmpty() && ($select.disabled !== true)" aria-label="{{ $select.baseTitle }} clear" style="margin-right: 10px" ng-click="$select.clear($event)" class="btn btn-xs btn-link pull-right"><i class="glyphicon glyphicon-remove" aria-hidden="true"></i></a></span></div>');
    $templateCache.put("bootstrap/no-choice.tpl.html", '<ul class="ui-select-no-choice dropdown-menu" ng-show="$select.items.length == 0"><li ng-transclude=""></li></ul>');
    $templateCache.put("bootstrap/select-multiple.tpl.html", '<div class="ui-select-container ui-select-multiple ui-select-bootstrap dropdown form-control" ng-class="{open: $select.open}"><div><div class="ui-select-match"></div><input type="search" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" class="ui-select-search input-xs" placeholder="{{$selectMultiple.getPlaceholder()}}" ng-disabled="$select.disabled" ng-click="$select.activate()" ng-model="$select.search" role="combobox" aria-expanded="{{$select.open}}" aria-label="{{$select.baseTitle}}" ng-class="{\'spinner\': $select.refreshing}" ondrop="return false;"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>');
    $templateCache.put("bootstrap/select.tpl.html", '<div class="ui-select-container ui-select-bootstrap dropdown" ng-class="{open: $select.open}"><div class="ui-select-match"></div><span ng-show="$select.open && $select.refreshing && $select.spinnerEnabled" class="ui-select-refreshing {{$select.spinnerClass}}"></span> <input type="search" autocomplete="off" tabindex="-1" aria-expanded="true" aria-label="{{ $select.baseTitle }}" aria-owns="ui-select-choices-{{ $select.generatedId }}" class="form-control ui-select-search" ng-class="{ \'ui-select-search-hidden\' : !$select.searchEnabled }" placeholder="{{$select.placeholder}}" ng-model="$select.search" ng-show="$select.open"><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>');
    $templateCache.put("select2/choices.tpl.html", '<ul tabindex="-1" class="ui-select-choices ui-select-choices-content select2-results"><li class="ui-select-choices-group" ng-class="{\'select2-result-with-children\': $select.choiceGrouped($group) }"><div ng-show="$select.choiceGrouped($group)" class="ui-select-choices-group-label select2-result-label" ng-bind="$group.name"></div><ul id="ui-select-choices-{{ $select.generatedId }}" ng-class="{\'select2-result-sub\': $select.choiceGrouped($group), \'select2-result-single\': !$select.choiceGrouped($group) }"><li role="option" ng-attr-id="ui-select-choices-row-{{ $select.generatedId }}-{{$index}}" class="ui-select-choices-row" ng-class="{\'select2-highlighted\': $select.isActive(this), \'select2-disabled\': $select.isDisabled(this)}"><div class="select2-result-label ui-select-choices-row-inner"></div></li></ul></li></ul>');
    $templateCache.put("select2/match-multiple.tpl.html", '<span class="ui-select-match"><li class="ui-select-match-item select2-search-choice" ng-repeat="$item in $select.selected track by $index" ng-class="{\'select2-search-choice-focus\':$selectMultiple.activeMatchIndex === $index, \'select2-locked\':$select.isLocked(this, $index)}" ui-select-sort="$select.selected"><span uis-transclude-append=""></span> <a href="javascript:;" class="ui-select-match-close select2-search-choice-close" ng-click="$selectMultiple.removeChoice($index)" tabindex="-1"></a></li></span>');
    $templateCache.put("select2/match.tpl.html", '<a class="select2-choice ui-select-match" ng-class="{\'select2-default\': $select.isEmpty()}" ng-click="$select.toggle($event)" aria-label="{{ $select.baseTitle }} select"><span ng-show="$select.isEmpty()" class="select2-chosen">{{$select.placeholder}}</span> <span ng-hide="$select.isEmpty()" class="select2-chosen" ng-transclude=""></span> <abbr ng-if="$select.allowClear && !$select.isEmpty()" class="select2-search-choice-close" ng-click="$select.clear($event)"></abbr> <span class="select2-arrow ui-select-toggle"><b></b></span></a>');
    $templateCache.put("select2/no-choice.tpl.html", '<div class="ui-select-no-choice dropdown" ng-show="$select.items.length == 0"><div class="dropdown-content"><div data-selectable="" ng-transclude=""></div></div></div>');
    $templateCache.put("select2/select-multiple.tpl.html", '<div class="ui-select-container ui-select-multiple select2 select2-container select2-container-multi" ng-class="{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled}"><ul class="select2-choices"><span class="ui-select-match"></span><li class="select2-search-field"><input type="search" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="combobox" aria-expanded="true" aria-owns="ui-select-choices-{{ $select.generatedId }}" aria-label="{{ $select.baseTitle }}" aria-activedescendant="ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}" class="select2-input ui-select-search" placeholder="{{$selectMultiple.getPlaceholder()}}" ng-disabled="$select.disabled" ng-hide="$select.disabled" ng-model="$select.search" ng-click="$select.activate()" style="width: 34px;" ondrop="return false;"></li></ul><div class="ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active" ng-class="{\'select2-display-none\': !$select.open || $select.items.length === 0}"><div class="ui-select-choices"></div></div></div>');
    $templateCache.put("select2/select.tpl.html", '<div class="ui-select-container select2 select2-container" ng-class="{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled, \'select2-container-active\': $select.focus, \'select2-allowclear\': $select.allowClear && !$select.isEmpty()}"><div class="ui-select-match"></div><div class="ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active" ng-class="{\'select2-display-none\': !$select.open}"><div class="search-container" ng-class="{\'ui-select-search-hidden\':!$select.searchEnabled, \'select2-search\':$select.searchEnabled}"><input type="search" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" ng-class="{\'select2-active\': $select.refreshing}" role="combobox" aria-expanded="true" aria-owns="ui-select-choices-{{ $select.generatedId }}" aria-label="{{ $select.baseTitle }}" class="ui-select-search select2-input" ng-model="$select.search"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div></div>');
    $templateCache.put("selectize/choices.tpl.html", '<div ng-show="$select.open" class="ui-select-choices ui-select-dropdown selectize-dropdown" ng-class="{\'single\': !$select.multiple, \'multi\': $select.multiple}"><div class="ui-select-choices-content selectize-dropdown-content"><div class="ui-select-choices-group optgroup"><div ng-show="$select.isGrouped" class="ui-select-choices-group-label optgroup-header" ng-bind="$group.name"></div><div role="option" class="ui-select-choices-row" ng-class="{active: $select.isActive(this), disabled: $select.isDisabled(this)}"><div class="option ui-select-choices-row-inner" data-selectable=""></div></div></div></div></div>');
    $templateCache.put("selectize/match-multiple.tpl.html", '<div class="ui-select-match" data-value="" ng-repeat="$item in $select.selected track by $index" ng-click="$selectMultiple.activeMatchIndex = $index;" ng-class="{\'active\':$selectMultiple.activeMatchIndex === $index}" ui-select-sort="$select.selected"><span class="ui-select-match-item" ng-class="{\'select-locked\':$select.isLocked(this, $index)}"><span uis-transclude-append=""></span> <span class="remove ui-select-match-close" ng-hide="$select.disabled" ng-click="$selectMultiple.removeChoice($index)">&times;</span></span></div>');
    $templateCache.put("selectize/match.tpl.html", '<div ng-hide="$select.searchEnabled && ($select.open || $select.isEmpty())" class="ui-select-match"><span ng-show="!$select.searchEnabled && ($select.isEmpty() || $select.open)" class="ui-select-placeholder text-muted">{{$select.placeholder}}</span> <span ng-hide="$select.isEmpty() || $select.open" ng-transclude=""></span></div>');
    $templateCache.put("selectize/no-choice.tpl.html", '<div class="ui-select-no-choice selectize-dropdown" ng-show="$select.items.length == 0"><div class="selectize-dropdown-content"><div data-selectable="" ng-transclude=""></div></div></div>');
    $templateCache.put("selectize/select-multiple.tpl.html", '<div class="ui-select-container selectize-control multi plugin-remove_button" ng-class="{\'open\': $select.open}"><div class="selectize-input" ng-class="{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}" ng-click="$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()"><div class="ui-select-match"></div><input type="search" autocomplete="off" tabindex="-1" class="ui-select-search" ng-class="{\'ui-select-search-hidden\':!$select.searchEnabled}" placeholder="{{$selectMultiple.getPlaceholder()}}" ng-model="$select.search" ng-disabled="$select.disabled" aria-expanded="{{$select.open}}" aria-label="{{ $select.baseTitle }}" ondrop="return false;"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>');
    $templateCache.put("selectize/select.tpl.html", '<div class="ui-select-container selectize-control single" ng-class="{\'open\': $select.open}"><div class="selectize-input" ng-class="{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}" ng-click="$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()"><div class="ui-select-match"></div><input type="search" autocomplete="off" tabindex="-1" class="ui-select-search ui-select-toggle" ng-class="{\'ui-select-search-hidden\':!$select.searchEnabled}" ng-click="$select.toggle($event)" placeholder="{{$select.placeholder}}" ng-model="$select.search" ng-hide="!$select.isEmpty() && !$select.open" ng-disabled="$select.disabled" aria-label="{{ $select.baseTitle }}"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>');
} ]);